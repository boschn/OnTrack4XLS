<?xml version="1.0"?>
<doc>
<assembly>
<name>
otdbBackEnd
</name>
</assembly>
<members>
<member name="P:OnTrack.UI.iUINativeForm.OtdbShadow">
	<summary>
 Connect with OTDB counterpart
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.iUINativeForm.ShowOTDBForm">
	<summary>
 show the native Form
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.iUINativeForm.CloseOTDBForm">
	<summary>
 Close the Form
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.iUINativeForm.RefreshOTDBForm">
	<summary>
 Refresh the Form
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.iUINativeForm">
	<summary>
 base interface of the native Forms to fullfill
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.iUINativeFormMessageBox">
	<summary>
 Interface of the MessageBox Form the mapped UI class has to fullfill
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.iUINativeFormLogin">
	<summary>
 Interface of the LoginForm the mapped UI class has to fullfill
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.clsOTDBAbstractUIForm">
	<summary>
 Abstract Base Class for the OTDB UI Forms
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.clsCoreUIMessageBox.ButtonType">
	<summary>
 Button Types
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.clsCoreUIMessageBox.ResultType">
	<summary>
 Result
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.clsCoreUIMessageBox.MessageType">
	<summary>
 Type of Messagebox
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.UI.clsCoreUIMessageBox._form">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.clsCoreUIMessageBox.buttons">
	<summary>
 set the Buttons
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.clsCoreUIMessageBox.type">
	<summary>
 MessageType
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.clsCoreUIMessageBox.result">
	<summary>
 result
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.clsCoreUIMessageBox.Message">
	<summary>
 Message of the Message Box
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.clsCoreUIMessageBox.Title">
	<summary>
 Title of the Messagebox
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.clsCoreUIMessageBox">
	<summary>
 class is a wrapper abstract class for the Messagebox to OTDB
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.clsCoreUILogin.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.clsCoreUILogin.Session">
	<summary>
 Gets or sets the session.
 </summary>
	<value>The session.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.Databasedriver">
	<summary>
 Gets or sets the databasedriver.
 </summary>
	<value>The databasedriver.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.PossibleConfigSets">
	<summary>
 Gets or sets the possible config sets.
 </summary>
	<value>The possible config sets.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.PossibleDomains">
	<summary>
 Gets or sets the possible domains.
 </summary>
	<value>The possible domains.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.PossibleRights">
	<summary>
 Gets or sets the possible rights.
 </summary>
	<value>The possible rights.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.EnableDomain">
	<summary>
 Gets or sets the enable domain.
 </summary>
	<value>The enable domain.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.EnableConfigSet">
	<summary>
 Gets or sets the enable config set.
 </summary>
	<value>The enable config set.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.enableAccess">
	<summary>
 Gets or sets the enable acces.
 </summary>
	<value>The enable acces.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.Configset">
	<summary>
 Gets or sets the configset.
 </summary>
	<value>The configset.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.Domain">
	<summary>
 Gets or sets the domain.
 </summary>
	<value>The domain.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.Messagetext">
	<summary>
 Gets or sets the messagetext.
 </summary>
	<value>The messagetext.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.EnableUsername">
	<summary>
 Gets or sets the enable username.
 </summary>
	<value>The enable username.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.Statustext">
	<summary>
 Gets or sets the statustext.
 </summary>
	<value>The statustext.</value>
</member><member name="T:OnTrack.UI.clsCoreUILogin">
	<summary>
 class is a wrapper abstract class for the Login to OTDB
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.IsNull">
	<summary>
 Gets or sets the is null.
 </summary>
	<value>The is null.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.IsEmpty">
	<summary>
 Gets or sets the is empty.
 </summary>
	<value>The is empty.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.Datatype">
	<summary>
 Gets or sets the datatype.
 </summary>
	<value>The datatype.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.Msglog">
	<summary>
 Gets or sets the msglog.
 </summary>
	<value>The msglog.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.ConvertSucceeded">
	<summary>
 Gets or sets the convert succeeded.
 </summary>
	<value>The convert succeeded.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.Value">
	<summary>
 returns the value to be converted
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.ConvertedValue">
	<summary>
 returns the converted value 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.Dbvalue">
	<summary>
 Gets or sets the dbvalue.
 </summary>
	<value>The dbvalue.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.Hostvalue">
	<summary>
 Gets or sets the hostvalue.
 </summary>
	<value>The hostvalue.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.HostValueisNull">
	<summary>
 Gets or sets the host valueis null.
 </summary>
	<value>The host valueis null.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.HostValueisEmpty">
	<summary>
 Gets or sets the host valueis empty.
 </summary>
	<value>The host valueis empty.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.DbValueisNull">
	<summary>
 Gets or sets the db valueis null.
 </summary>
	<value>The db valueis null.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.DbValueIsEmpty">
	<summary>
 Gets or sets the db value is empty.
 </summary>
	<value>The db value is empty.</value>
</member><member name="T:OnTrack.XChange.ConvertRequestEventArgs">
	<summary>
 Arguments for the ConvertRequest and Result Arguments
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.Entryname">
	<summary>
 returns the entryname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.ID">
	<summary>
 returns the ID of the ConfigMember
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.Objectname">
	<summary>
 returns the name of the Object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.Aliases">
	<summary>
 returns a List of Aliases
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.Configname">
	<summary>
 returns the configname of this Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.HasAlias(System.String)">
	<summary>
 Has Alias
 </summary>
	<param name="alias"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.Msglogtag">
	<summary>
 gets the MSGLog Tag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.XChangeCmd">
	<summary>
 gets or sets the Xchange Command
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.Parameter">
	<summary>
 gets or sets parameter
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.Relation">
	<summary>
 gets or sets relation
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.Indexno">
	<summary>
 Primary Key Indexno
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.IsXChanged">
	<summary>
 gets or sets the Xhanged Flag - value is not xchangend to and from Host Application
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.IsReadOnly">
	<summary>
 sets the Readonly Flag - value of the OTDB cannot be overwritten
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.IsAttributeEntry">
	<summary>
 gets or sets the Attribute Entry Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.IsCompound">
	<summary>
 gets True if this is a Compound
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.IsField">
	<summary>
 gets True if the Attribute is a Field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.IsObjectEntry">
	<summary>
 gets True if this is an Object Entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.ordinal">
	<summary>
 gets or sets the ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.IsOrderedBy">
	<summary>
 gets or sets the OrderedBy Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.iConfigMember">
	<summary>
 Interface for XConfigMembers
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigObjectEntry.IsAttributeEntry">
	<summary>
 gets or sets the Attribute Entry Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigObjectEntry.IsField">
	<summary>
 gets True if the Attribute is a Field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigObjectEntry.IsObjectEntry">
	<summary>
 gets True if this is an Object Entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfigObjectEntry.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XConfigObjectEntry">
	<summary>
 describes an XChange XConfigMember ObjectEntry (Object is usually the Table)
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.ID">
	<summary>
 gets or sets the XChange ID for the Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.Entryname">
	<summary>
 gets the fieldname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.Aliases">
	<summary>
 gets the Aliases of the XChange Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.HasAlias(System.String)">
	<summary>
 gets true if the XChangeMember has the Alias
 </summary>
	<param name="alias"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.IsAttributeEntry">
	<summary>
 gets or sets the Attribute Entry Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.IsCompound">
	<summary>
 gets True if this is a Compound
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.IsField">
	<summary>
 gets True if the Attribute is a Field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.IsObjectEntry">
	<summary>
 gets True if this is an Object Entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.IsDynamicAttribute">
	<summary>
 gets or sets the Dynamic Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfigAttributeEntry.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XConfigAttributeEntry">
	<summary>
 describes the XConfig Member Attribute
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.ID">
	<summary>
 gets or sets the XChange ID for the Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Entryname">
	<summary>
 gets the fieldname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Objectname">
	<summary>
 gets or sets the objectname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Msglogtag">
	<summary>
 gets the MSGLog Tag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Configname">
	<summary>
 gets the configname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Aliases">
	<summary>
 gets the Aliases of the XChange Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.HasAlias(System.String)">
	<summary>
 gets true if the XChangeMember has the Alias
 </summary>
	<param name="alias"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.XChangeCmd">
	<summary>
 gets or sets the Xchange Command
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.ObjectEntryDefinition">
	<summary>
 gets the ObjectEntry Definition for the XChange Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.ObjectDefinition">
	<summary>
 Object Definition
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.ordinal">
	<summary>
 gets or sets the ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Parameter">
	<summary>
 gets or sets parameter
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Relation">
	<summary>
 gets or sets relation
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Comment">
	<summary>
 gets or sets comment
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Indexno">
	<summary>
 Primary Key Indexno
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.IsXChanged">
	<summary>
 gets or sets the Xhanged Flag - value is not xchangend to and from Host Application
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.IsReadOnly">
	<summary>
 sets the Readonly Flag - value of the OTDB cannot be overwritten
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.IsAttributeEntry">
	<summary>
 gets or sets the Attribute Entry Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.IsCompound">
	<summary>
 gets True if this is a Compound
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.IsField">
	<summary>
 gets True if the Attribute is a Field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.IsObjectEntry">
	<summary>
 gets True if this is an Object Entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.IsOrderedBy">
	<summary>
 gets or sets the OrderedBy Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Orderno">
	<summary>
 Gets or sets the Order ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfigMember.Incordinal">
	<summary>
 Increment ordinal
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfigMember.Infuse(OnTrack.Database.ormRecord@)">
	<summary>
 infuses the XChange member from the record
 </summary>
	<param name="record"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfigMember.LoadBy(System.String,System.Int64)">
	<summary>
 Load XChange Member from persistence store
 </summary>
	<param name="configname"></param>
	<param name="indexno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfigMember.CreateSchema(System.Boolean)">
	<summary>
 Create Persistence Schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfigMember.Persist(System.DateTime)">
	<summary>
 Persist the Xchange Member
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfigMember.Create(System.String,System.Int64)">
	<summary>
 creates a persistable XChange member with primary Key
 </summary>
	<param name="configname"></param>
	<param name="indexno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XConfigMember">
	<summary>
 describes a Xconfig Member - an individual item
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfig.OutlineID">
	<summary>
 Gets or sets the S outlineid.
 </summary>
	<value>The S outlineid.</value>
</member><member name="P:OnTrack.XChange.XConfig.AllowDynamicAttributes">
	<summary>
 Gets or sets the dynamic attributes.
 </summary>
	<value>The S dynamic attributes.</value>
</member><member name="P:OnTrack.XChange.XConfig.Configname">
	<summary>
 gets name of configuration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.GetMaxordinalNo">
	<summary>
  get the maximal ordinal as long if it is numeric
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.GetMaxIndexNo">
	<summary>
 returns the maximal index number
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.GetMaxObjectOrderNo">
	<summary>
 returns the max order number 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.SetordinalForID(System.String,System.Object,System.String)">
	<summary>
 sets the ordinal for an ID
 </summary>
	<param name="ID"></param>
	<param name="ordinal"></param>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.SetObjectXCmd(System.String,OnTrack.otXChangeCommandType)">
	<summary>
 set the object xchange command
 </summary>
	<param name="name"></param>
	<param name="xchangecommand"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AddObjectByName(System.String,System.Int64,OnTrack.otXChangeCommandType)">
	<summary>
 Adds an object to exchange by name and orderno
 </summary>
	<param name="name"></param>
	<param name="orderno"></param>
	<param name="xcmd"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AddAttributeByField(System.String@,System.String,System.Object,System.Boolean,OnTrack.otXChangeCommandType,System.Boolean)">
	<summary>
 Adds an atribute by fieldname
 </summary>
	<param name="entryname"></param>
	<param name="ordinal"></param>
	<param name="OBJECTNAME"></param>
	<param name="ISXCHANGED"></param>
	<param name="XCMD"></param>
	<param name="READONLY"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AddAttributeByID(System.String,System.Object,System.String,System.Boolean,OnTrack.otXChangeCommandType,System.Boolean)">
	<summary>
 Adds an Attribute to the XCHange Config by its XChange-ID
 </summary>
	<param name="id"></param>
	<param name="ordinal"></param>
	<param name="objectname"></param>
	<param name="isXChanged"></param>
	<param name="xcmd"></param>
	<param name="readonly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.Exists(System.String,System.String)">
	<summary>
 returns True if an Objectname with an ID exists
 </summary>
	<param name="objectname"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AddordinalReference(OnTrack.XChange.iConfigMember@)">
	<summary>
 Add ordinal to Reference Structures
 </summary>
	<param name="member"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AddMember(OnTrack.XChange.iConfigMember)">
	<summary>
 Add XChangeMember
 </summary>
	<param name="anEntry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.Initialize">
	<summary>
 Initialize
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.Reset">
	<summary>
 Resets all dynamic structures
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.Delete">
	<summary>
 deletes an objects in persistency store
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.ObjectByName(System.String)">
	<summary>
 retrieves an Object by its name or nothing
 </summary>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.MemberIndexNo">
	<summary>
 retrieves a list of the Index Numbers of the members
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.ObjectsByOrderNo">
	<summary>
 retrieves the ordinal numbers of the objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AttributesByObjectName(System.String)">
	<summary>
 retrieves a List of Attributes per Objectname
 </summary>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.Objects">
	<summary>
 returns all the objectMembers
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AttributeByFieldName(System.String,System.String)">
	<summary>
 returns an attribute by its fieldname and tablename
 </summary>
	<param name="fieldname"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AttributeByID(System.String,System.String)">
	<summary>
 returns an Attribute in the XChange Config by its XChange ID or Alias
 </summary>
	<param name="ID"></param>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AttributesByordinal(OnTrack.Ordinal)">
	<summary>
 returns a List of XConfigMembers per ordinal
 </summary>
	<param name="ordinal"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AttributeByAlias(System.String,System.String)">
	<summary>
 returns an Attribute by its XChange Alias ID
 </summary>
	<param name="alias"></param>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.Attributes(System.String)">
	<summary>
 Returns an ienumerable of all attributes (optional just by an objectname)
 </summary>
	<param name="objectname">optional objectname</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.LoadBy(System.String)">
	<summary>
 Loads a XChange Configuration from Store
 </summary>
	<param name="configname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.Persist(System.DateTime)">
	<summary>
 perstist the XChange Config to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.CreateSchema(System.Boolean)">
	<summary>
 create a persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.Create(System.String)">
	<summary>
 creates a persistable object with primary key
 </summary>
	<param name="configname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.All">
	<summary>
 retrieves a List of all XConfigs
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XBag.DefaultEnvelope">
	<summary>
 Gets the default envelope.
 </summary>
	<value>The default envelope.</value>
</member><member name="P:OnTrack.XChange.XBag.XChangeCommand">
	<summary>
 Gets or sets the top CMD.
 </summary>
	<value>The top CMD.</value>
</member><member name="P:OnTrack.XChange.XBag.PreparedOn">
	<summary>
 Gets or sets the prepared on.
 </summary>
	<value>The prepared on.</value>
</member><member name="P:OnTrack.XChange.XBag.ProcessedOn">
	<summary>
 Gets or sets the processed on.
 </summary>
	<value>The processed on.</value>
</member><member name="P:OnTrack.XChange.XBag.IsPrepared">
	<summary>
 Gets or sets the is prepared.
 </summary>
	<value>The is prepared.</value>
</member><member name="P:OnTrack.XChange.XBag.IsProcessed">
	<summary>
 Gets or sets the is processed.
 </summary>
	<value>The is processed.</value>
</member><member name="P:OnTrack.XChange.XBag.ProcessedOK">
	<summary>
 returns true if the successfully processed
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XBag.XChangeDefaultConfig">
	<summary>
 Gets the xchangeconfig.
 </summary>
	<value>The xchangeconfig.</value>
</member><member name="M:OnTrack.XChange.XBag.Clear">
	<summary>
 clear all entries remove all envelopes
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.AddEnvelope(System.Int64,OnTrack.XChange.XEnvelope,System.Boolean)">
	<summary>
 adds an envelope to the bag by key
 </summary>
	<param name="key"></param>
	<param name="envelope"></param>
	<param name="removeIfExists"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.AddEnvelope(System.String,OnTrack.XChange.XEnvelope,System.Boolean)">
	<summary>
 adds an envelope to the bag by key
 </summary>
	<param name="key"></param>
	<param name="envelope"></param>
	<param name="removeIfExists"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.AddEnvelope(OnTrack.Ordinal,OnTrack.XChange.XEnvelope,System.Boolean)">
	<summary>
 adds an envelope to the bag by ordinal
 </summary>
	<param name="ordinal"></param>
	<param name="envelope"></param>
	<param name="removeIfExists"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.ReplaceEnvelope(System.Int64,OnTrack.XChange.XEnvelope)">
	<summary>
 replaces or adds an envelope against another with same key
 </summary>
	<param name="key"></param>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.ReplaceEnvelope(System.String,OnTrack.XChange.XEnvelope)">
	<summary>
 replaces or adds an envelope against another with same key
 </summary>
	<param name="key"></param>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.ReplaceEnvelope(OnTrack.Ordinal,OnTrack.XChange.XEnvelope)">
	<summary>
 replaces or adds an envelope against another with same ordinal
 </summary>
	<param name="ordinal"></param>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.Item(System.Object)">
	<summary>
 returns an Envelope by key
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.GetEnvelope(System.Int64)">
	<summary>
 returns an Envelope by key
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.GetEnvelope(System.String)">
	<summary>
  returns an Envelope by key
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.GetEnvelope(OnTrack.Ordinal)">
	<summary>
  returns an Envelope by ordinal
 </summary>
	<param name="ordinal"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.GetEnumerator">
	<summary>
 gets an enumarator over the envelopes
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.OnRequestConvert2HostValue(System.Object,OnTrack.XChange.ConvertRequestEventArgs)">
	<summary>
 Event handler for the Slots OnRequestConvert2Hostvalue
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.OnRequestConvert2DBValue(System.Object,OnTrack.XChange.ConvertRequestEventArgs)">
	<summary>
 EventHandler for the Slots OnRequestConvert2DBValue
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.Prepare(System.Boolean)">
	<summary>
 Prepares the XBag for the Operations to run on it
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.RunPreXCheck">
	<summary>
 Runs the XChange PreCheck
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.RunXChange">
	<summary>
 Runs the XChange
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XBag">
	<summary>
 XBag is an arbitary XChange Data Object which constists of different XEnvelopes ordered by
 ordinals.
 An XBag an Default persistable XChangeConfig
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XSlot.#ctor(OnTrack.XChange.XEnvelope,OnTrack.XChange.XConfigAttributeEntry)">
	<summary>
 constructor for slot with envelope reference and attribute
 </summary>
	<param name="xenvelope"></param>
	<param name="attribute"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XSlot.#ctor(OnTrack.XChange.XEnvelope,OnTrack.XChange.XConfigAttributeEntry,System.Object,System.Boolean,System.Boolean)">
	<summary>
 constructor for slot with envelope reference and attribute and hostvalue
 </summary>
	<param name="xenvelope"></param>
	<param name="attribute"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XSlot.IsPrecheckedOk">
	<summary>
 gets the pre checked result - only valid if ISPrechecked is true
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XSlot.IsXChanged">
	<summary>
 returns True if Slot is supposed to be XChanged
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XSlot.IsPrechecked">
	<summary>
 gets the IsPrechecked flag if pre check has Run
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XSlot.ordinal">
	<summary>
 Gets or sets the ordinal.
 </summary>
	<value>The ordinal.</value>
</member><member name="P:OnTrack.XChange.XSlot.IsNull">
	<summary>
 Gets or sets the is null.
 </summary>
	<value>The is null.</value>
</member><member name="P:OnTrack.XChange.XSlot.IsEmpty">
	<summary>
 Gets or sets the is empty.
 </summary>
	<value>The is empty.</value>
</member><member name="P:OnTrack.XChange.XSlot.HostValue">
	<summary>
 Gets or sets the host value.
 </summary>
	<value>The value.</value>
</member><member name="P:OnTrack.XChange.XSlot.DBValue">
	<summary>
 Gets or sets the Database value.
 </summary>
	<value>The value.</value>
</member><member name="P:OnTrack.XChange.XSlot.XAttribute">
	<summary>
 Gets or sets the xattribute.
 </summary>
	<value>The xattribute.</value>
</member><member name="T:OnTrack.XChange.XSlot">
	<summary>
 a XSlot represents a Slot in an XEnvelope
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.#ctor(OnTrack.XChange.XBag)">
	<summary>
 constructor
 </summary>
	<param name="xbag"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.IsPrechecked">
	<summary>
 get the prechecked flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.PrecheckedOK">
	<summary>
 gets the precheck result - only valid if IsPrechecked is true
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.PrecheckTimestamp">
	<summary>
 gets the timestamp for the precheck
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.ProcessedOk">
	<summary>
 returns true if successfully processed (exchanged)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.IsProcessed">
	<summary>
 returns true if the envelope was xchanged / processed
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.ProcessedTimestamp">
	<summary>
 Gets or sets the processed date.
 </summary>
	<value>The processed date.</value>
</member><member name="P:OnTrack.XChange.XEnvelope.MsgLog">
	<summary>
 returns the msglog associated with this xEnvelope
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.Xchangeconfig">
	<summary>
 Gets the xchangeconfig.
 </summary>
	<value>The xchangeconfig.</value>
</member><member name="M:OnTrack.XChange.XEnvelope.HasConfigID(System.String,System.String)">
	<summary>
 returns true if in the XConfig a Slot is available for the XChange ID
 </summary>
	<param name="id"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.RemoveSlot(System.Int64)">
	<summary>
 remove the slot by ordinal
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.RemoveSlot(System.String)">
	<summary>
 remove the slot by ordinal
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.RemoveSlot(OnTrack.Ordinal)">
	<summary>
 remove the slot by ordinal
 </summary>
	<param name="ordinal"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.Clear">
	<summary>
 clear the Envelope from all slots
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.SetSlotValue(System.Int64,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 sets the value of an existing slot given by ordinal
 </summary>
	<param name="key"></param>
	<param name="value"></param>
	<param name="isHostValue"></param>
	<param name="overwrite"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.SetSlotValue(System.String,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 sets the value of an existing slot given by ordinal
 </summary>
	<param name="key"></param>
	<param name="value"></param>
	<param name="isHostValue"></param>
	<param name="overwrite"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.SetSlotValue(OnTrack.Ordinal,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 set the value of an existing slot given by ordinal
 </summary>
	<param name="ordinal"></param>
	<param name="value"></param>
	<param name="isHostValue"></param>
	<param name="overwrite"></param>
	<returns>returns true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlot(OnTrack.Ordinal@)">
	<summary>
 returns a Slot by ordinal
 </summary>
	<param name="ordinal"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.AddSlot(OnTrack.XChange.XSlot@,System.Boolean)">
	<summary>
 Add a Slot by ordinal
 </summary>
	<param name="slot"></param>
	<param name="replaceSlotIfExists"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.AddSlotByID(System.String,System.Object,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,OnTrack.otXChangeCommandType)">
	<summary>
 set a slot by ID Reference. get the ordinal from the id and set the value
 </summary>
	<param name="id"></param>
	<param name="value"></param>
	<param name="isHostValue"></param>
	<param name="tablename"></param>
	<param name="replaceSlotIfExists"></param>
	<param name="extendXConfig"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.AddSlotByFieldname(System.String,System.Object,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,OnTrack.otXChangeCommandType)">
	<summary>
 Add a Slot by fieldname
 </summary>
	<param name="fieldname"></param>
	<param name="value"></param>
	<param name="isHostValue"></param>
	<param name="tablename"></param>
	<param name="overwriteValue"></param>
	<param name="extendXConfig"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlotValueByID(System.String,System.String,System.Boolean)">
	<summary>
 returns the Slot's value by ID
 </summary>
	<param name="id"></param>
	<param name="tablename"></param>
	<param name="asHostValue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.HasSlotByID(System.String,System.String)">
	<summary>
 return true if there is a slot by ID
 </summary>
	<param name="id"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlotValueByFieldname(System.String,System.String,System.Boolean)">
	<summary>
 returns the slot's value by fieldname
 </summary>
	<param name="fieldname"></param>
	<param name="tablename"></param>
	<param name="asHostValue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.HasSlotByFieldname(System.String,System.String)">
	<summary>
 returns true if there is a slot by fieldname
 </summary>
	<param name="fieldname"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlotValueByAttribute(OnTrack.XChange.XConfigAttributeEntry@,System.Boolean)">
	<summary>
 returns the slot's value by attribute
 </summary>
	<param name="xchangemember"></param>
	<param name="asHostValue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.HasSlotByAttribute(OnTrack.XChange.XConfigAttributeEntry@)">
	<summary>
 returns True if there is a slot by XConfig Member by XChangemember
 </summary>
	<param name="xchangemember"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetAttributeByFieldname(System.String,System.String)">
	<summary>
 returns the Attribute of a slot by fieldname and tablename
 </summary>
	<param name="fieldname"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetAttributeByID(System.String,System.String)">
	<summary>
 returns the Attribute of a slot by id and tablename
 </summary>
	<param name="id"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlotValue(System.Int64,System.Boolean)">
	<summary>
 returns the Slotsvalue as hostvalue or dbvalue by ordinal
 </summary>
	<param name="key"></param>
	<param name="asHostvalue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlotValue(System.String,System.Boolean)">
	<summary>
 returns the Slotsvalue as hostvalue or dbvalue by ordinal
 </summary>
	<param name="key"></param>
	<param name="asHostvalue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlotValue(OnTrack.Ordinal,System.Boolean)">
	<summary>
 returns the Slotsvalue as hostvalue or dbvalue by ordinal
 </summary>
	<param name="ordinal"></param>
	<param name="asHostvalue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.OnRequestConvert2HostValue(System.Object,OnTrack.XChange.ConvertRequestEventArgs)">
	<summary>
 Eventhandler for the Slots OnRequestConvert2Hostvalue
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.OnRequestConvert2DBValue(System.Object,OnTrack.XChange.ConvertRequestEventArgs)">
	<summary>
 EventHandler for the Slots OnRequestConvert2DBValue
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetObjectXCmd(System.String)">
	<summary>
 returns the Object XCommand
 </summary>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.RunXChange(OnTrack.clsOTDBMessagelog@,System.Boolean)">
	<summary>
 run XChange for this Envelope
 </summary>
	<param name="msglog"></param>
	<param name="suspendoverload"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.CreateandUpdateObject(OnTrack.XChange.XConfigObjectEntry@,OnTrack.Database.ormRecord@,System.Object[]@,OnTrack.clsOTDBMessagelog@)">
	<summary>
 create and update a object 
 </summary>
	<param name="xobject"></param>
	<param name="record"></param>
	<param name="pkarray"></param>
	<param name="msglog"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.RunDefaultXchange``1(``0@,OnTrack.clsOTDBMessagelog@,System.Boolean)">
	<summary>
 Run the default xchange for a given object
 </summary>
	<typeparam name="T"></typeparam>
	<param name="dataobject"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.RunDefaultXChange(OnTrack.XChange.XConfigObjectEntry@,OnTrack.clsOTDBMessagelog@,System.Boolean)">
	<summary>
 Run the Default XChange for an object by primary keys
 </summary>
	<param name="xobject"></param>
	<param name="msglog"></param>
	<param name="nocompounds"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XEnvelope">
	<summary>
 XChange Envelope is a Member of a Bag and Contains Pairs of ordinal, XSlot
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeConfig.OutlineID">
	<summary>
 Gets or sets the S outlineid.
 </summary>
	<value>The S outlineid.</value>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeConfig.AllowDynamicAttributes">
	<summary>
 Gets or sets the dynamic attributes.
 </summary>
	<value>The S dynamic attributes.</value>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeConfig.Configname">
	<summary>
 gets name of configuration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.GetMaxordinalNo">
	<summary>
  get the maximal ordinal as long if it is numeric
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.GetMaxIndexNo">
	<summary>
 returns the maximal index number
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.GetMaxObjectOrderNo">
	<summary>
 returns the max order number 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.SetordinalForID(System.String,System.Object,System.String)">
	<summary>
 sets the ordinal for an ID
 </summary>
	<param name="ID"></param>
	<param name="ordinal"></param>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.SetObjectXCmd(System.String,OnTrack.otXChangeCommandType)">
	<summary>
 set the object xchange command
 </summary>
	<param name="name"></param>
	<param name="xchangecommand"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.AddObjectByName(System.String,System.Int64,OnTrack.otXChangeCommandType)">
	<summary>
 Adds an object to exchange by name and orderno
 </summary>
	<param name="name"></param>
	<param name="orderno"></param>
	<param name="xcmd"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.AddAttributeByID(System.String,System.Object,System.String,System.Boolean,OnTrack.otXChangeCommandType,System.Boolean)">
	<summary>
 Adds an Attribute to the XCHange Config by its XChange-ID
 </summary>
	<param name="id"></param>
	<param name="ordinal"></param>
	<param name="objectname"></param>
	<param name="isXChanged"></param>
	<param name="xcmd"></param>
	<param name="readonly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.Exists(System.String,System.String)">
	<summary>
 returns True if an Objectname with an ID exists
 </summary>
	<param name="objectname"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.AddordinalReference(OnTrack.XChange.clsOTDBXChangeMember@)">
	<summary>
 Add ordinal to Reference Structures
 </summary>
	<param name="member"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.AddMember(OnTrack.XChange.clsOTDBXChangeMember)">
	<summary>
 Add XChangeMember
 </summary>
	<param name="anEntry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.Initialize">
	<summary>
 Initialize
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.Reset">
	<summary>
 Resets all dynamic structures
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.Delete">
	<summary>
 deletes an objects in persistency store
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.ObjectByName(System.String)">
	<summary>
 retrieves an Object by its name or nothing
 </summary>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.MemberIndexNo">
	<summary>
 retrieves a list of the Index Numbers of the members
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.ObjectsByOrderNo">
	<summary>
 retrieves the ordinal numbers of the objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.AttributesByObjectName(System.String)">
	<summary>
 retrieves a List of Attributes per Objectname
 </summary>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.Objects">
	<summary>
 returns all the objectMembers
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.AttributeByFieldName(System.String,System.String)">
	<summary>
 returns an attribute by its fieldname and tablename
 </summary>
	<param name="fieldname"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.AttributeByID(System.String,System.String)">
	<summary>
 returns an Attribute in the XChange Config by its XChange ID or Alias
 </summary>
	<param name="ID"></param>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.AttributeByAlias(System.String,System.String)">
	<summary>
 returns an Attribute by its XChange Alias ID
 </summary>
	<param name="alias"></param>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.Attributes(System.String)">
	<summary>
 Returns an ienumerable of all attributes (optional just by an objectname)
 </summary>
	<param name="objectname">optional objectname</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.LoadBy(System.String)">
	<summary>
 Loads a XChange Configuration from Store
 </summary>
	<param name="configname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.Persist(System.DateTime)">
	<summary>
 perstist the XChange Config to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.CreateSchema(System.Boolean)">
	<summary>
 create a persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.Create(System.String)">
	<summary>
 creates a persistable object with primary key
 </summary>
	<param name="configname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsCompundEntry">
	<summary>
 Gets the S is compund entry.
 </summary>
	<value>The S is compund entry.</value>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Objectname">
	<summary>
 gets or sets the objectname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Msglogtag">
	<summary>
 gets the MSGLog Tag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.ID">
	<summary>
 gets or sets the XChange ID for the Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Entryname">
	<summary>
 gets the fieldname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Configname">
	<summary>
 gets the configname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Aliases">
	<summary>
 gets the Aliases of the XChange Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.HasAlias(System.String)">
	<summary>
 gets true if the XChangeMember has the Alias
 </summary>
	<param name="alias"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.XChangeCmd">
	<summary>
 gets or sets the Xchange Command
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.ObjectEntryDefinition">
	<summary>
 gets the ObjectEntry Definition for the XChange Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.ObjectDefinition">
	<summary>
 Object Definition
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.ordinal">
	<summary>
 gets or sets the ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Parameter">
	<summary>
 gets or sets parameter
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Relation">
	<summary>
 gets or sets relation
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Comment">
	<summary>
 gets or sets comment
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Indexno">
	<summary>
 Primary Key Indexno
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsXChanged">
	<summary>
 gets or sets the Xhanged Flag - value is not xchangend to and from Host Application
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsReadOnly">
	<summary>
 sets the Readonly Flag - value of the OTDB cannot be overwritten
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsAttributeEntry">
	<summary>
 gets or sets the Attribute Entry Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsCompound">
	<summary>
 gets True if this is a Compound
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsField">
	<summary>
 gets True if the Attribute is a Field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsObjectEntry">
	<summary>
 gets True if this is an Object Entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsOrderedBy">
	<summary>
 gets or sets the OrderedBy Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Orderno">
	<summary>
 Gets or sets the Order ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsDynamicAttribute">
	<summary>
 gets or sets the Dynamic Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeMember.Incordinal">
	<summary>
 Increment ordinal
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeMember.Infuse(OnTrack.Database.ormRecord@)">
	<summary>
 infuses the XChange member from the record
 </summary>
	<param name="record"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeMember.LoadBy(System.String,System.Int64)">
	<summary>
 Load XChange Member from persistence store
 </summary>
	<param name="configname"></param>
	<param name="indexno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeMember.CreateSchema(System.Boolean)">
	<summary>
 Create Persistence Schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeMember.Persist(System.DateTime)">
	<summary>
 Persist the Xchange Member
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeMember.Create(System.String,System.Int64)">
	<summary>
 creates a persistable XChange member with primary Key
 </summary>
	<param name="configname"></param>
	<param name="indexno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.clsOTDBXChangeMember">
	<summary>
 describes a XChange Member - an individual 
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XOutline.Description">
	<summary>
 Gets or sets the desc.
 </summary>
	<value>The desc.</value>
</member><member name="P:OnTrack.XChange.XOutline.DynamicAddRevisions">
	<summary>
 Gets or sets the dynamic add revisions.
 </summary>
	<value>The dynamic add revisions.</value>
</member><member name="P:OnTrack.XChange.XOutline.id">
	<summary>
 gets the ID of the Outline
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XOutline.Count">
	<summary>
 gets the number outline items in the outline
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.GetMaxordinal">
	<summary>
 returns the maximal ordinal of the outline items
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.Initialize">
	<summary>
 Initializes the data obejct
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.Delete">
	<summary>
 deletes the object and components from the datastore
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.ordinals">
	<summary>
 ordinals of the components
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.Items">
	<summary>
 retrieves a collection of Outline Items
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.CreateSchema">
	<summary>
 Create persistable schema for this dataobject
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.LoadBy(System.String)">
	<summary>
 loads the X Outline from the datastore
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.LoadItems(System.String)">
	<summary>
 load all the related outline items
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.Persist(System.DateTime)">
	<summary>
 persist the Outline and the components
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.Create(System.String)">
	<summary>
 create an persistable outline
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XOutline">
	<summary>
 describes a XChange Outline data structure
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XOutlineItem.Text">
	<summary>
 Gets or sets the text.
 </summary>
	<value>The text.</value>
</member><member name="P:OnTrack.XChange.XOutlineItem.IsText">
	<summary>
 Gets or sets the is text.
 </summary>
	<value>The is text.</value>
</member><member name="P:OnTrack.XChange.XOutlineItem.IsGroup">
	<summary>
 Gets or sets the is group.
 </summary>
	<value>The is group.</value>
</member><member name="P:OnTrack.XChange.XOutlineItem.OTLineKey.Type">
	<summary>
 Gets the type.
 </summary>
	<value>The type.</value>
</member><member name="P:OnTrack.XChange.XOutlineItem.OTLineKey.ID">
	<summary>
 Gets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.XChange.XOutlineItem.OTLineKey.Value">
	<summary>
 Gets the value.
 </summary>
	<value>The value.</value>
</member><member name="T:OnTrack.XChange.XOutlineItem.OTLineKey">
	<summary>
 OutlineKey Class as subclass of outline item to make it flexible
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutlineItem.Initialize">
	<summary>
 Initialize the DataObject
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutlineItem.Infuse(OnTrack.Database.ormRecord@)">
	<summary>
 infuses the data object by record
 </summary>
	<param name="record"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutlineItem.AllByID(System.String)">
	<summary>
 retrieves a sorted list of items by uid
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutlineItem.LoadBy(System.String,System.String)">
	<summary>
 retrieves the data object from the data store
 </summary>
	<param name="id"></param>
	<param name="ordinal"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutlineItem.CreateSchema(System.Boolean)">
	<summary>
 create schema for persistency
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutlineItem.Persist(System.DateTime)">
	<summary>
 Persist the data object to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutlineItem.Create(System.String,System.String,System.Int64,System.UInt16)">
	<summary>
 create a new outline item in the persistable data store
 </summary>
	<param name="ID"></param>
	<param name="ordinal"></param>
	<param name="uid"></param>
	<param name="level"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XOutlineItem">
	<summary>
 OutlineItem of an Outline
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsOLEDBDriver.#ctor(System.String,OnTrack.Session@)">
	<summary>
 Constructor
 </summary>
	<param name="ID">an ID for this driver</param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.clsOLEDBDriver.NativeConnection">
	<summary>
 NativeConnection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.clsOLEDBDriver.Type">
	<summary>
 Gets the type.
 </summary>
	<value>The type.</value>
</member><member name="M:OnTrack.Database.clsOLEDBDriver.createNativeTableStore(System.String,System.Boolean)">
	<summary>
 create a new TableStore for this Driver
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsOLEDBDriver.createNativeTableSchema(System.String)">
	<summary>
 create a new TableSchema for this Driver
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsOLEDBDriver.CreateNativeDBCommand(System.String,System.Data.IDbConnection)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsOLEDBDriver.GetTargetTypeFor(OnTrack.Database.otFieldDataType)">
	<summary>
 returns the target type for a OTDB FieldType - MAPPING
 </summary>
	<param name="type"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.clsOLEDBDriver.Convert2DBData(System.Object,System.Int64,System.Int64,System.Boolean@,System.String)">
	<summary>
 converts data to a specific type
 </summary>
	<param name="value"></param>
	<param name="targetType"></param>
	<param name="abostrophNecessary"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsOLEDBDriver.AssignNativeDBParameter(System.String,OnTrack.Database.otFieldDataType,System.Int64,System.Object)">
	<summary>
 create an assigned Native DBParameter to provided name and type
 </summary>
	<param name="parametername">name of parameter</param>
	<param name="datatype">otdb datatype</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsOLEDBDriver.GetCatalog(System.Boolean,System.Object@)">
	<summary>
 Gets the catalog.
 </summary>
	<param name="FORCE">The FORCE.</param>
	<param name="NativeConnection">The native connection.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.clsOLEDBDriver.GetIndex(System.Object@,System.String@,System.Collections.Generic.List{System.String}@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Gets the index.
 </summary>
	<param name="nativeTABLE">The native TABLE.</param>
	<param name="indexname">The indexname.</param>
	<param name="ColumnNames">The column names.</param>
	<param name="PrimaryKey">The primary key.</param>
	<param name="forceCreation">The force creation.</param>
	<param name="createOnMissing">The create on missing.</param>
	<param name="addToSchemaDir">The add to schema dir.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.clsOLEDBDriver.SetDBParameter(System.String,System.Object,System.Object@,System.Boolean,System.Boolean)">
	<summary>
 Sets the DB parameter.
 </summary>
	<param name="Parametername">The parametername.</param>
	<param name="Value">The value.</param>
	<param name="NativeConnection">The native connection.</param>
	<param name="UpdateOnly">The update only.</param>
	<param name="silent">The silent.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.clsOLEDBDriver.RunSqlStatement(System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@,System.Boolean,System.Object)">
	<summary>
 Runs the SQL Command
 </summary>
	<param name="sqlcmdstr"></param>
	<param name="parameters"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsOLEDBDriver.Connection_onConnection(System.Object,OnTrack.Database.ormConnectionEventArgs)">
	<summary>
 EventHandler for onConnect
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsOLEDBDriver.Connection_onDisConnection(System.Object,OnTrack.Database.ormConnectionEventArgs)">
	<summary>
 EventHandler for onDisConnect
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.clsOLEDBDriver">
	<summary>
 clsOLEDBDriver is the database driver for ADO.NET OLEDB drivers
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.clsOLEDBConnection.OLEDBConnection">
	<summary>
 Gets or sets the connection.
 </summary>
	<value>The connection.</value>
</member><member name="M:OnTrack.Database.clsOLEDBConnection.CreateNewNativeConnection">
	<summary>
 create a new SQLConnection
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.clsOLEDBTableSchema">
	<summary>
 CLASS describes the schema per table of the database itself
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.clsOLEDBTableStore.IsLinqAvailable">
	<summary>
 is Linq Available
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsOLEDBTableStore.createNativeDBCommand(System.String,System.Data.IDbConnection@)">
	<summary>
 create the specific native Command
 </summary>
	<param name="commandstr"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsOLEDBTableStore.Convert2ColumnData(System.Object,System.Int64,System.Int64,System.Boolean@,System.String)">
	<summary>
 converts data to a specific type
 </summary>
	<param name="value"></param>
	<param name="targetType"></param>
	<param name="abostrophNecessary"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsOLEDBTableStore.Convert2ObjectData(System.Object,System.Object,System.Boolean@)">
	<summary>
 returns a object from the Data type of the column to Host interpretation
 </summary>
	<param name="index">index as object (name or index 1..n)</param>
	<param name="value">value to convert</param>
	<param name="abostrophNecessary">True if necessary</param>
	<returns>converted value </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsOLEDBTableStore.InitializeCache(System.Boolean)">
	<summary>
 Initialize Cache 
 </summary>
	<returns>true if successful </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsOLEDBTableStore.UpdateDBDataTable(System.Data.IDbDataAdapter@,System.Data.DataTable@)">
	<summary>
 update the cache Datatable
 </summary>
	<param name="datatable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsMSSQLDriver.#ctor(System.String,OnTrack.Session@)">
	<summary>
 Constructor
 </summary>
	<param name="ID">an ID for this driver</param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.clsMSSQLDriver.NativeConnection">
	<summary>
 NativeConnection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsMSSQLDriver.BuildParameterAdapter">
	<summary>
 build Adapter for parameter table
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsMSSQLDriver.Initialize(System.Boolean)">
	<summary>
 initialize driver
 </summary>
	<param name="Force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.clsMSSQLDriver.Type">
	<summary>
 Gets the type.
 </summary>
	<value>The type.</value>
</member><member name="M:OnTrack.Database.clsMSSQLDriver.CreateNativeTableStore(System.String,System.Boolean)">
	<summary>
 create a new TableStore for this Driver
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsMSSQLDriver.CreateNativeTableSchema(System.String)">
	<summary>
 create a new TableSchema for this Driver
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsMSSQLDriver.createNativeDBCommand(System.String,System.Data.IDbConnection)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsMSSQLDriver.Convert2DBData(System.Object,System.Int64,System.Int64,System.Boolean@,System.String)">
	<summary>
 converts data to a specific type
 </summary>
	<param name="value"></param>
	<param name="targetType"></param>
	<param name="abostrophNecessary"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsMSSQLDriver.GetTargetTypeFor(OnTrack.Database.otFieldDataType)">
	<summary>
 returns the target type for a OTDB FieldType - MAPPING
 </summary>
	<param name="type"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.clsMSSQLDriver.AssignNativeDBParameter(System.String,OnTrack.Database.otFieldDataType,System.Int64,System.Object)">
	<summary>
 create an assigned Native DBParameter to provided name and type
 </summary>
	<param name="parametername">name of parameter</param>
	<param name="datatype">otdb datatype</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsMSSQLDriver.GetCatalog(System.Boolean,System.Object@)">
	<summary>
 Gets the catalog.
 </summary>
	<param name="FORCE">The FORCE.</param>
	<param name="NativeConnection">The native connection.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.clsMSSQLDriver.GetIndex(System.Object@,System.String@,System.Collections.Generic.List{System.String}@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Gets the index.
 </summary>
	<param name="nativeTABLE">The native TABLE.</param>
	<param name="indexname">The indexname.</param>
	<param name="ColumnNames">The column names.</param>
	<param name="PrimaryKey">The primary key.</param>
	<param name="forceCreation">The force creation.</param>
	<param name="createOrAlter">The create on missing.</param>
	<param name="addToSchemaDir">The add to schema dir.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.clsMSSQLDriver.RunSqlStatement(System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@,System.Boolean,System.Object)">
	<summary>
 Runs the SQL Command
 </summary>
	<param name="sqlcmdstr"></param>
	<param name="parameters"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsMSSQLDriver.SetDBParameter(System.String,System.Object,System.Object@,System.Boolean,System.Boolean)">
	<summary>
 Sets the DB parameter.
 </summary>
	<param name="Parametername">The parametername.</param>
	<param name="Value">The value.</param>
	<param name="NativeConnection">The native connection.</param>
	<param name="UpdateOnly">The update only.</param>
	<param name="silent">The silent.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.clsMSSQLDriver.GetDBParameter(System.String,System.Object@,System.Boolean)">
	<summary>
 Gets the DB parameter.
 </summary>
	<param name="PARAMETERNAME">The PARAMETERNAME.</param>
	<param name="nativeConnection">The native connection.</param>
	<param name="silent">The silent.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.clsMSSQLDriver.Connection_onConnection(System.Object,OnTrack.Database.ormConnectionEventArgs)">
	<summary>
 EventHandler for onConnect
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsMSSQLDriver.Connection_onDisConnection(System.Object,OnTrack.Database.ormConnectionEventArgs)">
	<summary>
 EventHandler for onDisConnect
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.clsMSSQLConnection.SMOConnection">
	<summary>
 Gets the SMO connection.
 </summary>
	<value>The SMO connection.</value>
</member><member name="P:OnTrack.Database.clsMSSQLConnection.Server">
	<summary>
 Gets the server.
 </summary>
	<value>The server.</value>
</member><member name="P:OnTrack.Database.clsMSSQLConnection.Database">
	<summary>
 Gets the database.
 </summary>
	<value>The database.</value>
</member><member name="M:OnTrack.Database.clsMSSQLConnection.OnInternalConnection(System.Object,OnTrack.Database.InternalConnectionEventArgs)">
	<summary>
 Event Handler onInternalConnection
 </summary>
	<param name="sender"></param>
	<param name="arguments"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.clsMSSQLConnection.SqlConnection">
	<summary>
 Gets or sets the connection.
 </summary>
	<value>The connection.</value>
</member><member name="M:OnTrack.Database.clsMSSQLConnection.CreateNewNativeConnection">
	<summary>
 create a new SQLConnection
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.clsMSSQLTableSchema">
	<summary>
 CLASS describes the schema per table of the database itself
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.clsMSSQLTableStore.IsLinqAvailable">
	<summary>
 is Linq Available
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsMSSQLTableStore.CreateNativeDBCommand(System.String,System.Data.IDbConnection@)">
	<summary>
 create the specific native Command
 </summary>
	<param name="commandstr"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsMSSQLTableStore.Convert2ColumnData(System.Object,System.Int64,System.Int64,System.Boolean@,System.String)">
	<summary>
 converts data to a specific type
 </summary>
	<param name="value"></param>
	<param name="targetType"></param>
	<param name="abostrophNecessary"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsMSSQLTableStore.Convert2ObjectData(System.Object,System.Object,System.Boolean@)">
	<summary>
 returns a object from the Datatype of the column to Host interpretation
 </summary>
	<param name="index">index as object (name or index 1..n)</param>
	<param name="value">value to convert</param>
	<param name="abostrophNecessary">True if necessary</param>
	<returns>convered value </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsMSSQLTableStore.InitializeCache(System.Boolean)">
	<summary>
 Initialize Cache 
 </summary>
	<returns>true if successfull </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsMSSQLTableStore.UpdateDBDataTable(System.Data.IDbDataAdapter@,System.Data.DataTable@)">
	<summary>
 update the cache Datatable
 </summary>
	<param name="datatable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.Initialize">
	<summary>
 initialize the Current Target Object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.Clone(System.Object[])">
	<summary>
 clone the object with the new primary key
 </summary>
	<param name="pkarray">primary key array</param>
	<remarks></remarks>
	<returns>the new cloned object or nothing</returns>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.Clone(System.Int64,System.String)">
	<summary>
 Clone this data object by primary key
 </summary>
	<param name="uid"></param>
	<param name="workspaceID">optional workspaceID id</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.AllByUID(System.Int64)">
	<summary>
 returns a collection of objects filtered by uid
 </summary>
	<param name="uid">deliverable uid</param>
	<returns>a collection</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.AllByWorkspace(System.String)">
	<summary>
 return a collection of current Targets filtered by workspaceID
 </summary>
	<param name="workspaceID">the workspaceID id</param>
	<returns>a Collection</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.CreateSchema(System.Boolean)">
	<summary>
 create the schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.LoadBy(System.Int64,System.String)">
	<summary>
 Loads and infuses a Current Target dependent on the workspaceID
 </summary>
	<param name="uid">deliverable uid</param>
	<param name="workspaceID">the workspaceID to look into - default workspaceID used</param>
	<returns>true if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.LoadUniqueBy(System.Int64,System.String)">
	<summary>
 load a unique current Target by its primary keys
 </summary>
	<param name="uid"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.Create(System.Int64,System.String,System.String)">
	<summary>
 create a current Target by primary key
 </summary>
	<param name="UID"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.CurrentTarget">
	<summary>
 Current target object points to the current clsOTDBDeliverableTarget 
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.UID">
	<summary>
 gets the UID of the Deliverable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.UPDC">
	<summary>
 gets  the update counter of the target
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.Target">
	<summary>
 gets or sets the Target Date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.PrevTarget">
	<summary>
 gets or set the previous target
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.Responsible">
	<summary>
 Gets or sets the resp.
 </summary>
	<value>The resp.</value>
</member><member name="P:OnTrack.Deliverables.Target.ResponsibleOU">
	<summary>
 Gets or sets the resp OU.
 </summary>
	<value>The resp OU.</value>
</member><member name="P:OnTrack.Deliverables.Target.Comment">
	<summary>
 Gets or sets the resp OU.
 </summary>
	<value>The resp OU.</value>
</member><member name="P:OnTrack.Deliverables.Target.ChangedDate">
	<summary>
 gets or sets the timestamp of the  target date (changed on)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.Revision">
	<summary>
 gets or sets the revision string for the target
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.Initialize">
	<summary>
 initialize the object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.AllByUid(System.Int64)">
	<summary>
 returns all Targets by Deliverable UID
 </summary>
	<param name="uid"></param>
	<returns>a Collection</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.Create(System.Int64,System.Int64)">
	<summary>
 create the persistent target by primary key
 </summary>
	<param name="uid"></param>
	<param name="updc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.Persist(System.DateTime)">
	<summary>
 Perist the object to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.Infuse(OnTrack.Database.ormRecord@)">
	<summary>
 Infuse the object with a record
 </summary>
	<param name="record"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.LoadBy(System.Int64,System.Int64)">
	<summary>
 load and infuse the object by primary key
 </summary>
	<param name="uid"></param>
	<param name="updc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.PublishNewTarget(System.DateTime,System.String,System.Int64,System.String,OnTrack.Deliverables.Target@)">
	<summary>
 publish a new Target to the database from a Date
 </summary>
	<param name="NewTargetDate"></param>
	<param name="workspaceID"></param>
	<param name="UID"></param>
	<param name="revision"></param>
	<param name="NewDeliverableTarget"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.IncreaseRevison(System.Boolean,System.Boolean)">
	<summary>
 Increase the Revision in Form VXX.YY
 </summary>
	<param name="majorFlag">is a major version - increase xx </param>
	<param name="minorFlag">is a minor version - increase yy</param>
	<returns>new revision</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.RunXPreCheck(OnTrack.XChange.XEnvelope@)">
	<summary>
 Run the XPrecheck on the Target with the envelope
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.RunXChange(OnTrack.XChange.XEnvelope@)">
	<summary>
 run the XChange on the Deliverable Target for an Envelope
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.Clone(System.Object[])">
	<summary>
 clone the object with the new primary key
 </summary>
	<param name="pkarray">primary key array</param>
	<remarks></remarks>
	<returns>the new cloned object or nothing</returns>
</member><member name="M:OnTrack.Deliverables.Target.Clone(System.Int64,System.Int64)">
	<summary>
 clone the loaded or created dataobject object
 </summary>
	<param name="UID"></param>
	<param name="updc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.Target">
	<summary>
 target object for the deliverable class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.UpdateAllTracks(System.String,System.ComponentModel.BackgroundWorker)">
	<summary>
 Batch processing for updating all Tracks
 </summary>
	<param name="workspaceID"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.CreateSchema">
	<summary>
 Create persistency schema for deliverable tracks
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.Create(System.Int64,System.Int64,System.Int64,System.Int64)">
	<summary>
 create the data object by primary key
 </summary>
	<param name="deliverableUID"></param>
	<param name="scheduleUID"></param>
	<param name="scheduleUPDC"></param>
	<param name="targetUPDC"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.Clone(System.Object[])">
	<summary>
 clone the track
 </summary>
	<param name="pkarray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.loadBy(System.Int64,System.Int64,System.Int64,System.Int64)">
	<summary>
 load and infuse data object by primary key
 </summary>
	<param name="deliverableUID"></param>
	<param name="scheduleUID"></param>
	<param name="scheduleUPDC"></param>
	<param name="targetUPDC"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.UpdateFromTarget(OnTrack.Deliverables.Target@,System.String,System.Boolean,System.Boolean)">
	<summary>
  updateFromTarget -&gt; update a Track from a given Target
 </summary>
	<param name="TARGET"></param>
	<param name="workspaceID"></param>
	<param name="PERSIST"></param>
	<param name="checkGAP"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.UpdateFromSchedule(OnTrack.Scheduling.Schedule@,System.Int64,System.String,System.Boolean,System.Boolean)">
	<summary>
 updateFromSchedule -&gt; update a Track from a given Schedule
 </summary>
	<param name="SCHEDULE"></param>
	<param name="targetUPDC"></param>
	<param name="workspaceID"></param>
	<param name="PERSIST"></param>
	<param name="checkGAP"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.UpdateFromDeliverable(OnTrack.Deliverables.Deliverable@,System.String,System.Boolean,System.Boolean)">
	<summary>
 updateFromDeliverable -&gt; updated a Track from a given deliverable
 </summary>
	<param name="DELIVERABLE"></param>
	<param name="workspaceID"></param>
	<param name="checkGAP"></param>
	<param name="PERSIST"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.SetTarget">
	<summary>
 setTarget -&gt; set the Internal Target
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.SetSchedule">
	<summary>
 setSchedule -&gt; set the Internal Schedule
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.CheckOnGap">
	<summary>
 checkOnGAP -&gt; Calculate the GAP
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.CheckOnBaselineGap">
	<summary>
 checkOnBaselineGAP -&gt; Calculate the baseline GAP
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.Track">
	<summary>
 deliverable track class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.DeliverableType.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.DeliverableType.Comment">
	<summary>
 Gets or sets the comment.
 </summary>
	<value>The comment.</value>
</member><member name="P:OnTrack.Deliverables.DeliverableType.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Deliverables.DeliverableType.Typeid">
	<summary>
 Gets or sets the typeid.
 </summary>
	<value>The typeid.</value>
</member><member name="M:OnTrack.Deliverables.DeliverableType.Initialize">
	<summary>
 initialize the dataobject
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.DeliverableType.Clone(System.Object[])">
	<summary>
 Clone the object with its primary key array.
 </summary>
	<param name="pkArray"></param>
	<returns>the new object or nothing</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.DeliverableType.Clone(System.String,System.String)">
	<summary>
 Clone the deliverable type
 </summary>
	<param name="typeid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.DeliverableType.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.DeliverableType.All(System.String)">
	<summary>
 returns a List(of Delivertype) for the DomainID
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.DeliverableType">
	<summary>
 Definition class for Deliverables
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Initialize">
	<summary>
 initialize the dataobject
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Revision">
	<summary>
 gets or set the revision id 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Format">
	<summary>
 gets or sets the format of the deliverable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.DeliverableID">
	<summary>
 gets or sets the ID of the deliverable (non-unique)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.WorkspaceID">
	<summary>
 gets or sets the ID of the deliverable (non-unique)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Description">
	<summary>
 gets or sets the description of the deliverable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Category">
	<summary>
 sets or gets the category of the deliverable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.IsRevision">
	<summary>
 true if this is a revision 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.IsFirstRevision">
	<summary>
 True if this deliverable is first revision
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.ResponsibleID">
	<summary>
  gets or sets the responsible Person ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.ResponsibleOUID">
	<summary>
 gets or sets the Responsible Organization Unit ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Matchcode">
	<summary>
 gets or sets the matchcode 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.PartID">
	<summary>
 gets or sets the Part Id related to the deliverable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.ChangeReferenceID">
	<summary>
 gets or sets the Change Reference ID 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.TypeID">
	<summary>
 gets or sets the type ID 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.WBSID">
	<summary>
 gets or sets the wbs ID 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.WBSCode">
	<summary>
 gets or sets the wbs code
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.function">
	<summary>
 gets or sets the function
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.BlockingItemID">
	<summary>
 gets or sets the blocking item reference ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Comment">
	<summary>
 gets or sets the comment
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Activetag">
	<summary>
 gets the activity tag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Configtag">
	<summary>
 gets  the config tag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Purge">
	<summary>
 Purge revisions of a deliverable
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.LoadBy(System.Int64)">
	<summary>
 loads and infuse the deliverable by primary key from the data store
 </summary>
	<param name="UID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.All(System.Boolean,System.String)">
	<summary>
 returns a collection of all deliverables (not deleted)
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.AllUIDs">
	<summary>
 returns a collection of all uids of deliverables
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.AllByPnid(System.String,System.String)">
	<summary>
 return a collection of deliverables filtered by partid
 </summary>
	<param name="partid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.AllRevisionUIDsBy(System.Int64)">
	<summary>
 returns all revisions of a firstrevision including it
 </summary>
	<param name="firstrevisionUID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetPart">
	<summary>
 Load the related part object
 </summary>
	<returns>clsOTDBPart or nothing if load failed</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetCurrTarget(System.String)">
	<summary>
 return the related current target object
 </summary>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetCurrSchedule(System.String)">
	<summary>
 retrieve the current schedule object
 </summary>
	<param name="workspaceID">optional workspaceID id</param>
	<returns>the data object or nothing</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetSchedule(System.String)">
	<summary>
 retrieves the active and curent schedule object for the deliverable 
 </summary>
	<param name="workspaceID">workspaceID id</param>
	<returns>a scheduling object or nothing</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetTarget(System.String)">
	<summary>
 retrieves the target object (most current)
 </summary>
	<param name="workspaceID">optional workspaceID id</param>
	<returns>the data object or nothing</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Create(System.Int64,System.String,System.String,System.String)">
	<summary>
 create unique persistable object by primary key
 </summary>
	<param name="uid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.CreateFirstRevision(System.Int64,System.String,System.Boolean)">
	<summary>
 createFirstRevision : add a FirstRevision
 </summary>
	<param name="uid"></param>
	<param name="newRevision"></param>
	<param name="persist"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.AddRevision(System.Int64,System.String,System.Boolean)">
	<summary>
 clones the deliverable and inserts a new revision
 </summary>
	<param name="UID"></param>
	<param name="newRevision"></param>
	<param name="persist"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Clone(System.Object[])">
	<summary>
 Clone the object with its primary key array. if {uid} = {0} generate a new uid
 </summary>
	<param name="pkArray"></param>
	<returns>the new object or nothing</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Clone(System.Int64)">
	<summary>
 Clone the deliverable
 </summary>
	<param name="UID">new uid If 0 then generate a new uid</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.Deliverable">
	<summary>
 Deliverable Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.LoadbyDependant(System.String)">
	<summary>
 Load by Dependant to by partid
 </summary>
	<param name="partid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.LoadbyDependingFrom(System.String)">
	<summary>
 Loads Dependency outgoing from a partid
 </summary>
	<param name="partid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.Persist(System.DateTime)">
	<summary>
 Persists the dependency object
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.Create(System.String)">
	<summary>
 Create a Dependency persistable
 </summary>
	<param name="pnid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.Status(System.String)">
	<summary>
 retrieves the Status of the dependency structure
 </summary>
	<param name="typeid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.LoadBy(System.String,System.String,System.Int64)">
	<summary>
 Loads a Depend Member by Primary Key
 </summary>
	<param name="TYPEID"></param>
	<param name="PARTID"></param>
	<param name="POSNO"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.allHeadsByTypeID(System.String)">
	<summary>
 retrieves a collection of head members by dependency typeid
 </summary>
	<param name="typeid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.CreateSchema(System.Boolean)">
	<summary>
  create static persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.Persist(System.DateTime)">
	<summary>
 persist to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.Create(System.String,System.String,System.Int64,System.String)">
	<summary>
 Create a persistence object
 </summary>
	<param name="TYPEID"></param>
	<param name="PARTID"></param>
	<param name="POSNO"></param>
	<param name="dependfromPartID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.GetDependCheck(System.String)">
	<summary>
 get the latest DependCheck of Type
 </summary>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.Initialize">
	<summary>
 Initialize
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.LoadBy(System.String,System.String,System.Int64,System.Int64,System.Int64)">
	<summary>
 load a DependCheck by primary key
 </summary>
	<param name="typeid"></param>
	<param name="partid"></param>
	<param name="posno"></param>
	<param name="uid"></param>
	<param name="updc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.AllHeadByClusterID(System.String,System.String,System.String)">
	<summary>
 retrieve just the DependCheckHeads by ClusterID
 </summary>
	<param name="typeid"></param>
	<param name="clusterid"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.CreateSchema(System.Boolean)">
	<summary>
 create persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.Persist(System.DateTime)">
	<summary>
 Persist the object to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.UIWinFormMessageBox.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.UIWinFormMessageBox.Type">
	<summary>
 Gets or sets the type.
 </summary>
	<value>The type.</value>
</member><member name="P:OnTrack.UI.UIWinFormMessageBox.Title">
	<summary>
 Gets or sets the title.
 </summary>
	<value>The title.</value>
</member><member name="M:OnTrack.UI.UIWinFormMessageBox.CloseOTDBForm">
	<summary>
 Close the Form
 </summary>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.UI.UIWinFormMessageBox.RefreshOTDBForm">
	<summary>
 Refresh the Form
 </summary>
	<remarks></remarks>
	<returns></returns>
</member><member name="P:OnTrack.UI.UIWinFormMessageBox.Message">
	<summary>
 Gets or sets the message.
 </summary>
	<value>The message.</value>
</member><member name="P:OnTrack.UI.UIWinFormMessageBox.Buttons">
	<summary>
 Gets or sets the buttons.
 </summary>
	<value>The buttons.</value>
</member><member name="P:OnTrack.UI.UIWinFormMessageBox.Result">
	<summary>
 Gets or sets the answer.
 </summary>
	<value>The answer.</value>
</member><member name="M:OnTrack.Scheduling.Dependency.InitializedCluster(System.Boolean)">
	<summary>
 Initialize a cluster
 </summary>
	<param name="FORCE"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.CreateClusterID(System.String,System.Boolean)">
	<summary>
 create a clusterID
 </summary>
	<param name="aDependTypeId"></param>
	<param name="isDynamic"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.MarkClusterID(System.String,System.String,System.String)">
	<summary>
 mark a clusterID in the tree
 </summary>
	<param name="aDependTypeId"></param>
	<param name="aClusterID"></param>
	<param name="aSameClusterID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.SaveClusterIDs(System.String,System.Boolean)">
	<summary>
 save the clusterID
 </summary>
	<param name="aDependTypeId"></param>
	<param name="isDynamic"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.UpdateSameClusterID(System.String,System.Boolean)">
	<summary>
 updates same clusterIDs
 </summary>
	<param name="aDependTypeId"></param>
	<param name="isDynamic"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.BuildDependencyNet(System.ComponentModel.BackgroundWorker)">
	<summary>
 Build Dependencies for all Parts
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.BuildDynamicDependencyCluster(System.String,System.ComponentModel.BackgroundWorker)">
	<summary>
 builds dynamic dependency clusters out of the dependencies net
 </summary>
	<param name="workspaceID"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.CheckAllDependencies(System.String,System.ComponentModel.BackgroundWorker)">
	<summary>
 check the dependiencies for all parts in a workspaceID if they are hold
 and create dependency check objects
 </summary>
	<param name="workspaceID"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.CheckDependenciesFor(System.String,OnTrack.Scheduling.clsOTDBDependency@,System.String)">
	<summary>
 check dependencies for a part
 </summary>
	<param name="partID"></param>
	<param name="dependency"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Session.CurrentDomainID">
	<summary>
 Gets or sets the domain.
 </summary>
	<value>The domain.</value>
</member><member name="P:OnTrack.Session.DefaultDeliverableTypeID">
	<summary>
 Gets or sets the default deliverable type ID.
 </summary>
	<value>The default deliverable type ID.</value>
</member><member name="P:OnTrack.Session.AccessLevel">
	<summary>
 Gets or sets the access level.
 </summary>
	<value>The access level.</value>
</member><member name="P:OnTrack.Session.Objects">
	<summary>
 Gets or sets the Objects.
 </summary>
	<value>The Objects.</value>
</member><member name="P:OnTrack.Session.Username">
	<summary>
 Gets the user name.
 </summary>
	<value>The user name.</value>
</member><member name="P:OnTrack.Session.IsRunning">
	<summary>
  returns if session is running
 </summary>
	<value>The is running.</value>
</member><member name="P:OnTrack.Session.ConfigSetName">
	<summary>
 returns the ConfigSetName to be used to connect to the databased
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Session.TodayLatency">
	<summary>
 Gets or sets the today latency.
 </summary>
	<value>The today latency.</value>
</member><member name="P:OnTrack.Session.DefaultScheduleTypeID">
	<summary>
 set or gets the DefaultScheduleTypeID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Session.DefaultCalendarName">
	<summary>
 Gets or sets the default name of the calendar.
 </summary>
	<value>The default name of the calendar.</value>
</member><member name="P:OnTrack.Session.DefaultWorkspaceID">
	<summary>
 Gets or sets the default workspaceID.
 </summary>
	<value>The default workspaceID.</value>
</member><member name="P:OnTrack.Session.CurrentWorkspaceID">
	<summary>
 Gets or sets the default workspaceID.
 </summary>
	<value>The default workspaceID.</value>
</member><member name="P:OnTrack.Session.Errorlog">
	<summary>
 the errorlog of the session
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Session.DependencySynchroMinOverlap">
	<summary>
 Gets or sets the dependency synchro min overlap.
 </summary>
	<value>The dependency synchro min overlap.</value>
</member><member name="P:OnTrack.Session.UILogin">
	<summary>
 Gets or sets the UI login.
 </summary>
	<value>The UI login.</value>
</member><member name="P:OnTrack.Session.IsInitialized">
	<summary>
 Gets or sets the is initialized.
 </summary>
	<value>The is initialized.</value>
</member><member name="P:OnTrack.Session.CurrentDBDriver">
	<summary>
 Gets the primary DB driver.
 </summary>
	<value>The primary DB driver.</value>
</member><member name="P:OnTrack.Session.SessionID">
	<summary>
 Gets the session ID.
 </summary>
	<value>The session ID.</value>
</member><member name="M:OnTrack.Session.Initialize(OnTrack.Database.iormDBDriver,System.String)">
	<summary>
 Initialize the Session 
 </summary>
	<param name="DBDriver">DBDriver to be provided</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.RequireAccessRight(OnTrack.otAccessRight,System.String,System.Boolean)">
	<summary>
 requires from OTDB the Access Rights
 </summary>
	<param name="AccessRequest">otAccessRight</param>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.RaiseObjectChangedDefinitionEvent(System.Object,OnTrack.ObjectDefintionEventArgs)">
	<summary>
 Raises the Event ObjectChagedDefinition
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.ShutDown(System.Boolean)">
	<summary>
 Initiate closeDown this Session and the Connection to OnTrack Database
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.SetDomain(System.String)">
	<summary>
 sets the current Domain
 </summary>
	<param name="newDomainID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.StartUpSessionEnviorment(System.Boolean,System.String)">
	<summary>
 Initialize and set all Parameters
 </summary>
	<param name="FORCE"></param>
	<returns>true if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.ShutDownSessionEnviorment(System.Boolean)">
	<summary>
 reset the Session or close it down
 </summary>
	<param name="FORCE">true if to do it even not initialized</param>
	<returns>True if successfully reseted</returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefintionEventArgs.objectname">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="T:OnTrack.ObjectDefintionEventArgs">
	<summary>
 Object Defintion Event Arguments
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.SessionEventArgs.NewDomain">
	<summary>
 Gets or sets the new domain ID.
 </summary>
	<value>The new domain ID.</value>
</member><member name="P:OnTrack.SessionEventArgs.Session">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="T:OnTrack.SessionEventArgs">
	<summary>
 Session Event Arguments
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.DomainEventArgs.Domain">
	<summary>
 Gets or sets the new domain ID.
 </summary>
	<value>The new domain ID.</value>
</member><member name="P:OnTrack.DomainEventArgs.Session">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="T:OnTrack.DomainEventArgs">
	<summary>
 Domain Event Arguments
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionAgent.Worker(System.Object)">
	<summary>
 Worker Sub 
 </summary>
	<param name="stateInfo"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionAgent.Start">
	<summary>
 Start the Agent
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionAgent.Stop">
	<summary>
 Stop the the Agent
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.SessionAgent">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:OnTrack.CoreError.StackTrace">
	<summary>
 Gets or sets the stack trace.
 </summary>
	<value>The stack trace.</value>
</member><member name="P:OnTrack.CoreError.ID">
	<summary>
 Gets or sets the username.
 </summary>
	<value>The username.</value>
</member><member name="P:OnTrack.CoreError.Username">
	<summary>
 Gets or sets the username.
 </summary>
	<value>The username.</value>
</member><member name="P:OnTrack.CoreError.Tag">
	<summary>
 Gets or sets the tag.
 </summary>
	<value>The tag.</value>
</member><member name="P:OnTrack.CoreError.Processed">
	<summary>
 Gets or sets the processed.
 </summary>
	<value>The processed.</value>
</member><member name="P:OnTrack.CoreError.Entryno">
	<summary>
 Gets or sets the entryno.
 </summary>
	<value>The entryno.</value>
</member><member name="P:OnTrack.CoreError.EntryName">
	<summary>
 Gets or sets the name of the entry.
 </summary>
	<value>The name of the entry.</value>
</member><member name="P:OnTrack.CoreError.messagetype">
	<summary>
 Gets or sets the type of the error.
 </summary>
	<value>The type of the error.</value>
</member><member name="P:OnTrack.CoreError.Tablename">
	<summary>
 Gets or sets the tablename.
 </summary>
	<value>The tablename.</value>
</member><member name="P:OnTrack.CoreError.Timestamp">
	<summary>
 Gets or sets the timestamp.
 </summary>
	<value>The timestamp.</value>
</member><member name="P:OnTrack.CoreError.Subname">
	<summary>
 Gets or sets the subname.
 </summary>
	<value>The subname.</value>
</member><member name="P:OnTrack.CoreError.Arguments">
	<summary>
 Gets or sets the arguments.
 </summary>
	<value>The arguments.</value>
</member><member name="P:OnTrack.CoreError.Exception">
	<summary>
 Gets or sets the exception.
 </summary>
	<value>The exception.</value>
</member><member name="P:OnTrack.CoreError.Message">
	<summary>
 Gets or sets the message.
 </summary>
	<value>The message.</value>
</member><member name="M:OnTrack.CoreError.CreateSchema(System.Boolean)">
	<summary>
 create the schema for this object
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.CoreError.Create(System.String,System.Int64)">
	<summary>
 create a persistable Error
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.CoreError.Initialize">
	<summary>
 Initialize
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.CoreError.Persist(System.DateTime)">
	<summary>
 Persist the data object to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.CoreError">
	<summary>
 describes a persistable Core Error Message
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.otErrorEventArgs.Error">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="P:OnTrack.ErrorLog.Tag">
	<summary>
 Gets the tag.
 </summary>
	<value>The tag.</value>
</member><member name="M:OnTrack.ErrorLog.GetEnumerator">
	<summary>
 Returns an enumerator that iterates through a collection.
 </summary>
	<returns>
 An <see cref="T:System.Collections.IEnumerator"/> object that can be
 used to iterate through the collection.
 </returns>
</member><member name="M:OnTrack.ErrorLog.Clear">
	<summary>
 Clears the error log from all messages
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ErrorLog.Persist(System.DateTime)">
	<summary>
 Persist the Messages
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ErrorLog.Enqueue(OnTrack.CoreError)">
	<summary>
 Add an otdb error object to the log
 </summary>
	<param name="otdberror"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ErrorLog.Size">
	<summary>
 returns the size of the log
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ErrorLog.PeekFirst">
	<summary>
 try to get the first Error from log
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ErrorLog.PeekLast">
	<summary>
 try to get the most recent error from log without removing
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ErrorLog.Retain">
	<summary>
 remove and returns the first error in the error log 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ErrorLog">
	<summary>
 Describes an ErrorLog of Core Errors
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Ordinal.Equals(OnTrack.Ordinal,OnTrack.Ordinal)">
	<summary>
 Equalses the specified x.
 </summary>
	<param name="x">The x.</param>
	<param name="y">The y.</param>
	<returns></returns>
</member><member name="M:OnTrack.Ordinal.Compare(OnTrack.Ordinal,OnTrack.Ordinal)">
	<summary>
 Compares two objects and returns a value indicating whether one is less
 than, equal to, or greater than the other.
 </summary>
	<param name="x">The first object to compare.</param>
	<param name="y">The second object to compare.</param>
	<exception cref="T:System.ArgumentException">Neither <paramref name="x"/> nor
 <paramref name="y"/> implements the <see cref="T:System.IComparable"/> interface.-or-
 <paramref name="x"/> and <paramref name="y"/> are of different types and neither
 one can handle comparisons with the other. </exception>
	<returns>
 A signed integer that indicates the relative values of <paramref name="x"/>
 and <paramref name="y"/>, as shown in the following table.Value Meaning Less
 than zero <paramref name="x"/> is less than <paramref name="y"/>. Zero <paramref name="x"/>
 equals <paramref name="y"/>. Greater than zero <paramref name="x"/> is greater
 than <paramref name="y"/>.
 </returns>
</member><member name="M:OnTrack.Ordinal.CompareTo(OnTrack.Ordinal)">
	<summary>
 Compares to.
 </summary>
	<param name="other">The other.</param>
	<returns></returns>
</member><member name="M:OnTrack.Ordinal.GetHashCode(OnTrack.Ordinal)">
	<summary>
 Gets the hash code.
 </summary>
	<param name="obj">The obj.</param>
	<returns></returns>
</member><member name="P:OnTrack.Ordinal.Value">
	<summary>
 Value of the ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Ordinal.Type">
	<summary>
 Datatype of the ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Ordinal.GetTypeCode">
	<summary>
 gets the Typecode of the ordinal
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Ordinal.Equals(OnTrack.Ordinal)">
	<summary>
 compares this to an ordinal
 </summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Ordinal">
	<summary>
 ordinal class describes values as ordinal values (ordering)
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectStore.IsInitialized">
	<summary>
 Gets or sets the is initialiazed.
 </summary>
	<value>The is initialiazed.</value>
</member><member name="M:OnTrack.ObjectStore.AddID(OnTrack.ObjectEntryDefinition@)">
	<summary>
 Add an Entry by ID
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectStore.AddAlias(OnTrack.ObjectEntryDefinition@)">
	<summary>
 Add an Entry by ID
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectStore.Reset">
	<summary>
 reset all the data of the meta store
 </summary>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectStore.Initialize">
	<summary>
 Initialize
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectStore.LoadObjectDefinition(OnTrack.ObjectDefinition@)">
	<summary>
 Load Object into Store of Objects
 </summary>
	<param name="object"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectStore.HasObject(System.String)">
	<summary>
 retrieves an Entry by name
 </summary>
	<param name="objectname">name of the object</param>
	<returns>an Entry object or nothing </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectStore.GetObject(System.String)">
	<summary>
 retrieves an Entry by name
 </summary>
	<param name="objectname">name of the object</param>
	<returns>an Entry object or nothing </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectStore.HasEntry(System.String,System.String)">
	<summary>
 retrieves an Entry by name
 </summary>
	<param name="objectname">name of the object</param>
	<returns>an Entry object or nothing </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectStore.GetEntries(System.String)">
	<summary>
 retrieves an Entry by name
 </summary>
	<param name="objectname">name of the object</param>
	<returns>an Entry object or nothing </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectStore.GetEntryByAlias(System.String,System.String)">
	<summary>
 retrieves an Entry by Alias ID
 </summary>
	<param name="Alias"></param>
	<returns>an Entry object or nothing </returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectStore">
	<summary>
 store for all the meto OTDB object information - loaded on connecting with the 
 session
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.Name">
	<summary>
 gets the tablename of the defintion
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.Count">
	<summary>
 retrieves number of entries
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.UseCache">
	<summary>
 use Cache on this object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.CacheSelect">
	<summary>
 gets or sets the cache selection string
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.DomainBehavior">
	<summary>
 Gets or sets the domain behavior.
 </summary>
	<value>The domain behavior.</value>
</member><member name="P:OnTrack.ObjectDefinition.Version">
	<summary>
 gets or set the version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.SpareFieldsBehavior">
	<summary>
 gets or set the the spare fields behavior. Means extra fields are available.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.DeletePerFlagBehavior">
	<summary>
 sets or gets the delete per flag behavior. If true a deleteflag and a delete date are available.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.RuntimeOnly">
	<summary>
 returns true if this object is not persisted
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.Entrynames">
	<summary>
 returns a list of entrynames
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.Entries">
	<summary>
 gets a collection of object Entry definitions
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.AddFieldDesc(OnTrack.Database.ormFieldDescription@,System.Boolean)">
	<summary>
 add a Component by cls OTDB
 </summary>
	<param name="fielddesc"></param>
	<param name="reset"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.AddCompoundDesc(OnTrack.Database.ormCompoundDesc)">
	<summary>
 add a Compound description to field
 </summary>
	<param name="COMPOUNDDESC"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.AlterSchema(System.Boolean)">
	<summary>
 alterSchema changes the Database according the information here
 </summary>
	<param name="addToSchema"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetNoPrimaryKeys">
	<summary>
 retrieve the List of Primary Key Fieldnames
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetPrimaryKeyFieldNames">
	<summary>
 retrieve the List of Primary Key Fieldnames
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetPrimaryKeyEntries">
	<summary>
 retrieve the List of Primary Key Fieldnames
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetIndexFieldNames(System.String)">
	<summary>
 retrieves a list of Fieldnames of an Index
 </summary>
	<param name="IndexName">name of the Index</param>
	<returns>List (of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetNoIndexFields(System.String)">
	<summary>
 retrieves a list of Fieldnames of an Index
 </summary>
	<param name="IndexName">name of the Index</param>
	<returns>List (of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetIndexEntries(System.String)">
	<summary>
 retrieves a list of Fieldnames of an Index
 </summary>
	<param name="IndexName">name of the Index</param>
	<returns>List (of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.AddEntry(OnTrack.ObjectEntryDefinition)">
	<summary>
 Add a Component by Table Entry
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.Delete">
	<summary>
 Delete the record and all members
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.HasEntry(System.String)">
	<summary>
 gets an entry by entryname or nothing
 </summary>
	<param name="entryname">name of the entry</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetEntry(System.String)">
	<summary>
 gets an entry by entryname or nothing
 </summary>
	<param name="entryname">name of the entry</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.Initialize">
	<summary>
 Initialize
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.Infuse(OnTrack.Database.ormRecord@)">
	<summary>
 Infuse
 </summary>
	<param name="aRecord"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.Persist(System.DateTime)">
	<summary>
 Persist the Object to the data store
 </summary>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.Create(System.String,System.Boolean,System.Boolean,System.UInt16)">
	<summary>
 create a new data object of that type
 </summary>
	<param name="tablename">tablename of the table</param>
	<param name="runTimeOnly">if no save is possible -&gt; bootstrapping</param>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetMaxPosNo">
	<summary>
 retrieves the max posno / entry index
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectDefinition">
	<summary>
 Meta data for an OTDB data object 
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectEntryDefinition.#ctor">
	<summary>
 constructor of a SchemaDefTableEntry
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.Position">
	<summary>
 Gets or sets the position.
 </summary>
	<value>The position.</value>
</member><member name="P:OnTrack.ObjectEntryDefinition.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.ObjectEntryDefinition.DefaultValue">
	<summary>
 gets the default value as object representation
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.DefaultValueString">
	<summary>
 Gets or sets the default value in string presentation
 </summary>
	<value>The default value.</value>
</member><member name="P:OnTrack.ObjectEntryDefinition.Objectname">
	<summary>
 sets or gets the tablename of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.UseCache">
	<summary>
 use Cache on this object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.CacheSelect">
	<summary>
 sets or gets the cache selection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.RunTimeOnly">
	<summary>
 Object cannot be persisted only.
 </summary>
	<value>The run tim only.</value>
</member><member name="P:OnTrack.ObjectEntryDefinition.ID">
	<summary>
 sets or gets the XchangeManager ID for the field 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.Name">
	<summary>
 sets or gets the name of the columns
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.Typeid">
	<summary>
 sets or gets the type OTDBSchemaDefTableEntryType of the field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.IsNullable">
	<summary>
 Gets or sets the is nullable.
 </summary>
	<value>The is nullable.</value>
</member><member name="P:OnTrack.ObjectEntryDefinition.IsArray">
	<summary>
 Gets or sets the is array flag. Field will be transformed to and from an array
 </summary>
	<value>The is array.</value>
</member><member name="P:OnTrack.ObjectEntryDefinition.SpareFieldTag">
	<summary>
 sets or gets true if this field is a spare field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.IsField">
	<summary>
 IsField ?
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.IsCompound">
	<summary>
 returns true if entry is a compound
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.IsTable">
	<summary>
 returns true if entry is a Table
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.Datatype">
	<summary>
 returns the field data type
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.Version">
	<summary>
 returns version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.Size">
	<summary>
 returns the size
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.Aliases">
	<summary>
 returns a array of aliases
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.Relation">
	<summary>
 returns the relation ob the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.Parameter">
	<summary>
 returns the parameter for the object entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.Title">
	<summary>
 returns Title (Column Header)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.IndexPosition">
	<summary>
 returns the Position in the index
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.Indexname">
	<summary>
 return the IndexName if entry belongs to an index
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.IsPrimaryKey">
	<summary>
 returns true if Entry has a Primary Key
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.IsKey">
	<summary>
 returns True if the Entry belongs to a Key
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.CompoundTablename">
	<summary>
 returns the CompoundTablename
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.CompoundIDFieldname">
	<summary>
 returns the fieldname of the compound ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.CompoundValueFieldname">
	<summary>
 returns the fieldname of the compounds value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.CompoundRelation">
	<summary>
 returns the array of relations of a compound
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectEntryDefinition.DeleteFlagBehavior">
	<summary>
 Gets or sets the behavior of the table to delete per flag (if true) not per purge the record.
 </summary>
	<value></value>
</member><member name="P:OnTrack.ObjectEntryDefinition.SpareFieldsBehavior">
	<summary>
 Gets or sets the behavior of the table to run with additional (spare) fields.
 </summary>
	<value></value>
</member><member name="P:OnTrack.ObjectEntryDefinition.DomainBehavior">
	<summary>
 Gets or sets the behavior of the table entries to belong to a domain
 </summary>
	<value></value>
</member><member name="M:OnTrack.ObjectEntryDefinition.Initialize">
	<summary>
 Initialize
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectEntryDefinition.IncVersion">
	<summary>
 Increase the version
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectEntryDefinition.SetByFieldDesc(OnTrack.Database.ormFieldDescription@)">
	<summary>
 sets the values of this schemadefTableEntry by a FieldDescription
 </summary>
	<param name="FIELDDESC"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectEntryDefinition.SetByCompoundDesc(OnTrack.Database.ormCompoundDesc@)">
	<summary>
 sets the values of this schemadefTableEntry by a CompoundDescription
 </summary>
	<param name="compounddesc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectEntryDefinition.GetByCompoundDesc(OnTrack.Database.ormCompoundDesc@)">
	<summary>
 fills a compound description out of this SchemaDefTableentry
 </summary>
	<param name="compounddesc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectEntryDefinition.GetByFieldDesc(OnTrack.Database.ormFieldDescription@)">
	<summary>
 fills a field description out of this SchemaDefTableEntry
 </summary>
	<param name="fielddesc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectEntryDefinition.CreateSchema(System.Boolean)">
	<summary>
 create the schema for this object
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectEntryDefinition.Persist(System.DateTime)">
	<summary>
 Persist the data object to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBMessagelog.Initialize">
	<summary>
 Initialize the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBMessagelog.Delete">
	<summary>
 delete the Log and all members
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBMessagelog.GetAllMsg">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBMessagelog.GetMsgDef(System.Object)">
	<summary>
	</summary>
	<param name="i"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBMessagelog.Infuse(OnTrack.Database.ormRecord@)">
	<summary>
 infuses the message log by a record
 </summary>
	<param name="record"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBMessagelog.LoadBy(System.String)">
	<summary>
 load and infuse the message log by primary key
 </summary>
	<param name="TAG"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBMessagelog.Persist">
	<summary>
 persist the message log
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBMessagelog.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBMessagelog.Create(System.String)">
	<summary>
 create a message log with a primary key
 </summary>
	<param name="tag"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBMessageLogMember.#ctor">
	<summary>
 constructor of a message log member
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBMessageLogMember.LoadBy(System.String,System.Int64)">
	<summary>
 loads and infuses a message log member
 </summary>
	<param name="msglogtag"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBMessageLogMember.CreateSchema(System.Boolean)">
	<summary>
 create peristency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBMessageLogMember.Persist(System.DateTime)">
	<summary>
 Persist the message log member
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBMessageLogMember.Create(System.String,System.Int64)">
	<summary>
 Create a persistable Message Log Member by primary key
 </summary>
	<param name="msglogtag"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.DomainSetting.#ctor">
	<summary>
 constructor of a clsOTDBDefWorkspace
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.DomainSetting.DomainID">
	<summary>
 gets the ID of the Domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.DomainSetting.ID">
	<summary>
 gets the ID of the Setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.DomainSetting.Description">
	<summary>
 Description of the setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.DomainSetting.Datatype">
	<summary>
 returns the datatype 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.DomainSetting.value">
	<summary>
 gets or sets the value of the domain setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.DomainSetting.Initialize">
	<summary>
 initialize the object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.DomainSetting.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Retrieve the workspaceID Cache Object
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.DomainSetting.CreateSchema(System.Boolean)">
	<summary>
 create the objects persistence schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.DomainSetting">
	<summary>
 Domain Setting Definition Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.User.Initialize">
	<summary>
 initialize
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.User.HasNoRights">
	<summary>
 has no rights at all ?! -&gt; Blocked ?!
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.User.HasReadRights">
	<summary>
 has right to read
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.User.HasUpdateRights">
	<summary>
 has right to update and read data
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.User.HasAlterSchemaRights">
	<summary>
 Has Right to update, read and alter schema data
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.User.IsAnonymous">
	<summary>
 is anonymous user
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.All">
	<summary>
 Returns a collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.GetAnonymous">
	<summary>
 returns the anonyous user ( first descending username)
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.LoadBy(System.String)">
	<summary>
 loads and infuses a User Definition object by primary key
 </summary>
	<param name="username"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.HasSetting(System.String)">
	<summary>
 returns true if the setting exists
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.GetSetting(System.String)">
	<summary>
 returns the setting valid in the domain
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.SetSetting(System.String,OnTrack.Database.otFieldDataType,System.Object)">
	<summary>
 sets the setting valid in the domain
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.LoadSettings(System.Boolean)">
	<summary>
 Load the settings to the settings dictionary
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema with use of database driver
 ATTENTION ! This can only be called if database is set up
 user createSql function otherwise
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.Create(System.String)">
	<summary>
 Create persistency for this object
 </summary>
	<param name="username"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.User">
	<summary>
 User Definition Class of an OnTrack User
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.UserSetting.#ctor">
	<summary>
 constructor of a clsOTDBDefWorkspace
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.UserSetting.Username">
	<summary>
 gets the ID of the Domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UserSetting.ID">
	<summary>
 gets the ID of the Setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UserSetting.Description">
	<summary>
 Description of the setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UserSetting.Datatype">
	<summary>
 returns the datatype 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UserSetting.Value">
	<summary>
 gets or sets the value of the domain setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UserSetting.Initialize">
	<summary>
 initialize the object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UserSetting.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Retrieve the workspaceID Cache Object
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UserSetting.CreateSchema(System.Boolean)">
	<summary>
 create the objects persistence schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.UserSetting">
	<summary>
 User Setting Definition Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefPerson.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefPerson.Initialize">
	<summary>
 Initialize
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefPerson.LoadBy(System.String)">
	<summary>
 Load and infuses a object by primary key
 </summary>
	<param name="Name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefPerson.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefPerson.Persist(System.DateTime)">
	<summary>
 Persist the Person Defintion
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefPerson.All">
	<summary>
 returns a collection of all Person Definition Objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefPerson.Create(System.String)">
	<summary>
 Creates the persistence object
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefLogMessage.#ctor">
	<summary>
 constructor of a Message Definition
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefLogMessage.LoadBy(System.String)">
	<summary>
 Load and Infuse the Log Message Definition from store
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefLogMessage.CreateSchema(System.Boolean)">
	<summary>
 create the persitency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefLogMessage.Persist(System.DateTime)">
	<summary>
 Persist the Log Message Definition to the store
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefLogMessage.All">
	<summary>
 return all Log Message Definitions
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefLogMessage.Create(System.String)">
	<summary>
 Create a persistable Log Message
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefStatusItem.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefStatusItem.Initialize">
	<summary>
 initialize
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefStatusItem.LoadBy(System.String,System.String)">
	<summary>
 Load and Infuse a status item defintion
 </summary>
	<param name="TYPEID"></param>
	<param name="code"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefStatusItem.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefStatusItem.Persist(System.DateTime)">
	<summary>
 Persist the object
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefStatusItem.Create(System.String,System.String)">
	<summary>
 create a persistable object 
 </summary>
	<param name="typeid"></param>
	<param name="code"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Workspace.#ctor">
	<summary>
 constructor of a clsOTDBDefWorkspace
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Workspace.Initialize">
	<summary>
 initialize the object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Workspace.Retrieve(System.String,System.Boolean)">
	<summary>
 Retrieve the workspaceID Cache Object
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Workspace.LoadBy(System.String)">
	<summary>
 load and infuse the current workspaceID object
 </summary>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Workspace.CreateSchema(System.Boolean)">
	<summary>
 create the objects persistence schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Workspace.Create(System.String)">
	<summary>
 creates with this object a new persistable Def workspaceID
 </summary>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Workspace.All">
	<summary>
 returns a List(of clsotdbDefWorkspace) of all workspaceID Definitions
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Workspace">
	<summary>
 Workspace Definition Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.#ctor">
	<summary>
 constructor of a clsOTDBDefWorkspace
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.OnSessionEnd(System.Object,OnTrack.SessionEventArgs)">
	<summary>
 handles the session start event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.OnSessionStart(System.Object,OnTrack.SessionEventArgs)">
	<summary>
 handles the session end event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.RegisterSession(OnTrack.Session)">
	<summary>
 Register a Session a the Domain
 </summary>
	<param name="session"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.Initialize">
	<summary>
 initialize the object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.Retrieve(System.String,OnTrack.Database.iormDBDriver,System.Boolean)">
	<summary>
 Retrieve the workspaceID Cache Object
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.hasSetting(System.String)">
	<summary>
 returns true if the setting exists
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.GetSetting(System.String)">
	<summary>
 returns the setting valid in the domain
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.SetSetting(System.String,OnTrack.Database.otFieldDataType,System.Object)">
	<summary>
 sets the setting valid in the domain
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.LoadSettings">
	<summary>
 Load the settings to the settings dictionary
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.CreateSchema(System.Boolean)">
	<summary>
 create the objects persistence schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.All">
	<summary>
 returns a List(of Domain) of all workspaceID Definitions
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Domain">
	<summary>
 Domain Definition Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefOrgUnit.#ctor">
	<summary>
 constructor of a DefOrgUnit
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefOrgUnit.Initialize">
	<summary>
 Initialize the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefOrgUnit.Retrieve(System.String,System.Boolean)">
	<summary>
 Retrieve a User Definition
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefOrgUnit.LoadBy(System.String)">
	<summary>
 loads and infuses a DefOrgUnit Object with the primary key
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefOrgUnit.CreateSchema(System.Boolean)">
	<summary>
 create the persistence schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefOrgUnit.Persist(System.DateTime)">
	<summary>
 Persists the Object in the data store
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefOrgUnit.All">
	<summary>
 returns a collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.clsOTDBDefOrgUnit">
	<summary>
 Organization Unit Definition Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefOUSite.#ctor">
	<summary>
 constructor of Def OUSite
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.clsOTDBDefOUSite.ID">
	<summary>
 ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.clsOTDBDefOUSite.Description">
	<summary>
 Description
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefOUSite.Initialize">
	<summary>
 Initialize the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefOUSite.Infuse(OnTrack.Database.ormRecord@)">
	<summary>
 Infuses a DEFOUSite Object by a record
 </summary>
	<param name="record"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefOUSite.Retrieve(System.String,System.Boolean)">
	<summary>
 Retrieve
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefOUSite.LoadBy(System.String)">
	<summary>
 Load and infuse the object 
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefOUSite.CreateSchema(System.Boolean)">
	<summary>
 create the persistency object
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefOUSite.Persist(System.DateTime)">
	<summary>
 Persist the data object
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefOUSite.All">
	<summary>
 returns a collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefUserAccessList.Initialize">
	<summary>
 initialize the object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefUserAccessList.#ctor">
	<summary>
 constuctor of a user Access List Object
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefUserAccessList.All">
	<summary>
 return a collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefUserAccessList.LoadBy(System.String,System.String)">
	<summary>
 loads and infuses a DefUserAccessList by primary key
 </summary>
	<param name="id"></param>
	<param name="username"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefUserAccessList.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefUserAccessList.Persist(System.DateTime)">
	<summary>
 Persist the object
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBDefUserAccessList.Create(System.String,System.String)">
	<summary>
  Creates a persistable dataobject 
 </summary>
	<param name="id"></param>
	<param name="username"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.clsOTDBDefUserAccessList">
	<summary>
 Definition of User Access List Class
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otFieldDataType">
	<summary>
 Data Types for OnTrack Database Fields
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormDBDriver.DatabaseType">
	<summary>
 the Type of the Server
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDBDriver.PersistLog(OnTrack.ErrorLog@)">
	<summary>
 Persist the Session or ErrorLog
 </summary>
	<param name="log"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDBDriver.VerifyOnTrackDatabase(System.Boolean,System.Boolean)">
	<summary>
 verify OnTrack if Data Objects are there and up to date
 </summary>
	<returns>true if OnTrack is ok</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDBDriver.GetTable(System.String,System.Boolean,System.Boolean,System.Object@,System.Object@)">
	<summary>
 returns or creates a Table in the data store
 </summary>
	<param name="tablename"></param>
	<param name="createOrAlter"></param>
	<param name="addToSchemaDir"></param>
	<param name="nativeConnection"></param>
	<param name="tableNativeObject"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDBDriver.GetIndex(System.Object@,System.String@,System.Collections.Generic.List{System.String}@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 returns or create an Index in the data store
 </summary>
	<param name="nativeTable"></param>
	<param name="indexname"></param>
	<param name="columnNames"></param>
	<param name="primaryKey"></param>
	<param name="forceCreation"></param>
	<param name="createOrAlter"></param>
	<param name="addToSchemaDir"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDBDriver.HasSqlCommand(System.String)">
	<summary>
 checks if SqlCommand is in Store of the driver
 </summary>
	<param name="id">id of the command</param>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDBDriver.StoreSqlCommand(OnTrack.Database.iormSqlCommand@)">
	<summary>
 Store the Command by its ID - replace if existing
 </summary>
	<param name="sqlCommand">a iOTDBSqlCommand</param>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDBDriver.RetrieveSqlCommand(System.String)">
	<summary>
 Retrieve the Command from Store
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDBDriver.CreateNativeDBCommand(System.String,System.Data.IDbConnection)">
	<summary>
 Creates a native DB Command
 </summary>
	<param name="p1">Command name</param>
	<param name="aNativeConnection"></param>
	<returns>a idbcommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDBDriver.AssignNativeDBParameter(System.String,OnTrack.Database.otFieldDataType,System.Int64,System.Object)">
	<summary>
 creates and assigns a native DB Paramter by otdb datatype
 </summary>
	<param name="parametername"></param>
	<param name="datatype"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDBDriver.GetTargetTypeFor(OnTrack.Database.otFieldDataType)">
	<summary>
 returns the target type for a OTDB FieldType - MAPPING
 </summary>
	<param name="type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDBDriver.Convert2DBData(System.Object,System.Int64,System.Int64,System.Boolean@,System.String)">
	<summary>
 convert a value to column data type
 </summary>
	<param name="value">value</param>
	<param name="targetType">target data type of the native driver</param>
	<param name="maxsize">optional max size of string / text</param>
	<param name="abostrophNecessary">optional true if abostrop in sql necessary</param>
	<param name="fieldname">optional fieldname to use on error handling</param>
	<returns>the converted object</returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormDataStore.Connection">
	<summary>
 sets or gets the connection to the database
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormDataStore.TableSchema">
	<summary>
 sets or gets the schema class for this tablestore
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormDataStore.TableID">
	<summary>
 set or gets the ID (name) of the table
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormDataStore.IsLinqAvailable">
	<summary>
 returns true if the tablestore supports Linq
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.CreateUniquePkValue(System.Object[]@)">
	<summary>
 returns a new unique key value
 </summary>
	<param name="pkArray">sets or fills this array</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.Refresh(System.Boolean)">
	<summary>
 Refresh the data of the tablestore
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.GetRecordsBySqlCommand(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@)">
	<summary>
 retrieves a collection of records by retrieving or creating a sql command from the data store
 </summary>
	<param name="ID"></param>
	<param name="wherestr"></param>
	<param name="fullsqlstr"></param>
	<param name="innerjoin"></param>
	<param name="orderby"></param>
	<param name="silent"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.GetRecordsByIndex(System.String,System.Object[]@,System.Boolean)">
	<summary>
 returns a collection of clsotdbrecord by an named index / view and keys Array in the datastore
 </summary>
	<param name="indexname"></param>
	<param name="keyArray"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.InfuseRecord(OnTrack.Database.ormRecord@,System.Object@,System.Boolean)">
	<summary>
 infuses a clsotdbRecord from the datastore
 </summary>
	<param name="newRecord"></param>
	<param name="rowObject"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.PersistRecord(OnTrack.Database.ormRecord@,System.DateTime,System.Boolean)">
	<summary>
 persists a clsotdbRecord to the data store
 </summary>
	<param name="record"></param>
	<param name="timestamp"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.RunSqlStatement(System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@,System.Boolean)">
	<summary>
 runs a plain sql statement
 </summary>
	<param name="sqlcmdstr"></param>
	<param name="parameters"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.RunSqlCommand(OnTrack.Database.ormSqlCommand@,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
	<summary>
 runs a sql command 
 </summary>
	<param name="command"></param>
	<param name="parametervalues"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.Convert2ColumnData(System.Object,System.Int64,System.Int64,System.Boolean@,System.String)">
	<summary>
 convert a value to column data type
 </summary>
	<param name="value">value</param>
	<param name="targetType">target data type of the native driver</param>
	<param name="maxsize">optional max size of string / text</param>
	<param name="abostrophNecessary">optional true if abostrop in sql necessary</param>
	<param name="fieldname">optional fieldname to use on error handling</param>
	<returns>the converted object</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.Convert2ColumnData(System.Object,System.Object,System.Boolean@)">
	<summary>
 convert a value to data type of the column
 </summary>
	<param name="index">column name</param>
	<param name="value">value </param>
	<param name="abostrophNecessary">true if abostrop in sql necessary</param>
	<returns>converted value</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.Convert2ObjectData(System.Object,System.Object,System.Boolean@)">
	<summary>
 convert data from the data store to object
 </summary>
	<param name="index"></param>
	<param name="value"></param>
	<param name="abostrophNecessary"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.HasProperty(System.String)">
	<summary>
 returns true if the tablestore has the named property
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.GetProperty(System.String)">
	<summary>
 returns the Property by name
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.SetProperty(System.String,System.Object)">
	<summary>
 sets the property by name for the tablestore
 </summary>
	<param name="name"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.HasSqlCommand(System.String)">
	<summary>
 checks if SqlCommand is in Store of the driver
 </summary>
	<param name="id">id of the command</param>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.StoreSqlCommand(OnTrack.Database.iormSqlCommand@)">
	<summary>
 Store the Command by its ID - replace if existing
 </summary>
	<param name="sqlCommand">a iOTDBSqlCommand</param>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.RetrieveSqlCommand(System.String)">
	<summary>
 Retrieve the Command from Store
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.CreateSqlCommand(System.String)">
	<summary>
 Retrieve the Command from Store or create new command
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.CreateSqlSelectCommand(System.String,System.Boolean,System.Boolean)">
	<summary>
 Retrieve the Command from Store or create a new Select Command
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormDataStore">
	<summary>
 defines an interface for persistency classes which are able to persist clsOTDBRecord 
 through an iotdbconnection object
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotTableSchema.TableID">
	<summary>
 associated table id of the schema
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotTableSchema.IsInitialized">
	<summary>
 True if Schema is read and initialized
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotTableSchema.Indices">
	<summary>
 all Indices's as list
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotTableSchema.Refresh(System.Boolean)">
	<summary>
 refresh loads the schema
 </summary>
	<param name="reloadForce"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotTableSchema.PrimaryKeyIndexName">
	<summary>
 gets the name of the primary key
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotTableSchema.GetFieldordinal(System.Object)">
	<summary>
 gets the fieldname ordinals in the schema
 </summary>
	<param name="anIndex"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotTableSchema.fieldnames">
	<summary>
 all fieldnames in the schema as List
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotTableSchema.Getfieldname(System.Int32)">
	<summary>
 return the fieldname by ordinal
 </summary>
	<param name="i"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotTableSchema.HasprimaryKeyfieldname(System.String@)">
	<summary>
 true if the fieldname exists in the primary key
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotTableSchema.Hasfieldname(System.String)">
	<summary>
 true if the fieldname exists in the schema
 </summary>
	<param name="Name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotTableSchema.GetPrimaryKeyfieldname(System.UInt16)">
	<summary>
 get the Primary Key fieldname by Index i.returns "" if there is none
 </summary>
	<param name="i"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotTableSchema.GetordinalOfPrimaryKeyField(System.UInt16)">
	<summary>
  get the Primary Key fieldname no by field index i.  returns -1 if there is none
 </summary>
	<param name="i"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotTableSchema.NoPrimaryKeyFields">
	<summary>
 the number of fields in the primary key
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotTableSchema.NoFields">
	<summary>
 the number of fields
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotTableSchema.GetIndex(System.String)">
	<summary>
 gets an Index by name
 </summary>
	<param name="indexname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotTableSchema.HasIndex(System.String)">
	<summary>
 True if index exists
 </summary>
	<param name="indexname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotTableSchema.AssignNativeDBParameter(System.String,System.String)">
	<summary>
 Assign a native DB parameters and return
 </summary>
	<param name="fieldname"></param>
	<param name="parametername"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iotTableSchema">
	<summary>
 interface for a native table schema for a table store
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormConnection.IsConnected">
	<summary>
 returns true if connected
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormConnection.IsInitialized">
	<summary>
 returns true if connection is initialized
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormConnection.Session">
	<summary>
 gets the Session of the Connection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormConnection.UILogin">
	<summary>
 Gets or sets the UI login.
 </summary>
	<value>The UI login.</value>
</member><member name="P:OnTrack.Database.iormConnection.Access">
	<summary>
 Gets or sets the access.
 </summary>
	<value>The access.</value>
</member><member name="P:OnTrack.Database.iormConnection.OTDBUser">
	<summary>
 Gets or sets the user.
 </summary>
	<value>The user.</value>
</member><member name="P:OnTrack.Database.iormConnection.Dbpassword">
	<summary>
 Gets or sets the dbpassword.
 </summary>
	<value>The dbpassword.</value>
</member><member name="P:OnTrack.Database.iormConnection.Dbuser">
	<summary>
 Gets or sets the dbuser.
 </summary>
	<value>The dbuser.</value>
</member><member name="P:OnTrack.Database.iormConnection.DBName">
	<summary>
 Gets or sets the name of the database or file.
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.iormConnection.PathOrAddress">
	<summary>
 Gets or sets the path.
 </summary>
	<value>The path.</value>
</member><member name="P:OnTrack.Database.iormConnection.Connectionstring">
	<summary>
 Gets or sets the connectionstring.
 </summary>
	<value>The connectionstring.</value>
</member><member name="P:OnTrack.Database.iormConnection.Databasetype">
	<summary>
 Gets or sets the databasetype.
 </summary>
	<value>OnTrackDatabaseServer</value>
</member><member name="P:OnTrack.Database.iormConnection.DatabaseDriver">
	<summary>
 Gets or sets the DatabaseEnvirorment.
 </summary>
	<value>iOTDBDatabaseEnvirorment</value>
</member><member name="P:OnTrack.Database.iormConnection.NativeConnection">
	<summary>
 Gets the NativeConnection.
 </summary>
	<value>Object</value>
</member><member name="P:OnTrack.Database.iormPersistable.TableStore">
	<summary>
 Tablestore associated with this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.Record">
	<summary>
 TableID associated with this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.TableID">
	<summary>
 TableID associated with this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.IsLoaded">
	<summary>
 True if data object is loaded from data store
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.IsCreated">
	<summary>
 True if data object is created in the data store
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.IsInitialized">
	<summary>
 True if data object is initialized and working
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.Initialize">
	<summary>
 Initialize the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.LoadBy(System.Object[]@)">
	<summary>
 load and infuse the dataobject by primary key
 </summary>
	<param name="pkArray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.Create(System.Object[]@,System.Boolean,System.Boolean)">
	<summary>
 create a persistable dataobject
 </summary>
	<param name="pkArray"></param>
	<param name="checkUnique"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.Delete">
	<summary>
 deletes a persistable object in the datastore
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.Persist(System.DateTime,System.Boolean)">
	<summary>
 Perists the object in the datastore
 </summary>
	<param name="timestamp"></param>
	<param name="doFeedRecord"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.GetVersion(OnTrack.Database.iormPersistable,System.String)">
	<summary>
 returns the version by attribute of the persistance objects
 </summary>
	<param name="name"></param>
	<param name="dataobject"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormPersistable">
	<summary>
 interface describes a persistable OTDB Data Object
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormInfusable.Infuse(OnTrack.Database.ormRecord@)">
	<summary>
 Infuse the object with data from the record
 </summary>
	<param name="record">record </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormInfusable">
	<summary>
 interface infusable if an Object can be infused by a record
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotCloneable`1.Clone(System.Object[])">
	<summary>
 clone the object with the new primary key
 </summary>
	<param name="pkarray">primary key array</param>
	<returns>the new cloned object or nothing</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iotCloneable`1">
	<summary>
 interface cloneable if an object can be cloned
 </summary>
	<typeparam name="T"></typeparam>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotHasCompounds.AddSlotCompounds(OnTrack.XChange.XEnvelope@)">
	<summary>
 adds compounds slots of an instance (out of the envelope) to the envelope
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iotHasCompounds">
	<summary>
 interface for having an Compound 
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.iotXChangeable.RunXChange(OnTrack.XChange.XEnvelope@)">
	<summary>
 runs the XChange 
 </summary>
	<param name="envelope"></param>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.iotXChangeable.RunXPreCheck(OnTrack.XChange.XEnvelope@)">
	<summary>
 runs the Precheck
 </summary>
	<param name="envelope"></param>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.otCoreMessageType">
	<summary>
 Message types of the On Track Database Core
 </summary>
	<remarks></remarks>
</member><member name="P:clsCartypes.printout">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.#ctor">
	<summary>
 constructore
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.clsOTDBMessageQueue.ContextIdentifier">
	<summary>
 Gets or sets the context identifier.
 </summary>
	<value>The context identifier.</value>
</member><member name="P:OnTrack.Xchange.clsOTDBMessageQueue.TupleIdentifier">
	<summary>
 Gets or sets the tuple identifier.
 </summary>
	<value>The tuple identifier.</value>
</member><member name="P:OnTrack.Xchange.clsOTDBMessageQueue.EntitityIdentifier">
	<summary>
 Gets or sets the entitity identifier.
 </summary>
	<value>The entitity identifier.</value>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.Delete">
	<summary>
 deletesthe persisted objecte and subobjects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.Loadby(System.String)">
	<summary>
 loads a message queue from the datastore
 </summary>
	<param name="TAG"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.Persist(System.DateTime)">
	<summary>
 Persists the Queue and all entries
 </summary>
	<param name="TIMESTAMP"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.CreateSchema(System.Boolean)">
	<summary>
 create Persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.Create(System.String)">
	<summary>
 create a persistble message queue
 </summary>
	<param name="TAG"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.Process">
	<summary>
 process -&gt; write the MQF to the Database through the XChangeManager
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.raiseMessage(System.Int64,OnTrack.clsOTDBMessagelog@)">
	<summary>
 Raises the message.
 </summary>
	<param name="index">The index.</param>
	<param name="MSGLOG">The MSGLOG.</param>
	<returns></returns>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.attachMessageLog(OnTrack.clsOTDBMessagelog@)">
	<summary>
 Attaches the message log.
 </summary>
	<param name="MSGLOG">The MSGLOG.</param>
	<returns></returns>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.Precheck">
	<summary>
 precheck -&gt; check the MQF
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.GetMember(System.Int64)">
	<summary>
 GetMember by index
 </summary>
	<param name="i"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.clsOTDBMessageQueueEntry.Members">
	<summary>
 returns a List of Members
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.VerifyAction(System.String)">
	<summary>
 verify action
 </summary>
	<param name="ActionCommand"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.IsActionProcessable(System.String,OnTrack.clsOTDBMessagelog@)">
	<summary>
 Is Action Processable
 </summary>
	<param name="ActionCommand"></param>
	<param name="MSGLOG"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.Delete">
	<summary>
 Deletes all persistable objects in the datastore
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.CreateMember">
	<summary>
 creates a member
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.Persist(System.DateTime)">
	<summary>
 Persist the Entry with members
 </summary>
	<param name="TIMESTAMP"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.CreateSchema(System.Boolean)">
	<summary>
 Create Persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.RunPreCheck(OnTrack.clsOTDBMessagelog@)">
	<summary>
 run the Precheck on the Entry
 </summary>
	<param name="msglog"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.FillMapping(System.Collections.Generic.Dictionary{System.Object,System.Object}@)">
	<summary>
 Fill Mapping from the Entry
 </summary>
	<param name="mapping"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.RunXChange(System.Boolean,OnTrack.clsOTDBMessagelog@,System.Collections.Generic.Dictionary{System.Object,System.Object}@)">
	<summary>
 Run XChange on the Enry
 </summary>
	<param name="justprecheck"></param>
	<param name="MSGLOG"></param>
	<param name="MAPPING"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueMember.Infuse(OnTrack.Database.ormRecord@)">
	<summary>
 Infuse the object by the record
 </summary>
	<param name="record"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueMember.CreateSchema(System.Boolean)">
	<summary>
 create persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueMember.Persist(System.DateTime)">
	<summary>
 persist the Object
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.clsOTDBTrackItem.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.clsOTDBTrackItem.LoadBy(System.String,System.Int64)">
	<summary>
 loads the data object (the Track Item) from the store
 </summary>
	<param name="listid"></param>
	<param name="posno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.clsOTDBTrackItem.CreateSchema(System.Boolean)">
	<summary>
 creates the schema for persistency
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.clsOTDBTrackItem.Create(System.String,System.Int64)">
	<summary>
 create a persistable track list item
 </summary>
	<param name="listid"></param>
	<param name="posno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.clsOTDBTrackItem.GetTrackItemsList(System.String)">
	<summary>
 get the items by list
 </summary>
	<param name="listid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.clsOTDBTrackItem.All">
	<summary>
 retrieve a collection of all Items
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.clsOTDBTrackItem">
	<summary>
 List of trackable items
 </summary>
	<remarks></remarks>
</member><member name="P:UIWinFormLogin.UsernameEnabled">
	<summary>
 Gets or sets the username enabled.
 </summary>
	<value>The username enabled.</value>
</member><member name="P:UIWinFormLogin.Domain">
	<summary>
 Gets or sets the message.
 </summary>
	<value>The message.</value>
</member><member name="P:UIWinFormLogin.DomainList">
	<summary>
 Gets or sets the domain list.
 </summary>
	<value>The domain list.</value>
</member><member name="P:UIWinFormLogin.DomainChangeEnables">
	<summary>
 Gets or sets the domain change enables.
 </summary>
	<value>The domain change enables.</value>
</member><member name="P:UIWinFormLogin.Message">
	<summary>
 Gets or sets the message.
 </summary>
	<value>The message.</value>
</member><member name="M:UIWinFormLogin.CloseOTDBForm">
	<summary>
 Close the Form
 </summary>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:UIWinFormLogin.RefreshOTDBForm">
	<summary>
 Refresh the Form
 </summary>
	<remarks></remarks>
	<returns></returns>
</member><member name="P:UIWinFormLogin.ConfigSet">
	<summary>
 Gets or sets the config set.
 </summary>
	<value>The config set.</value>
</member><member name="P:UIWinFormLogin.ConfigSetList">
	<summary>
 Gets or sets the config set list.
 </summary>
	<value>The config set list.</value>
</member><member name="P:UIWinFormLogin.ConfigSetEnabled">
	<summary>
 Gets or sets the config set enabled.
 </summary>
	<value>The config set enabled.</value>
</member><member name="P:UIWinFormLogin.Username">
	<summary>
 Gets or sets the username.
 </summary>
	<value>The username.</value>
</member><member name="P:UIWinFormLogin.Password">
	<summary>
 Gets or sets the password.
 </summary>
	<value>The password.</value>
</member><member name="P:UIWinFormLogin.RightsList">
	<summary>
 Gets or sets the rights list.
 </summary>
	<value>The rights list.</value>
</member><member name="P:UIWinFormLogin.StatusText">
	<summary>
 Gets or sets the status text.
 </summary>
	<value>The status text.</value>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefMilestone.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefMilestone.Initialize">
	<summary>
 Initialize dataobject
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefMilestone.Infuse(OnTrack.Database.ormRecord@)">
	<summary>
 infuse the data object by a record
 </summary>
	<param name="record"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefMilestone.Retrieve(System.String,System.Boolean)">
	<summary>
 Retrieve
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefMilestone.LoadBy(System.String)">
	<summary>
 load and infuse a milestone definition 
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefMilestone.CreateSchema(System.Boolean)">
	<summary>
 create a persistance schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefMilestone.Persist(System.DateTime)">
	<summary>
 Persist the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefMilestone.All">
	<summary>
 Return a collection of all def Milestones
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefMilestone.Create(System.Object[])">
	<summary>
 Create persistable object with primary key
 </summary>
	<param name="pkarray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefMilestone.Create(System.String)">
	<summary>
 create persistable object with primary key ID
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.clsOTDBDefMilestone">
	<summary>
 milestone definition class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleTask.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleTask.Initialize">
	<summary>
 Initialize the dataobject
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleTask.Infuse(OnTrack.Database.ormRecord@)">
	<summary>
 Infuse the data object by the record
 </summary>
	<param name="record"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleTask.LoadBy(System.String,System.String)">
	<summary>
 loads and infuses the schedule task definition by primary key
 </summary>
	<param name="scheduletype"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleTask.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleTask.Persist(System.DateTime)">
	<summary>
 Persist the data object 
 </summary>
	<param name="TIMESTAMP"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleTask.All">
	<summary>
 retrieve a collection of all schedule task definition object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleTask.Create(System.String,System.String)">
	<summary>
 create the data object with primary key
 </summary>
	<param name="scheduletype"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.clsOTDBDefScheduleTask">
	<summary>
 Definition class of a schedule task
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleMilestone.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleMilestone.Initialize">
	<summary>
 Initialize the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleMilestone.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Retrieve
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleMilestone.GetDefMilestone">
	<summary>
 retrieve related Milestone Definition Object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleMilestone.LoadBy(System.String,System.String)">
	<summary>
 load the object by primary keys
 </summary>
	<param name="scheduletype"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleMilestone.CreateSchema(System.Boolean)">
	<summary>
 create persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleMilestone.Persist(System.DateTime)">
	<summary>
 Persist the Object
 </summary>
	<param name="TIMESTAMP"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleMilestone.All">
	<summary>
 retrieve a collection of all schedule milestone definition objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleMilestone.AllByType(System.String)">
	<summary>
 returns a List of Schedule Milestone Definitions by scheduletype
 </summary>
	<param name="scheduletype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleMilestone.Create(System.String,System.String)">
	<summary>
 create the persistable object
 </summary>
	<param name="SCHEDULETYPE"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.clsOTDBDefScheduleMilestone">
	<summary>
 Definition of a schedule milestone class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.Initialize">
	<summary>
 initialize the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.Delete">
	<summary>
 delete the data object and all members
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.Orderno">
	<summary>
 orderno returns an object array of orderno's
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.MembersByOrderNo">
	<summary>
  Members returns a Collection of Members (Milestone Definitions) in Order of the OrderNo
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.Members">
	<summary>
  returns a Collection of Members
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.LoadBy(System.String)">
	<summary>
	</summary>
	<param name="scheduletype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.Persist(System.DateTime)">
	<summary>
 Persist the data object and all loaded definition memebrs
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.Create(System.String)">
	<summary>
 create the data object by primary key
 </summary>
	<param name="SCHEDULETYPE"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.ScheduleDefinition">
	<summary>
 schedule definition object
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.Schedule.NoMilestones">
	<summary>
 gets the number of milestones in the schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.Schedule.IsForecastChanged">
	<summary>
 returns true if the the forecast is changed since loadby / last persist
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.Schedule.Typeid">
	<summary>
 returns the type id of the schedule type of this schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.Schedule.haveMileStonesChanged">
	<summary>
 true if a milestone was changed after last load / persist / publish
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.GetDefSchedule">
	<summary>
 retrieve the related Schedule Definition object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.GetDefScheduleMilestone(System.String)">
	<summary>
 retrieve the related Schedule Milestone Definition Object
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.Initialize">
	<summary>
 Initialize the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.GetMilestoneValue(System.String,System.Boolean)">
	<summary>
 milestone returns the Milestone Value as object or Null if not exists
 </summary>
	<param name="ID"></param>
	<param name="ORIGINAL"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.SetMilestone(System.String,System.Object,System.Boolean)">
	<summary>
 setMilestone ID to Value
 </summary>
	<param name="ID"></param>
	<param name="Value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.MoveMilestone(System.Int64,System.String,System.Boolean)">
	<summary>
 move the milestone in date range
 </summary>
	<param name="noDays"></param>
	<param name="MSID"></param>
	<param name="considerWorkingDays"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.MoveSchedule(System.Int64,System.String,System.Boolean)">
	<summary>
 move the full schedule in date range
 </summary>
	<param name="noDays"></param>
	<param name="startMS"></param>
	<param name="considerWorkingDays"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.GetDefScheduleMSbyOrder(System.Boolean)">
	<summary>
 getDefScheduleMSbyOrder returns a Collection of ScheduleMilestones by Orderno
 </summary>
	<param name="justDates"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.AllByUID(System.Int64)">
	<summary>
 return a collection of all schedules of a uid
 </summary>
	<param name="UID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.LoadMilestones(System.String)">
	<summary>
 load all Milestones as Members -&gt; look for Actuals access
 </summary>
	<param name="scheduletypeid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.Delete">
	<summary>
 delete the record and all members
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.Milestones">
	<summary>
 returns all schedule milestones
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.AddMilestone(OnTrack.Scheduling.ScheduleMilestone@)">
	<summary>
 Add a Milestone
 </summary>
	<param name="Milestone"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.Loadby(System.Int64,System.String)">
	<summary>
 load the current schedule by uid and optionally workspaceID
 </summary>
	<param name="uid"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.LoadBy(System.Int64,System.Int64)">
	<summary>
 loads an schedule from store
 </summary>
	<param name="UID"></param>
	<param name="updc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.GetDeliverableTrack">
	<summary>
 retrieve the corresponding deliverableTrack
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.hasMilestone(System.String,OnTrack.otMilestoneType,System.Boolean)">
	<summary>
 if the milestone by id exists
 </summary>
	<param name="ID"></param>
	<param name="MSTYPEID"></param>
	<param name="HASDATA"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.HasMilestoneDate(System.String)">
	<summary>
 has the Milestone date data ?!
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.IsMilestoneValueMissing(System.String,System.Boolean)">
	<summary>
 returns true if the milestone has no data or does not exist (optional ifNotExists)
 </summary>
	<param name="ID"></param>
	<param name="ifNotExists"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.IsFinished">
	<summary>
 is the schedule finished
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.GetTimeInterval(System.String)">
	<summary>
 timeinterval for the task
 </summary>
	<param name="TaskTypeID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.DrawBaseline(OnTrack.clsOTDBMessagelog@,System.DateTime,System.DateTime,System.Boolean)">
	<summary>
 creates out of this Schedule a new Baseline and updates all other Objects
 </summary>
	<param name="MSGLOG"></param>
	<param name="REFDATE"></param>
	<param name="TIMESTAMP"></param>
	<param name="ForceSerializeToOTDB"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.IncreaseRevison(System.Boolean,System.Boolean)">
	<summary>
 increase revision in Form VXX.YY
 </summary>
	<param name="MajorFlag"></param>
	<param name="MinorFlag"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.Persist(System.DateTime,System.Boolean)">
	<summary>
 Persist the data object
 </summary>
	<param name="TIMESTAMP"></param>
	<param name="ForceSerializeToOTDB"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.Clone(System.Object[])">
	<summary>
 clones an object
 </summary>
	<param name="pkarray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.CloneToWorkspace(System.String,System.Int64,System.Int64,System.Boolean)">
	<summary>
 clone this schedule to a specific workspaceID by id
 </summary>
	<param name="workspaceID"></param>
	<param name="UID"></param>
	<param name="updc"></param>
	<param name="setCurrSchedule"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.GetMaxUpdc(System.Int64@,System.String)">
	<summary>
 retrieve maximum update count from the datastore
 </summary>
	<param name="max">the max to be set</param>
	<param name="workspaceID">optional workspaceID</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.RunXPrecheck(OnTrack.XChange.XEnvelope@)">
	<summary>
 run XChange on an envelope
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.RunXChange(OnTrack.XChange.XEnvelope@)">
	<summary>
 run XChange on an envelope
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.runXChangeOLD(System.Collections.Generic.Dictionary{System.Object,System.Object}@,OnTrack.XChange.clsOTDBXChangeConfig@,OnTrack.clsOTDBMessagelog@)">
	<summary>
 run XChange on a Schedule Object
 </summary>
	<param name="MAPPING"></param>
	<param name="CHANGECONFIG"></param>
	<param name="MSGLOG"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.runXPreCheckOLD(System.Collections.Generic.Dictionary{System.Object,System.Object}@,OnTrack.XChange.clsOTDBXChangeConfig@,OnTrack.clsOTDBMessagelog@)">
	<summary>
 run Xchange Precheck
 </summary>
	<param name="MAPPING"></param>
	<param name="CHANGECONFIG"></param>
	<param name="MSGLOG"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.LoadBy(OnTrack.XChange.XEnvelope@)">
	<summary>
 loads the schedule from the Store by values from the envelope
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.AddSlotCompounds(OnTrack.XChange.XEnvelope@)">
	<summary>
 Add Compounds Slots to the Envelope
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.Schedule">
	<summary>
 schedule class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.UniqueTag">
	<summary>
 unique Tag
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.Initialize">
	<summary>
 Initialize the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.LoadBy(System.Int64,System.Int64,System.String)">
	<summary>
 Load and infuse the schedule milestone from the data store by primary key
 </summary>
	<param name="UID"></param>
	<param name="updc"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema 
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.FeedRecord">
	<summary>
 Update the record from the properties
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.Clone(System.Int64,System.Int64,System.String)">
	<summary>
 Clone the schedule milestone by new primary key
 </summary>
	<param name="UID"></param>
	<param name="updc"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.Clone(System.Object[])">
	<summary>
 clone the data object by primary key array
 </summary>
	<param name="pkArray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.ScheduleMilestone">
	<summary>
 Schedule Milestone Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBCurrSchedule.#ctor">
	<summary>
 constructor of Current schedule
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBCurrSchedule.Initialize">
	<summary>
 Initialize the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBCurrSchedule.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBCurrSchedule.Retrieve(System.Int64,System.String)">
	<summary>
 retrieves a clsotdbcurrschedule from the datastore
 </summary>
	<param name="UID"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBCurrSchedule.LoadBy(System.Int64,System.String)">
	<summary>
 loads the currschedule from the datastore
 </summary>
	<param name="UID"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBCurrSchedule.Persist(System.DateTime)">
	<summary>
 persist the object to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstDepTypeIDIFC">
	<summary>
 Dependency Type Interfaces
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstDelimiter">
	<summary>
 Default Delimiter for String Expressions
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstTPNCacheProperty">
	<summary>
 Table Property Name "Cache Property"
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstTPNCacheUpdateInstant">
	<summary>
 Table Property Name "Cache Update Instant"
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstPNObjectsLoad">
</member><member name="F:OnTrack.ot.ConstGlobalConfigSetName">
	<summary>
 Config Property name
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstCPVDBTypeSqlServer">
	<summary>
 config Property value
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.ot.ConfigSequence">
	<summary>
 Driver Sequenze
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.ApplicationName">
	<summary>
 Gets or sets the name of the application.
 </summary>
	<value>The name of the application.</value>
</member><member name="P:OnTrack.ot.CurrentConfigSetName">
	<summary>
 returns the name of the standard Config set to be used
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.CurrentConfigFileName">
	<summary>
 sets or gets the name of the current config file name
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.ConfigFileLocations">
	<summary>
 Gets the configfilelocations.
 </summary>
	<value>The configfilelocations.</value>
</member><member name="P:OnTrack.ot.CurrentSession">
	<summary>
 Property CurrentSession 
 </summary>
	<value></value>
	<returns>the current session object</returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.CurrentDBDriver">
	<summary>
 Gets the primary DB env.
 </summary>
	<value>The primary DB env.</value>
</member><member name="M:OnTrack.ot.ReadConfigFile(System.String,System.String)">
	<summary>
 reads the config parameters from the configfile
 </summary>
	<param name="configFilePath">path where to read config file</param>
	<param name="configFileName">name of the config file to read</param>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetConfigProperty(System.String,System.UInt16,System.String,OnTrack.ot.ConfigSequence)">
	<summary>
 Gets the Property of a config set. if configsetname is ommitted then check currentconfigset and the global one
 </summary>
	<param name="name">name of property</param>
	<returns>object of the property</returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.ConfigSetNamesToSelect">
	<summary>
 returns a list of selectable config set names without global
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.ConfigSetNames">
	<summary>
 returns a list of ConfigSetnames
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.HasConfigProperty(System.String,System.String)">
	<summary>
 has the config set the named property
 </summary>
	<param name="name">name of property</param>
	<returns>return true</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.RetrieveConfigProperties(System.Boolean)">
	<summary>
 retrieve the Config parameters of OnTrack and write it to the PropertyBag
 </summary>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.Errorlog">
	<summary>
 returns the otdb errorlog or nothing
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.IsInitialized">
	<summary>
 Gets or sets the OTD bis initialized.
 </summary>
	<value>The OTD bis initialized.</value>
</member><member name="P:OnTrack.ot.CurrentConnection(System.Boolean,OnTrack.otAccessRight,System.String,System.String)">
	<summary>
 Gets or sets the O TDB connection.
 </summary>
	<value>The O TDB connection.</value>
</member><member name="P:OnTrack.ot.IsConnected">
	<summary>
 return True if the Current Connection exists to the database
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.UsedConfigFileLocation">
	<summary>
 gets the used location for the config file location
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.Username">
	<summary>
 returns Current Username in the current connection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetDataObjectType(System.String)">
	<summary>
 Retrieves the Type for a tableID or nothing if it fails
 </summary>
	<param name="tableid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.Initialize(System.Boolean)">
	<summary>
 Initialize the OTDB Envirormenent
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetDBParameter(System.String,System.Boolean)">
	<summary>
 retrieve a DB Parameter from Ontrack from the central core module
 </summary>
	<param name="name"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.SetDBParameter(System.String,System.Object,System.Boolean,System.Boolean)">
	<summary>
 sets a DB Parameter (in the DB) from the central core module
 </summary>
	<param name="name"></param>
	<param name="value"></param>
	<param name="updateOnly"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetTableStore(System.String,System.Boolean)">
	<summary>
 returns a TableStore for the id from the central OnTrack Core Module
 </summary>
	<param name="tableid"></param>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.AddErrorToLog(OnTrack.CoreError@)">
	<summary>
 Add Error Message to the ErrorLog of the Current Session
 </summary>
	<param name="otdberror">clsOTDBError object</param>
	<returns>true if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetLastError">
	<summary>
 returns the most recent error from error log or nothing
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.CoreMessageHandler(System.Boolean,System.Exception,System.Object,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,OnTrack.otCoreMessageType,OnTrack.clsOTDBMessagelog@,System.String)">
	<summary>
 central error handler .. all messages and error conditions are fed here
 </summary>
	<param name="SHOWMSGBOX"></param>
	<param name="EXCEPTION"></param>
	<param name="ARG1"></param>
	<param name="SUBNAME"></param>
	<param name="TABLENAME"></param>
	<param name="ENTRYNAME"></param>
	<param name="message"></param>
	<param name="break"></param>
	<param name="NoOTDBAvailable"></param>
	<param name="messagetype"></param>
	<param name="MSGLOG"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Cache.RegisterCacheFor(System.String)">
	<summary>
 register an ObjectTag for Cache
 </summary>
	<param name="ObjectTag"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Cache.UnregisterCacheFor(System.String)">
	<summary>
 unregister an object for the cache
 </summary>
	<param name="objectTag"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Cache.AddToCache(System.String,System.Object@,System.Object@,System.Boolean)">
	<summary>
 overload aRecord with data from the local Application data container
 </summary>
	<param name="objectTag"></param>
	<param name="key"></param>
	<param name="theOBJECT"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETDBDriver.#ctor(System.String,OnTrack.Session@)">
	<summary>
 Constructor
 </summary>
	<param name="ID">an ID for this driver</param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.clsADONETDBDriver.OnTrackDataSet">
	<summary>
 Gets the on track data set.
 </summary>
	<value>The on track data set.</value>
</member><member name="P:OnTrack.Database.clsADONETDBDriver.IsInitialized">
	<summary>
 Gets the is initialized.
 </summary>
	<value>The is initialized.</value>
</member><member name="M:OnTrack.Database.clsADONETDBDriver.Reset">
	<summary>
 reset the Driver
 </summary>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETDBDriver.HasTable(System.String,System.Object@)">
	<summary>
 returns True if data store has the tablename
 </summary>
	<param name="tablename"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETDBDriver.GetTable(System.String,System.Boolean,System.Boolean,System.Object@,System.Object@)">
	<summary>
 Gets the table.
 </summary>
	<param name="tablename">The tablename.</param>
	<param name="createOnMissing">The create on missing.</param>
	<param name="addToSchemaDir">The add to schema dir.</param>
	<param name="NativeConnection">The native connection.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.clsADONETDBDriver.GetIndex(System.Object@,System.String@,System.Collections.Generic.List{System.String}@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Gets the index.
 </summary>
	<param name="nativeTABLE">The native TABLE.</param>
	<param name="indexname">The indexname.</param>
	<param name="ColumnNames">The column names.</param>
	<param name="PrimaryKey">The primary key.</param>
	<param name="forceCreation">The force creation.</param>
	<param name="createOnMissing">The create on missing.</param>
	<param name="addToSchemaDir">The add to schema dir.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.clsADONETDBDriver.HasColumn(System.String,System.String,System.Object@)">
	<summary>
 returns True if tablename has the column
 </summary>
	<param name="tablename"></param>
	<param name="columnname"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETDBDriver.GetColumn(System.Object,OnTrack.Database.ormFieldDescription,System.Boolean,System.Boolean)">
	<summary>
 Gets the column.
 </summary>
	<param name="nativeTABLE">The native TABLE.</param>
	<param name="aDBDesc">A DB desc.</param>
	<param name="createOnMissing">The create on missing.</param>
	<param name="addToSchemaDir">The add to schema dir.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.clsADONETDBDriver.GetTargetTypeFor(OnTrack.Database.otFieldDataType)">
	<summary>
 returns the target type for a OTDB FieldType - MAPPING
 </summary>
	<param name="type"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.clsADONETDBDriver.VerifyOnTrackDatabase(System.Boolean,System.Boolean)">
	<summary>
 Checks if the most important objects are here
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETDBDriver.GetUserValidation(System.String,System.Boolean,System.Object@)">
	<summary>
 Gets the def user.
 </summary>
	<param name="Username">The username.</param>
	<param name="SelectAnonymous"></param>
	<param name="nativeConnection">The native connection.</param>
	<returns></returns>
</member><member name="P:OnTrack.Database.InternalConnectionEventArgs.NativeConnection">
	<summary>
 Gets the native connection.
 </summary>
	<value>The native connection.</value>
</member><member name="P:OnTrack.Database.InternalConnectionEventArgs.Connection">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="P:OnTrack.Database.clsADONETConnection.IsNativeInternalLocked">
	<summary>
 Gets or sets the is native internal locked.
 </summary>
	<value>The is native internal locked.</value>
</member><member name="P:OnTrack.Database.clsADONETConnection.NativeConnection">
	<summary>
 Gets the native connection.
 </summary>
	<value>The native connection.</value>
</member><member name="P:OnTrack.Database.clsADONETConnection.IsConnected">
	<summary>
 Gets the is connected.
 </summary>
	<value>The is connected.</value>
</member><member name="M:OnTrack.Database.clsADONETConnection.Disconnect">
	<summary>
 Disconnects this instance of the connection with raising events
 </summary>
	<returns></returns>
</member><member name="P:OnTrack.Database.clsADONETConnection.NativeInternalConnection">
	<summary>
 gets the native internal connection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETConnection.createNewNativeConnection">
	<summary>
 create a new native Connection (not connected)
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETConnection.Connect(System.Boolean,OnTrack.otAccessRight,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Connects the specified FORCE.
 </summary>
	<param name="FORCE">The FORCE.</param>
	<param name="AccessRequest">The access request.</param>
	<param name="OTDBUsername">The OTDB username.</param>
	<param name="OTDBPassword">The OTDB password.</param>
	<param name="exclusive">The exclusive.</param>
	<param name="notInitialize">The not initialize.</param>
	<returns></returns>
</member><member name="P:OnTrack.Database.clsADONETTableSchema.ColumnDescription.CharachterOctetLength">
	<summary>
 Gets or sets the length of the charachter octet.
 </summary>
	<value>The length of the charachter octet.</value>
</member><member name="P:OnTrack.Database.clsADONETTableSchema.ColumnDescription.DateTimePrecision">
	<summary>
 Gets or sets the date time precision.
 </summary>
	<value>The date time precision.</value>
</member><member name="P:OnTrack.Database.clsADONETTableSchema.ColumnDescription.NumericScale">
	<summary>
 Gets or sets the numeric scale.
 </summary>
	<value>The numeric scale.</value>
</member><member name="P:OnTrack.Database.clsADONETTableSchema.ColumnDescription.NumericPrecision">
	<summary>
 Gets or sets the numeric precision.
 </summary>
	<value>The numeric precision.</value>
</member><member name="P:OnTrack.Database.clsADONETTableSchema.ColumnDescription.Catalog">
	<summary>
 Gets or sets the catalog.
 </summary>
	<value>The catalog.</value>
</member><member name="P:OnTrack.Database.clsADONETTableSchema.ColumnDescription.DataType">
	<summary>
 Gets or sets the type of the data.
 </summary>
	<value>The type of the data.</value>
</member><member name="P:OnTrack.Database.clsADONETTableSchema.ColumnDescription.Default">
	<summary>
 Gets or sets the default.
 </summary>
	<value>The default.</value>
</member><member name="P:OnTrack.Database.clsADONETTableSchema.ColumnDescription.HasDefault">
	<summary>
 Gets or sets the has default.
 </summary>
	<value>The has default.</value>
</member><member name="P:OnTrack.Database.clsADONETTableSchema.ColumnDescription.CharacterMaxLength">
	<summary>
 Gets or sets the length of the character max.
 </summary>
	<value>The length of the character max.</value>
</member><member name="P:OnTrack.Database.clsADONETTableSchema.ColumnDescription.Ordinal">
	<summary>
 Gets or sets the ordinal.
 </summary>
	<value>The ordinal.</value>
</member><member name="P:OnTrack.Database.clsADONETTableSchema.ColumnDescription.IsNullable">
	<summary>
 Gets or sets the is nullable.
 </summary>
	<value>The is nullable.</value>
</member><member name="P:OnTrack.Database.clsADONETTableSchema.ColumnDescription.ColumnName">
	<summary>
 Gets or sets the name of the column.
 </summary>
	<value>The name of the column.</value>
</member><member name="P:OnTrack.Database.clsADONETTableSchema.ColumnDescription.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="M:OnTrack.Database.clsADONETTableSchema.reset">
	<summary>
 resets the TableSchema
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.clsADONETTableSchema.TableID">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="M:OnTrack.Database.clsADONETTableSchema.GetColumnDescription(System.UInt16)">
	<summary>
 get the ColumnDescription of Field 
 </summary>
	<param name="Index">Index no</param>
	<returns>ColumnDescription</returns>
	<remarks>Returns Nothing on range bound exception</remarks>
</member><member name="M:OnTrack.Database.clsADONETTableSchema.GetCommand(System.String,OnTrack.Database.clsADONETTableSchema.CommandType)">
	<summary>
 return a Command
 </summary>
	<param name="indexname"></param>
	<param name="commandtype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETTableSchema.CreateNativeDBParameter">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETTableSchema.CreateNativeDBCommand">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETTableSchema.IsNativeDBTypeOfVar(System.Object)">
	<summary>
	</summary>
	<param name="type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETTableSchema.BuildCommand(System.String,OnTrack.Database.clsADONETTableSchema.CommandType,System.Data.IDbConnection@)">
	<summary>
 buildcommand builds per Indexname and commandtype the Command and prepare it
 </summary>
	<param name="commandtype">type of clsADONETTableSchema.commandtype</param>
	<param name="indexname">name of the index</param>
	<returns>the IDBCommand </returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.clsADONETTableSchema">
	<summary>
 CLASS describes the schema per table of the database itself
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETTableStore.IsCacheInitialized">
	<summary>
 if Cache is Initialized and running 
 </summary>
	<returns>return true</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETTableStore.InitializeCache(System.Boolean)">
	<summary>
 Initialize Cache 
 </summary>
	<returns>true if successfull </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETTableStore.CreateNativeDBCommand(System.String,System.Data.IDbConnection@)">
	<summary>
 specific Command
 </summary>
	<param name="commandstr"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETTableStore.DelRecordByPrimaryKey(System.Object[]@,System.Boolean)">
	<summary>
 deletes a Record in the database by Primary key
 </summary>
	<param name="primaryKeyArray">Array of Objects as Primary Key</param>
	<param name="silent"></param>
	<returns>true if successfull </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETTableStore.GetRecordByPrimaryKey(System.Object[]@,System.Boolean)">
	<summary>
 GetRecordbyPrimaryKey returns a clsOTDBRecord object by the Primarykey from the Database
 </summary>
	<param name="primaryKeyArray">PrimaryKey Array</param>
	<param name="silent"></param>
	<returns>returns Nothing if not found otherwise a clsOTDBRecord</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETTableStore.UpdateDBDataTable(System.Data.IDbDataAdapter@,System.Data.DataTable@)">
	<summary>
 Update a Datatable with the adapter
 </summary>
	<param name="datatable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETTableStore.GetRecordsBySqlCommand(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@)">
	<summary>
 returns a collection of records selected by this helper command which creates an SqlCommand with an ID or reuse one
 </summary>
	<param name="ID"></param>
	<param name="wherestr"></param>
	<param name="fullsqlstr"></param>
	<param name="innerjoin"></param>
	<param name="orderby"></param>
	<param name="silent"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.clsADONETTableStore.PersistCache(OnTrack.Database.ormRecord@,System.DateTime,System.Boolean)">
	<summary>
 persists aRecord to the database if aRecord is created or loaded
 </summary>
	<param name="record">clsOTDBRecord</param>
	<param name="timestamp">the Timestamp to be used for the ChangedOn or CreatedOn</param>
	<param name="silent">no messages</param>
	<returns>true if successfull and written, false if error or no changes</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBCalendarEntry.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.clsOTDBCalendarEntry.Timestamp">
	<summary>
 Timestamp entry of the calendar
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.clsOTDBCalendarEntry.Datevalue">
	<summary>
 returns or sets the date portion of the timestamp
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.clsOTDBCalendarEntry.Timevalue">
	<summary>
 returns the Timeportion
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBCalendarEntry.Initialize">
	<summary>
 Initialize the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBCalendarEntry.Infuse(OnTrack.Database.ormRecord@)">
	<summary>
 Infuse the object by the record
 </summary>
	<param name="record"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBCalendarEntry.LoadBy(System.String,System.Int64)">
	<summary>
 loads and infuses the object
 </summary>
	<param name="Name"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBCalendarEntry.CreateSchema(System.Boolean)">
	<summary>
 create persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBCalendarEntry.Persist(System.DateTime)">
	<summary>
 persist the object to the tablestore
 </summary>
	<param name="timestamp">timestamp to use</param>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBCalendarEntry.All">
	<summary>
 Return a Collection of all Calendar Entries
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBCalendarEntry.AvailableDays(System.DateTime,System.DateTime,System.String)">
	<summary>
 Returns the number of available days between two dates
 </summary>
	<param name="fromdate"></param>
	<param name="untildate"></param>
	<param name="name">default calendar</param>
	<returns>days in long</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBCalendarEntry.NextAvailableDate(System.DateTime,System.Int32,System.String)">
	<summary>
 returnss the next available date from a date in no of  days
 </summary>
	<param name="fromdate">From Date</param>
	<param name="noDays">number of days</param>
	<param name="Name">default calendar</param>
	<returns>next date</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBCalendarEntry.IsAvailableOn(System.DateTime,System.String)">
	<summary>
 isAvailable looks for otDayEntries showing availibility
 </summary>
	<param name="refdate"></param>
	<param name="Name">default calendar</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBCalendarEntry.AllByDate(System.DateTime,System.String)">
	<summary>
 returns all calendar entries by refence date
 </summary>
	<param name="refDate"></param>
	<param name="name"></param>
	<returns>a collection of objects</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBCalendarEntry.GenerateDays(System.DateTime,System.DateTime,System.String)">
	<summary>
 Initialize the calendar with dates from a date until a date
 </summary>
	<param name="fromdate">from date to initalize</param>
	<param name="untildate">to date </param>
	<param name="name">name of the calendar (optional)</param>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.clsOTDBCalendarEntry.Create(System.String,System.Int64)">
	<summary>
 Creates an persistable calendar entry
 </summary>
	<param name="name">name of calendar</param>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.clsOTDBCalendarEntry">
	<summary>
 Calendar Entry Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Configurables.clsOTDBDefConfigurationItem.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Configurables.clsOTDBConfigurable.RunXPreCheck(OnTrack.XChange.XEnvelope@)">
	<summary>
 run the XPrecheck on the Envelope and Object
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Configurables.clsOTDBConfigurable.RunXChange(OnTrack.XChange.XEnvelope@)">
	<summary>
 run the XChange with the envelope
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormColumnMappingAttribute.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormColumnMappingAttribute.TableID">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="P:OnTrack.Database.ormColumnMappingAttribute.Fieldname">
	<summary>
 Gets or sets the fieldname.
 </summary>
	<value>The fieldname.</value>
</member><member name="T:OnTrack.Database.ormColumnMappingAttribute">
	<summary>
 OTDBDataObject Attribute links a class variable to a datastore table and field
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormPropertyMappingAttribute.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormPropertyMappingAttribute.TableID">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="P:OnTrack.Database.ormPropertyMappingAttribute.Fieldname">
	<summary>
 Gets or sets the fieldname.
 </summary>
	<value>The fieldname.</value>
</member><member name="T:OnTrack.Database.ormPropertyMappingAttribute">
	<summary>
 Mapping a instance field member to a fieldname of a schema description
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.AddDomainID">
	<summary>
 Gets or sets the add domain ID flag.
 </summary>
	<value>The add domain ID flag.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.AddDeleteFieldBehavior">
	<summary>
 sets or gets the add deletefield flag. This will add a field for deletion the record to the schema.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.AddSpareFields">
	<summary>
 sets or gets the add ParameterField flag. 
 This will add extra fields for additional parameters (reserve and spare) to the data object.
 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.Name">
	<summary>
 Gets or sets the name.
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnNames">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnName1">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnName2">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnName3">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnName4">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnName5">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="T:OnTrack.Database.ormSchemaIndexAttribute">
	<summary>
 Attributes for Schema Generation of an Index
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaColumnAttribute.Posordinal">
	<summary>
 Gets or sets the pos ordinal.
 </summary>
	<value>The pos ordinal.</value>
</member><member name="P:OnTrack.Database.ormSchemaColumnAttribute.DefaultValue">
	<summary>
 Gets or sets the default value.
 </summary>
	<value>The default value.</value>
</member><member name="P:OnTrack.Database.ormSchemaColumnAttribute.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormSchemaColumnAttribute.IsArray">
	<summary>
 Gets or sets the is array flag. data field will be transformed into array
 </summary>
	<value>The is array.</value>
</member><member name="P:OnTrack.Database.ormSchemaColumnAttribute.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormSchemaColumnAttribute.SpareFieldTag">
	<summary>
 set or gets if this field is a spare field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaColumnAttribute.Title">
	<summary>
 Gets or sets the title.
 </summary>
	<value>The title.</value>
</member><member name="P:OnTrack.Database.ormSchemaColumnAttribute.TableID">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="P:OnTrack.Database.ormSchemaColumnAttribute.Typeid">
	<summary>
 Gets or sets the typeid.
 </summary>
	<value>The typeid.</value>
</member><member name="P:OnTrack.Database.ormSchemaColumnAttribute.Size">
	<summary>
 Gets or sets the size.
 </summary>
	<value>The size.</value>
</member><member name="P:OnTrack.Database.ormSchemaColumnAttribute.Parameter">
	<summary>
 Gets or sets the parameter.
 </summary>
	<value>The parameter.</value>
</member><member name="P:OnTrack.Database.ormSchemaColumnAttribute.IsNullable">
	<summary>
 Gets or sets the is nullable.
 </summary>
	<value>The is nullable.</value>
</member><member name="P:OnTrack.Database.ormSchemaColumnAttribute.PrimaryKeyordinal">
	<summary>
 Gets or sets the primary key ordinal.
 </summary>
	<value>The primary key ordinal.</value>
</member><member name="P:OnTrack.Database.ormSchemaColumnAttribute.Relation">
	<summary>
 Gets or sets the relation.
 </summary>
	<value>The relation.</value>
</member><member name="P:OnTrack.Database.ormSchemaColumnAttribute.Aliases">
	<summary>
 Gets or sets the aliases.
 </summary>
	<value>The aliases.</value>
</member><member name="T:OnTrack.Database.ormSchemaColumnAttribute">
	<summary>
 Attribute for Const fields to describe the schema
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.DatabaseDriver">
	<summary>
 Gets or sets the database driver.
 </summary>
	<value>The database driver.</value>
</member><member name="P:OnTrack.Database.ormSqlCommand.NativeCommand">
	<summary>
 set the Native Command
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.SqlText">
	<summary>
 returns the build SQL Statement
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.Type">
	<summary>
 Type of the Sql Command -&gt; Select, Delete etc.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.BuildTextRequired">
	<summary>
 True if the SQL Statement has to be build, false if it has been build
 </summary>
	<value>True</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.Prepared">
	<summary>
 True if the Native sql command is prepared
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlCommand.AddParameter(OnTrack.Database.ormSqlCommandParameter)">
	<summary>
 add a Parameter for the command
 </summary>
	<param name="parameter">a new Parameter</param>
	<returns>true if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlCommand.BuildSqlText">
	<summary>
 builds the SQL text for the Command
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlCommand.Prepare">
	<summary>
 prepares the command
 </summary>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlCommand.IncBuildVersion">
	<summary>
 increase the buildVersion
 </summary>
	<returns>the new build version</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormSqlCommand">
	<summary>
 an neutral SQL Command
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlCommandParameter.#ctor(System.String,OnTrack.Database.otFieldDataType,System.String,System.String,System.Object,System.Boolean)">
	<summary>
 constructor for a Sql Command parameter
 </summary>
	<param name="ID">the ID in the sql statement</param>
	<param name="datatype">datatype </param>
	<param name="fieldname">fieldname </param>
	<param name="tablename">tablename</param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.NotColumn">
	<summary>
 Gets or sets the not column.
 </summary>
	<value>The not column.</value>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.Value">
	<summary>
 Gets or sets the value.
 </summary>
	<value>The value.</value>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.Datatype">
	<summary>
 Gets or sets the datatype.
 </summary>
	<value>The datatype.</value>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.Fieldname">
	<summary>
 Gets or sets the fieldname.
 </summary>
	<value>The fieldname.</value>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.Tablename">
	<summary>
 Gets or sets the fieldname.
 </summary>
	<value>The fieldname.</value>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The name.</value>
</member><member name="T:OnTrack.Database.ormSqlCommandParameter">
	<summary>
 Parameter definition for a SQL Command
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.ResultField.Name">
	<summary>
 Gets or sets the name.
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.ResultField.Type">
	<summary>
 Gets or sets the name.
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.ResultField.Tablestore">
	<summary>
 Gets or sets the Tablestore used
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.ResultField.Tablename">
	<summary>
 Gets or sets the Tablestore / Tablename.
 </summary>
	<value>The name.</value>
</member><member name="M:OnTrack.Database.ormSqlSelectCommand.ResultField.GetHashCode(System.Object)">
	<summary>
 Returns a hash code for the specified object.
 </summary>
	<param name="obj">The <see cref="T:System.Object"/> for which a hash code is
 to be returned.</param>
	<exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/>
 is a reference type and <paramref name="obj"/> is null. </exception>
	<returns>A hash code for the specified object.</returns>
</member><member name="T:OnTrack.Database.ormSqlSelectCommand.ResultField">
	<summary>
 Class for Storing the select result fields per Table(store)
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlSelectCommand.#ctor(System.String)">
	<summary>
 Constructor of the OTDB Select command
 </summary>
	<param name="ID">the unique ID to store it</param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.InnerJoin">
	<summary>
 sets or gets the innerjoin 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.select">
	<summary>
  sets the select part of an Sql Select without SELECT Keyword
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.OrderBy">
	<summary>
 set or gets the orderby string
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.Where">
	<summary>
 sets or gets the wherestr
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.SqlText">
	<summary>
 returns the build SQL Statement
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlSelectCommand.AddTable(System.String,System.Boolean,System.Collections.Generic.List{System.String})">
	<summary>
 Add Table with fields to the Resultfields
 </summary>
	<param name="tableid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlSelectCommand.BuildSqlText">
	<summary>
 builds the SQL text for the Command
 </summary>
	<returns>True if successfull </returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormSqlSelectCommand">
	<summary>
  a flexible Select Command
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDBDriver.Session">
	<summary>
 Gets the session.
 </summary>
	<value>The session.</value>
</member><member name="P:OnTrack.Database.ormDBDriver.DatabaseType">
	<summary>
 returns the OTDBServertype
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDBDriver.ID">
	<summary>
 Gets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormDBDriver.TableSchemaDirectory">
	<summary>
 Gets or sets the table schema directory.
 </summary>
	<value>The table schema directory.</value>
</member><member name="P:OnTrack.Database.ormDBDriver.TableDirectory">
	<summary>
 Gets or sets the table directory.
 </summary>
	<value>The table directory.</value>
</member><member name="P:OnTrack.Database.ormDBDriver.CurrentConnection">
	<summary>
 Gets or sets the connection.
 </summary>
	<value>The connection.</value>
</member><member name="M:OnTrack.Database.ormDBDriver.#ctor(System.String,OnTrack.Session@)">
	<summary>
 constructor
 </summary>
	<param name="session"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDBDriver.HasSqlCommand(System.String)">
	<summary>
 checks if SqlCommand is in Store of the driver
 </summary>
	<param name="id">id of the command</param>
	<remarks></remarks>
	<returns>True if successful</returns>
</member><member name="M:OnTrack.Database.ormDBDriver.StoreSqlCommand(OnTrack.Database.iormSqlCommand@)">
	<summary>
 Store the Command by its ID - replace if existing
 </summary>
	<param name="sqlCommand">a iOTDBSqlCommand</param>
	<remarks></remarks>
	<returns>true if successful</returns>
</member><member name="M:OnTrack.Database.ormDBDriver.RetrieveSqlCommand(System.String)">
	<summary>
 Retrieve the Command from Store
 </summary>
	<param name="id">id of the command</param>
	<remarks></remarks>
	<returns>a iOTDBSqlCommand</returns>
</member><member name="M:OnTrack.Database.ormDBDriver.RegisterConnection(OnTrack.Database.iormConnection@)">
	<summary>
 Register a connection at the Driver to be used
 </summary>
	<param name="connection">a iOTDBConnection</param>
	<returns>true if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDBDriver.OnDisconnect">
	<summary>
 Handles the onDisconnect Event of the Driver
 </summary>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDBDriver.VerifyOnTrackDatabase(System.Boolean,System.Boolean)">
	<summary>
 verifyOnTrack
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDBDriver.AssignNativeDBParameter(System.String,OnTrack.Database.otFieldDataType,System.Int64,System.Object)">
	<summary>
 create an assigned Native DBParameter to provided name and type
 </summary>
	<param name="parametername"></param>
	<param name="datatype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDBDriver.GetTargetTypeFor(OnTrack.Database.otFieldDataType)">
	<summary>
 returns the target type for a OTDB FieldType - MAPPING
 </summary>
	<param name="type"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDBDriver.Convert2DBData(System.Object,System.Int64,System.Int64,System.Boolean@,System.String)">
	<summary>
  converts value to targetType of the native DB Driver
 </summary>
	<param name="value"></param>
	<param name="targetType"></param>
	<param name="maxsize"></param>
	<param name="abostrophNecessary"></param>
	<param name="fieldname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDBDriver.HasTable(System.String,System.Object@)">
	<summary>
 returns True if data store has the table
 </summary>
	<param name="tablename"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDBDriver.GetTable(System.String,System.Boolean,System.Boolean,System.Object@,System.Object@)">
	<summary>
 Gets the table.
 </summary>
	<param name="tablename">The tablename.</param>
	<param name="createOrAlter">The create on missing.</param>
	<param name="addToSchemaDir">The add to schema dir.</param>
	<param name="NativeConnection">The native connection.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDBDriver.GetIndex(System.Object@,System.String@,System.Collections.Generic.List{System.String}@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Gets the index.
 </summary>
	<param name="nativeTABLE">The native TABLE.</param>
	<param name="indexname">The indexname.</param>
	<param name="ColumnNames">The column names.</param>
	<param name="PrimaryKey">The primary key.</param>
	<param name="forceCreation">The force creation.</param>
	<param name="createOrAlter">The create on missing.</param>
	<param name="addToSchemaDir">The add to schema dir.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDBDriver.HasColumn(System.String,System.String,System.Object@)">
	<summary>
 returns True if the column exists in the table 
 </summary>
	<param name="tablename"></param>
	<param name="columnname"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDBDriver.GetColumn(System.Object,OnTrack.Database.ormFieldDescription,System.Boolean,System.Boolean)">
	<summary>
 Gets the column.
 </summary>
	<param name="nativeTABLE">The native TABLE.</param>
	<param name="aDBDesc">A DB desc.</param>
	<param name="createOrAlter">The create on missing.</param>
	<param name="addToSchemaDir">The add to schema dir.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDBDriver.CreateDBUserDefTable(System.Object@)">
	<summary>
 Create the User Definition Table
 </summary>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDBDriver.CreateDBParameterTable(System.Object@)">
	<summary>
 create the DB Parameter Table
 </summary>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDBDriver.SetDBParameter(System.String,System.Object,System.Object@,System.Boolean,System.Boolean)">
	<summary>
 Sets the DB parameter.
 </summary>
	<param name="Parametername">The parametername.</param>
	<param name="Value">The value.</param>
	<param name="NativeConnection">The native connection.</param>
	<param name="UpdateOnly">The update only.</param>
	<param name="silent">The silent.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDBDriver.GetDBParameter(System.String,System.Object@,System.Boolean)">
	<summary>
 Gets the DB parameter.
 </summary>
	<param name="PARAMETERNAME">The PARAMETERNAME.</param>
	<param name="nativeConnection">The native connection.</param>
	<param name="silent">The silent.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDBDriver.GetUserValidation(System.String,System.Boolean,System.Object@)">
	<summary>
 Gets the def user.
 </summary>
	<param name="Username">The username.</param>
	<param name="nativeConnection">The native connection.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDBDriver.CreateNativeTableStore(System.String,System.Boolean)">
	<summary>
 create a tablestore 
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDBDriver.CreateNativeTableSchema(System.String)">
	<summary>
 create a tableschema
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDBDriver.GetTableStore(System.String,System.Boolean)">
	<summary>
 Gets the table store.
 </summary>
	<param name="tableID">The tablename.</param>
	<param name="Force">The force.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDBDriver.RunSqlStatement(System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@,System.Boolean,System.Object)">
	<summary>
 Runs the SQL Command
 </summary>
	<param name="sqlcmdstr"></param>
	<param name="parameters"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDBDriver.CreateNativeDBCommand(System.String,System.Data.IDbConnection)">
	<summary>
 Create a Native IDBCommand (Sql Command)
 </summary>
	<param name="cmd"></param>
	<param name="aNativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRecord.IsTableSet">
	<summary>
 Gets the is table set.
 </summary>
	<value>The is table set.</value>
</member><member name="P:OnTrack.Database.ormRecord.IsCreated">
	<summary>
 set if this record is a new Record in the databse
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRecord.IsUnknown">
	<summary>
 set if the record state is unkown if new or load
 </summary>
	<value>The is unknown.</value>
</member><member name="P:OnTrack.Database.ormRecord.IsChanged">
	<summary>
 Gets or sets the is changed.
 </summary>
	<value>The is changed.</value>
</member><member name="P:OnTrack.Database.ormRecord.IsLoaded">
	<summary>
 set if record is loaded
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRecord.TableID">
	<summary>
  the TableID to the Record
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRecord.TableStore">
	<summary>
 returns the tablestore or nothing
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.CheckStatus">
	<summary>
 checkStatus if loaded or created by checking if Record exists in Table. Sets the isChanged / isLoaded Property
 </summary>
	<returns>true if successfully checked</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.SetTable(System.String,OnTrack.Database.iormDBDriver,OnTrack.Database.iormDataStore,System.Boolean,System.Boolean)">
	<summary>
 Assign a TableStore to this Record
 </summary>
	<param name="TableID">Name of the Table</param>
	<param name="ForceReload">Forece to reaassign</param>
	<returns>True if ssuccessfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.Delete">
	<summary>
 Deletes the Record in the Database
 </summary>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.Keys">
	<summary>
 retus a list of the primaryKeys
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.IsValueChanged(System.Object)">
	<summary>
 returns True if Value of anIndex is Changed
 </summary>
	<param name="anIndex">index in Number 1..n or fieldname</param>
	<returns>True on Change</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.Set(System.Object[]@,System.Object[]@)">
	<summary>
 sets the record to an array
 </summary>
	<param name="array"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormRecord">
	<summary>
 represents a record data tuple for to be stored and retrieved in a data store
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormConnection.#ctor(System.String,OnTrack.Database.iormDBDriver,OnTrack.Session@,OnTrack.ot.ConfigSequence)">
	<summary>
 constructor of Connection
 </summary>
	<param name="id"></param>
	<param name="databasedriver"></param>
	<param name="session"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormConnection.ID">
	<summary>
 Gets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormConnection.Useseek">
	<summary>
 Gets the use seek.
 </summary>
	<value>The use seek.</value>
</member><member name="P:OnTrack.Database.ormConnection.Sequence">
	<summary>
 returns the Sequence of the Database Configuration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormConnection.Session">
	<summary>
 Gets the session.
 </summary>
	<value>The session.</value>
</member><member name="P:OnTrack.Database.ormConnection.DatabaseDriver">
	<summary>
 Gets or sets the DatabaseEnvirorment.
 </summary>
	<value>iOTDBDatabaseEnvirorment</value>
</member><member name="P:OnTrack.Database.ormConnection.ErrorLog">
	<summary>
 Gets the error log.
 </summary>
	<value>The error log.</value>
</member><member name="P:OnTrack.Database.ormConnection.UILogin">
	<summary>
 Gets or sets the UI login.
 </summary>
	<value>The UI login.</value>
</member><member name="P:OnTrack.Database.ormConnection.Access">
	<summary>
 Gets or sets the access.
 </summary>
	<value>The access.</value>
</member><member name="P:OnTrack.Database.ormConnection.OTDBUser">
	<summary>
 Gets or sets the user.
 </summary>
	<value>The user.</value>
</member><member name="P:OnTrack.Database.ormConnection.Dbpassword">
	<summary>
 Gets or sets the dbpassword.
 </summary>
	<value>The dbpassword.</value>
</member><member name="P:OnTrack.Database.ormConnection.Dbuser">
	<summary>
 Gets or sets the dbuser.
 </summary>
	<value>The dbuser.</value>
</member><member name="P:OnTrack.Database.ormConnection.DBName">
	<summary>
 Gets or sets the name.
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.ormConnection.PathOrAddress">
	<summary>
 Gets or sets the path.
 </summary>
	<value>The path.</value>
</member><member name="P:OnTrack.Database.ormConnection.Connectionstring">
	<summary>
 Gets or sets the connectionstring.
 </summary>
	<value>The connectionstring.</value>
</member><member name="P:OnTrack.Database.ormConnection.Databasetype">
	<summary>
 Gets or sets the databasetype.
 </summary>
	<value>The databasetype.</value>
</member><member name="P:OnTrack.Database.ormConnectionEventArgs.DomainID">
	<summary>
 Gets or sets the domain.
 </summary>
	<value>The domain.</value>
</member><member name="P:OnTrack.Database.ormConnectionEventArgs.Connection">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="T:OnTrack.Database.ormConnectionEventArgs">
	<summary>
 defines the Connection Event Arguments
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.ColumnName">
	<summary>
 Name in the table (data store)
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.ID">
	<summary>
 ID for XChange Manager
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Title">
	<summary>
 Default Title to be used on column heads
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Description">
	<summary>
 Description about the Field
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Aliases">
	<summary>
 Aliases to be used for XChange Manager (Array)
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Datatype">
	<summary>
 OTDB Datatype of the Field
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Parameter">
	<summary>
 Parameters to be used
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Tablename">
	<summary>
 Tablename of the Datastore
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Relation">
	<summary>
 Relation Description as String Array
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Size">
	<summary>
 Size
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.IsNullable">
	<summary>
 Is Nullable
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.IsArray">
	<summary>
 Is Transformed to an Array
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.DefaultValue">
	<summary>
 DefaultValue of the Field
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Version">
	<summary>
 Version count
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.ordinalPosition">
	<summary>
 Position in the Record
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.SpareFieldTag">
	<summary>
 if set true this Field is a spare field
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormCompoundDesc.compound_Tablename">
	<summary>
 the tablename in the datastore of the compound
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormCompoundDesc.compound_Relation">
	<summary>
 relation condition fields
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormCompoundDesc.compound_IDFieldname">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormCompoundDesc.compound_ValueFieldname">
	<summary>
 fieldname which has the ID of the compound field as value
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.TableStore">
	<summary>
 Gets the table store.
 </summary>
	<value>The table store.</value>
</member><member name="P:OnTrack.Database.ormDataObject.ObjectDefinition">
	<summary>
 returns the object definition associated with this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.TableSchema">
	<summary>
 returns the tableschema associated with this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.DomainID">
	<summary>
 Gets or sets the domain ID.
 </summary>
	<value>The domain ID.</value>
</member><member name="P:OnTrack.Database.ormDataObject.DBDriver">
	<summary>
 sets or gets the DBDriver for the data object to use
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.IsInitialized">
	<summary>
 Gets or sets the PS is initialized.
 </summary>
	<value>The PS is initialized.</value>
</member><member name="P:OnTrack.Database.ormDataObject.IsDeleted">
	<summary>
 Gets or sets the isDeleted.
 </summary>
	<value>The isDeleted.</value>
</member><member name="P:OnTrack.Database.ormDataObject.IsChanged">
	<summary>
 Gets or sets the PS is changed.
 </summary>
	<value>The PS is changed.</value>
</member><member name="P:OnTrack.Database.ormDataObject.IsLoaded">
	<summary>
 Gets or sets the PS is loaded.
 </summary>
	<value>The PS is loaded.</value>
</member><member name="P:OnTrack.Database.ormDataObject.IsCreated">
	<summary>
 Gets or sets the PS is created.
 </summary>
	<value>The PS is created.</value>
</member><member name="M:OnTrack.Database.ormDataObject.Unload">
	<summary>
 unload the Dataobject from the datastore
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.Record">
	<summary>
 Gets or sets the OTDB record.
 </summary>
	<value>The OTDB record.</value>
</member><member name="M:OnTrack.Database.ormDataObject.MergeRecord(OnTrack.Database.ormRecord)">
	<summary>
 Merge Values of an record in own record
 </summary>
	<param name="record"></param>
	<returns>True if successfull </returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.SavedToHost">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.SerializeWithHostApplication">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.TableID">
	<summary>
 gets the TableID of the persistency table
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.CreatedOn">
	<summary>
 gets the Creation date in the persistence store
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.UpdatedOn">
	<summary>
 gets the last update date in the persistence store
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.DeletedOn">
	<summary>
 gets the deletion date in the persistence store
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.#ctor(System.String,OnTrack.Database.iormDBDriver)">
	<summary>
 constructor for ormDataObject
 </summary>
	<param name="tableid"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Finialize">
	<summary>
 clean up with the object
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Initialize">
	<summary>
 initialize the data object
 </summary>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.LoadDataObjectBy``1(System.Object[],OnTrack.Database.iormDBDriver)">
	<summary>
 load DataObject by Type and Primary Key-Array
 </summary>
	<typeparam name="T"></typeparam>
	<param name="pkArray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Persist(System.DateTime,System.Boolean)">
	<summary>
 Persist the object to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.All``1(System.String,System.String,System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter})">
	<summary>
 Static Function ALL returns a Collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.CreateSchema``1(System.Boolean,System.Boolean)">
	<summary>
 create the schema for this object by reflection
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.CreateDataObjectBy``1(System.Object[]@,System.Boolean)">
	<summary>
 create a persistable dataobject of type T 
 </summary>
	<typeparam name="T"></typeparam>
	<param name="pkArray"></param>
	<param name="checkUnique"></param>
	<returns>the iotdbdataobject or nothing (if checkUnique)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.CloneDataObject``1(OnTrack.Database.iotCloneable{``0},System.Object[])">
	<summary>
 clone a dataobject with a new pkarray. return nothing if fails
 </summary>
	<typeparam name="T"></typeparam>
	<param name="cloneobject"></param>
	<param name="newpkarray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Retrieve``1(System.Object[],OnTrack.Database.iormDBDriver,System.Boolean)">
	<summary>
 Retrieve a data object from the cache or load it
 </summary>
	<typeparam name="T"></typeparam>
	<param name="pkArray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Undelete">
	<summary>
 Undelete the data object
 </summary>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Delete">
	<summary>
 Delete the object and its persistancy
 </summary>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Infuse(OnTrack.Database.iormPersistable@,OnTrack.Database.ormRecord@)">
	<summary>
 infuse a dataobject by a record - use reflection
 </summary>
	<param name="dataobject"></param>
	<param name="record"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.FeedRecord">
	<summary>
 Feed the record belonging to the data object
 </summary>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.FeedRecord(OnTrack.Database.iormPersistable@,OnTrack.Database.ormRecord@)">
	<summary>
 feed the record from the field of an data object - use reflection of attribute otfieldname
 </summary>
	<param name="dataobject"></param>
	<param name="record"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Infuse(OnTrack.Database.ormRecord@)">
	<summary>
 infuses a dataobject by a record
 </summary>
	<param name="Record">a fixed clsOTDBRecord with the persistence data</param>
	<returns>true if successfull</returns>
	<remarks>might be overwritten by class descendants but make sure that you call mybase.infuse</remarks>
</member><member name="T:OnTrack.Database.ormDataObject">
	<summary>
 a persistable base object in a data store
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.#ctor(OnTrack.Database.iormConnection,System.String,System.Boolean)">
	<summary>
 constuctor
 </summary>
	<param name="connection"></param>
	<param name="tableID"></param>
	<param name="force"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.CreateUniquePkValue(System.Object[]@)">
	<summary>
 creates an unique key value. provide primary key array in the form {field1, field2, nothing}. "Nothing" will be increased.
 </summary>
	<param name="pkArray"></param>
	<remarks></remarks>
	<returns>True if successfull new value</returns>
</member><member name="M:OnTrack.Database.ormTableStore.Refresh(System.Boolean)">
	<summary>
 Refresh
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableStore.TableID">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="P:OnTrack.Database.ormTableStore.Connection">
	<summary>
 Gets or sets the connection.
 </summary>
	<value>The connection.</value>
</member><member name="P:OnTrack.Database.ormTableStore.TableSchema">
	<summary>
 Gets or sets the DB table schema.
 </summary>
	<value>The DB table schema.</value>
</member><member name="M:OnTrack.Database.ormTableStore.GetProperty(System.String)">
	<summary>
 Gets the Property of a Tablestore
 </summary>
	<param name="name">name of property</param>
	<returns>object of the property</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.HasProperty(System.String)">
	<summary>
 has Tablestore the named property
 </summary>
	<param name="name">name of property</param>
	<returns>return true</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.GetRecordsBySql(System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@)">
	<summary>
 Gets the records by SQL.
 </summary>
	<param name="wherestr">The wherestr.</param>
	<param name="fullsqlstr">The fullsqlstr.</param>
	<param name="innerjoin">The innerjoin.</param>
	<param name="orderby">The orderby.</param>
	<param name="silent">The silent.</param>
	<returns></returns>
</member><member name="P:OnTrack.Database.ormTableStore.IsLinqAvailable">
	<summary>
 Is Linq in this TableStore available
 </summary>
	<value>True if available</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.GetRecordsbySQlCommand(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@)">
	<summary>
 gets a List of clsOTDBRecords by SQLCommand
 </summary>
	<param name="id">ID of the Command to store</param>
	<param name="wherestr"></param>
	<param name="fullsqlstr"></param>
	<param name="innerjoin"></param>
	<param name="orderby"></param>
	<param name="silent"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.RunSQLStatement(System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@,System.Boolean)">
	<summary>
 Runs the SQL command.
 </summary>
	<param name="sqlcmdstr">The SQLCMDSTR.</param>
	<param name="silent">The silent.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormTableStore.HasSqlCommand(System.String)">
	<summary>
 checks if SqlCommand is in Store of the driver
 </summary>
	<param name="id">id of the command</param>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.StoreSqlCommand(OnTrack.Database.iormSqlCommand@)">
	<summary>
 Store the Command by its ID - replace if existing
 </summary>
	<param name="sqlCommand">a iOTDBSqlCommand</param>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.RetrieveSqlCommand(System.String)">
	<summary>
 Retrieve the Command from Store
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.CreateSqlCommand(System.String)">
	<summary>
 Creates a Command and store it or gets the current Command
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.CreateSqlSelectCommand(System.String,System.Boolean,System.Boolean)">
	<summary>
 Creates a Command and store it or gets the current Command
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.GetSqlCommandID(System.String)">
	<summary>
 returns a ID for this Tablestore. Add the name of the table in front of the ID
 </summary>
	<param name="id">SqlcommandID</param>
	<returns>the id</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormTableStore">
	<summary>
 TopLevel OTDB Tablestore implementation base class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableSchema.IsInitialized">
	<summary>
 Gets or sets the is initialized. Should be True if the tableschema has a tableid 
 </summary>
	<value>The is initialized.</value>
</member><member name="M:OnTrack.Database.ormTableSchema.reset">
	<summary>
 resets the TableSchema to hold nothing
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableSchema.Indices">
	<summary>
 Names of the Indices of the table
 </summary>
	<value>List(of String)</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.GetDefaultValue(System.Object)">
	<summary>
 returns the default Value
 </summary>
	<param name="index"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.HasDefaultValue(System.Object)">
	<summary>
 returns if there is a default Value
 </summary>
	<param name="index"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.GetIndex(System.String)">
	<summary>
  returns the ArrayList of Fieldnames for the Index or empty array list if not found
 </summary>
	<param name="indexname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.HasIndex(System.String)">
	<summary>
 returns true if index by Name exists
 </summary>
	<param name="indexname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableSchema.PrimaryKeyIndexName">
	<summary>
 gets the primarykey name
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableSchema.NoFields">
	<summary>
 gets the number of fields
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableSchema.Fieldnames">
	<summary>
 List of Fieldnames
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.GetFieldname(System.Int32)">
	<summary>
 get the fieldname by index i - nothing if not in range
 </summary>
	<param name="i"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.HasFieldname(System.String)">
	<summary>
 check if fieldname exists
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.GetordinalOfPrimaryKeyField(System.UInt16)">
	<summary>
 gets the field ordinal of the primary Key field by number i. (e.g.returns the ordinal of the primarykey field #2)
 </summary>
	<param name="i">number of primary key field 1..n </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.NoPrimaryKeyFields">
	<summary>
 get the number of primary key fields
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Parts.clsOTDBPart.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Parts.clsOTDBPart.Clone(System.Object[])">
	<summary>
 clone the object with the new primary key
 </summary>
	<param name="pkarray">primary key array</param>
	<remarks></remarks>
	<returns>the new cloned object or nothing</returns>
</member><member name="M:OnTrack.Parts.clsOTDBPart.Initialize">
	<summary>
 initialize
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Parts.clsOTDBPart.UpdateRecord">
	<summary>
 Update the Record from the object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Parts.clsOTDBPart.Persist(System.DateTime)">
	<summary>
 Persist the object to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Parts.clsOTDBPart.LoadBy(System.String)">
	<summary>
 Load by Primary Key
 </summary>
	<param name="pnid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Parts.clsOTDBPart.CreateSchema(System.Boolean)">
	<summary>
 create persistency Schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Parts.clsOTDBPart.Create(System.String)">
	<summary>
 Create an Object in the datastore
 </summary>
	<param name="partid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:My.Resources.Resources.OnTrackLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="T:My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:OnTrack.Database.createDatabase.Scheduling">
	<summary>
 creates or updates all schematas for scheduling objects
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.createDatabase.Configurables">
	<summary>
 creates or updates all schemata for Configurable object
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.createDatabase.CoreDefinition">
	<summary>
 creates or updates the schemata for all core definition objects
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.createDatabase.Deliverables">
	<summary>
 creates or updates all schemata for deliverables business objects
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.createDatabase.Parts">
	<summary>
 creates or updates all schemata for pats business objects
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.createDatabase.Run">
	<summary>
 Creates or updates all the Database Schema for all object
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>