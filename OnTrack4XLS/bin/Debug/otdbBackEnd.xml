<?xml version="1.0"?>
<doc>
<assembly>
<name>
otdbBackEnd
</name>
</assembly>
<members>
<member name="M:OnTrack.Database.oleDBDriver.#ctor(System.String,OnTrack.Session@)">
	<summary>
 Constructor
 </summary>
	<param name="ID">an ID for this driver</param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.oleDBDriver.NativeConnection">
	<summary>
 NativeConnection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.BuildParameterAdapter">
	<summary>
 builds the adapter for the parameters table
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.Initialize(System.Boolean)">
	<summary>
 Initialize the driver
 </summary>
	<param name="Force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.oleDBDriver.Type">
	<summary>
 Gets the type.
 </summary>
	<value>The type.</value>
</member><member name="M:OnTrack.Database.oleDBDriver.CreateNativeTableStore(System.String,System.Boolean)">
	<summary>
 create a new TableStore for this Driver
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.CreateNativeTableSchema(System.String)">
	<summary>
 create a new TableSchema for this Driver
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.CreateNativeDBCommand(System.String,System.Data.IDbConnection)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.RaiseRequestBootstrapInstall(System.Object,System.EventArgs@)">
	<summary>
  raise the RequestBootStrapInstall Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.GetTargetTypeFor(OnTrack.Database.otFieldDataType)">
	<summary>
 returns the target type for a OTDB FieldType - MAPPING
 </summary>
	<param name="type"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.oleDBDriver.AssignNativeDBParameter(System.String,OnTrack.Database.otFieldDataType,System.Int64,System.Object)">
	<summary>
 create an assigned Native DBParameter to provided name and type
 </summary>
	<param name="parametername">name of parameter</param>
	<param name="datatype">otdb datatype</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.SetDBParameter(System.String,System.Object,System.Object@,System.Boolean,System.Boolean)">
	<summary>
 Sets the DB parameter.
 </summary>
	<param name="Parametername">The parametername.</param>
	<param name="Value">The value.</param>
	<param name="NativeConnection">The native connection.</param>
	<param name="UpdateOnly">The update only.</param>
	<param name="silent">The silent.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.oleDBDriver.RunSqlStatement(System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@,System.Boolean,System.Object)">
	<summary>
 Runs the SQL Command
 </summary>
	<param name="sqlcmdstr"></param>
	<param name="parameters"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.Connection_onConnection(System.Object,OnTrack.Database.ormConnectionEventArgs)">
	<summary>
 EventHandler for onConnect
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.Connection_onDisConnection(System.Object,OnTrack.Database.ormConnectionEventArgs)">
	<summary>
 EventHandler for onDisConnect
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.oleDBDriver">
	<summary>
 oleDBDriver is the database driver for ADO.NET OLEDB drivers
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.oledbConnection.NativeConnection">
	<summary>
 gets the native connection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.oledbConnection.OledbConnection">
	<summary>
 Gets or sets the connection.
 </summary>
	<value>The connection.</value>
</member><member name="M:OnTrack.Database.oledbConnection.CreateNewNativeConnection">
	<summary>
 create a new SQLConnection
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.oledbConnection">
	<summary>
 OLE DB OnTrack Database Connection Class
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.oledbTableSchema">
	<summary>
 CLASS describes the schema per table of the database itself
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.oledbTableStore.IsLinqAvailable">
	<summary>
 is Linq Available
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oledbTableStore.createNativeDBCommand(System.String,System.Data.IDbConnection@)">
	<summary>
 create the specific native Command
 </summary>
	<param name="commandstr"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oledbTableStore.InitializeCache(System.Boolean)">
	<summary>
 Initialize Cache 
 </summary>
	<returns>true if successful </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oledbTableStore.UpdateDBDataTable(System.Data.IDbDataAdapter@,System.Data.DataTable@)">
	<summary>
 update the cache Datatable
 </summary>
	<param name="datatable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.oledbTableStore">
	<summary>
 describes the ORM Mapping Function per Table for OLE DB
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.#ctor(System.String,OnTrack.Session@)">
	<summary>
 
 
 Constructor
 </summary>
	<param name="ID">an ID for this driver</param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.mssqlDBDriver.NativeConnection">
	<summary>
 NativeConnection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.BuildParameterAdapter">
	<summary>
 build Adapter for parameter table
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.Initialize(System.Boolean)">
	<summary>
 initialize driver
 </summary>
	<param name="Force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.mssqlDBDriver.Type">
	<summary>
 Gets the type.
 </summary>
	<value>The type.</value>
</member><member name="M:OnTrack.Database.mssqlDBDriver.CreateNativeTableStore(System.String,System.Boolean)">
	<summary>
 create a new TableStore for this Driver
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.CreateNativeTableSchema(System.String)">
	<summary>
 create a new TableSchema for this Driver
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.CreateNativeDBCommand(System.String,System.Data.IDbConnection)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.RaiseRequestBootstrapInstall(System.Object,System.EventArgs@)">
	<summary>
  raise the RequestBootStrapInstall Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.GetTargetTypeFor(OnTrack.Database.otFieldDataType)">
	<summary>
 returns the target type for a OTDB FieldType - MAPPING
 </summary>
	<param name="type"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.mssqlDBDriver.AssignNativeDBParameter(System.String,OnTrack.Database.otFieldDataType,System.Int64,System.Object)">
	<summary>
 create an assigned Native DBParameter to provided name and type
 </summary>
	<param name="parametername">name of parameter</param>
	<param name="datatype">otdb datatype</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.RunSqlStatement(System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@,System.Boolean,System.Object)">
	<summary>
 Runs the SQL Command
 </summary>
	<param name="sqlcmdstr"></param>
	<param name="parameters"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.SetDBParameter(System.String,System.Object,System.Object@,System.Boolean,System.Boolean)">
	<summary>
 Sets the DB parameter.
 </summary>
	<param name="Parametername">The parametername.</param>
	<param name="Value">The value.</param>
	<param name="NativeConnection">The native connection.</param>
	<param name="UpdateOnly">The update only.</param>
	<param name="silent">The silent.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.mssqlDBDriver.GetDBParameter(System.String,System.Object@,System.Boolean)">
	<summary>
 Gets the DB parameter.
 </summary>
	<param name="PARAMETERNAME">The PARAMETERNAME.</param>
	<param name="nativeConnection">The native connection.</param>
	<param name="silent">The silent.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.mssqlDBDriver.Connection_onConnection(System.Object,OnTrack.Database.ormConnectionEventArgs)">
	<summary>
 EventHandler for onConnect
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.Connection_onDisConnection(System.Object,OnTrack.Database.ormConnectionEventArgs)">
	<summary>
 EventHandler for onDisConnect
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.mssqlDBDriver">
	<summary>
 SQL Server OnTrack Database Driver
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlConnection.#ctor(System.String,OnTrack.Database.iormDatabaseDriver@,OnTrack.Session@,OnTrack.ComplexPropertyStore.Sequence)">
	<summary>
 constructor
 </summary>
	<param name="id"></param>
	<param name="databaseDriver"></param>
	<param name="session"></param>
	<param name="sequence"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.mssqlConnection.SMOConnection">
	<summary>
 Gets the SMO connection.
 </summary>
	<value>The SMO connection.</value>
</member><member name="P:OnTrack.Database.mssqlConnection.Server">
	<summary>
 Gets the server.
 </summary>
	<value>The server.</value>
</member><member name="P:OnTrack.Database.mssqlConnection.Database">
	<summary>
 Gets the database.
 </summary>
	<value>The database.</value>
</member><member name="M:OnTrack.Database.mssqlConnection.CreateSMOConnection(System.Data.IDbConnection)">
	<summary>
 create a smo server connection and returns it. Sets also the scripting optimization and the default fields to load
 </summary>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlConnection.OnInternalConnection(System.Object,OnTrack.Database.InternalConnectionEventArgs)">
	<summary>
 Event Handler onInternalConnection
 </summary>
	<param name="sender"></param>
	<param name="arguments"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.mssqlConnection.SqlConnection">
	<summary>
 Gets or sets the connection.
 </summary>
	<value>The connection.</value>
</member><member name="M:OnTrack.Database.mssqlConnection.CreateNewNativeConnection">
	<summary>
 create a new SQLConnection
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.mssqlConnection">
	<summary>
 SQL Server OnTrack Database Connection Class
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.mssqlTableSchema">
	<summary>
 CLASS describes the schema per table of the database itself
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.mssqlTableStore.IsLinqAvailable">
	<summary>
 is Linq Available
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlTableStore.CreateNativeDBCommand(System.String,System.Data.IDbConnection@)">
	<summary>
 create the specific native Command
 </summary>
	<param name="commandstr"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlTableStore.InitializeCache(System.Boolean)">
	<summary>
 Initialize Cache 
 </summary>
	<returns>true if successfull </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlTableStore.UpdateDBDataTable(System.Data.IDbDataAdapter@,System.Data.DataTable@)">
	<summary>
 update the cache Datatable
 </summary>
	<param name="datatable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Converter.String2Array(System.String)">
	<summary>
 Converts String to Array
 </summary>
	<param name="input"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Converter.Array2String(System.Object[])">
	<summary>
 Converts Array to String
 </summary>
	<param name="input"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Converter.Enumerable2String(System.Collections.IEnumerable)">
	<summary>
 Converts iEnumerable to String
 </summary>
	<param name="input"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Converter.String2DBType(System.String,OnTrack.Database.otFieldDataType)">
	<summary>
 converts a string representation of OnTrack DB Type to an object
 </summary>
	<param name="input"></param>
	<param name="datatype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.Converter">
	<summary>
 Converter Class for ORM Data
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Reflector.GetAttributes(System.Type)">
	<summary>
 returns ORM Attributes out of a Type
 </summary>
	<param name="ormType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Reflector.GetColumnAttribute(System.Type,System.String)">
	<summary>
 returns ORM Attributes out of a Type
 </summary>
	<param name="ormType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Reflector.GetIndexAttribute(System.Type,System.String)">
	<summary>
 returns ORM Attributes out of a Type
 </summary>
	<param name="ormType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Reflector.GetRelatedObjectByRetrieve(OnTrack.Database.ormSchemaRelationAttribute,OnTrack.Database.iormPersistable,OnTrack.ObjectClassDescription)">
	<summary>
 retrieves a  related objects from a relation attribute for a object class described by a classdescriptor
 </summary>
	<param name="attribute"></param>
	<param name="classdescriptor"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Reflector.GetRelatedObjectByCreate(OnTrack.Database.ormSchemaRelationAttribute,OnTrack.Database.iormPersistable,OnTrack.ObjectClassDescription)">
	<summary>
 create a  related objects from a relation attribute for a object class described by a classdescriptor
 </summary>
	<param name="attribute"></param>
	<param name="classdescriptor"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Reflector.GetRelatedObjects(OnTrack.Database.ormSchemaRelationAttribute,OnTrack.Database.iormPersistable,OnTrack.ObjectClassDescription,OnTrack.Database.iormDatabaseDriver)">
	<summary>
 retrieves a list of related objects from a relation attribute for a object class described by a classdescriptor
 </summary>
	<param name="attribute"></param>
	<param name="dataobject"></param>
	<param name="classdescriptor"></param>
	<param name="dbdriver"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Reflector.SetFieldValue(System.Reflection.FieldInfo,OnTrack.Database.iormPersistable,System.Object)">
	<summary>
 set the member field value with conversion of a dataobject
 </summary>
	<param name="field"></param>
	<param name="dataobject"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Reflector.GetFieldValue(System.Reflection.FieldInfo,OnTrack.Database.iormPersistable,System.Object@)">
	<summary>
 set the member field value with conversion of a dataobject
 </summary>
	<param name="field"></param>
	<param name="dataobject"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.Reflector">
	<summary>
 Reflector Class for reflecting ORM Attributes
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.iUINativeForm.OtdbShadow">
	<summary>
 Connect with OTDB counterpart
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.iUINativeForm.ShowOTDBForm">
	<summary>
 show the native Form
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.iUINativeForm.CloseOTDBForm">
	<summary>
 Close the Form
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.iUINativeForm.RefreshOTDBForm">
	<summary>
 Refresh the Form
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.iUINativeForm">
	<summary>
 base interface of the native Forms to fullfill
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.iUINativeFormMessageBox">
	<summary>
 Interface of the MessageBox Form the mapped UI class has to fullfill
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.iUINativeFormLogin">
	<summary>
 Interface of the LoginForm the mapped UI class has to fullfill
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.clsOTDBAbstractUIForm">
	<summary>
 Abstract Base Class for the OTDB UI Forms
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.clsCoreUIMessageBox.ButtonType">
	<summary>
 Button Types
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.clsCoreUIMessageBox.ResultType">
	<summary>
 Result
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.clsCoreUIMessageBox.MessageType">
	<summary>
 Type of Messagebox
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.UI.clsCoreUIMessageBox._form">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.clsCoreUIMessageBox.buttons">
	<summary>
 set the Buttons
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.clsCoreUIMessageBox.type">
	<summary>
 MessageType
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.clsCoreUIMessageBox.result">
	<summary>
 result
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.clsCoreUIMessageBox.Message">
	<summary>
 Message of the Message Box
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.clsCoreUIMessageBox.Title">
	<summary>
 Title of the Messagebox
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.clsCoreUIMessageBox">
	<summary>
 class is a wrapper abstract class for the Messagebox to OTDB
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.clsCoreUILogin.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.clsCoreUILogin.Session">
	<summary>
 Gets or sets the session.
 </summary>
	<value>The session.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.Databasedriver">
	<summary>
 Gets or sets the databasedriver.
 </summary>
	<value>The databasedriver.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.PossibleConfigSets">
	<summary>
 Gets or sets the possible config sets.
 </summary>
	<value>The possible config sets.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.PossibleDomains">
	<summary>
 Gets or sets the possible domains.
 </summary>
	<value>The possible domains.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.PossibleRights">
	<summary>
 Gets or sets the possible rights.
 </summary>
	<value>The possible rights.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.EnableDomain">
	<summary>
 Gets or sets the enable domain.
 </summary>
	<value>The enable domain.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.EnableConfigSet">
	<summary>
 Gets or sets the enable config set.
 </summary>
	<value>The enable config set.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.enableAccess">
	<summary>
 Gets or sets the enable acces.
 </summary>
	<value>The enable acces.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.Configset">
	<summary>
 Gets or sets the configset.
 </summary>
	<value>The configset.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.Domain">
	<summary>
 Gets or sets the domain.
 </summary>
	<value>The domain.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.Messagetext">
	<summary>
 Gets or sets the messagetext.
 </summary>
	<value>The messagetext.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.EnableUsername">
	<summary>
 Gets or sets the enable username.
 </summary>
	<value>The enable username.</value>
</member><member name="P:OnTrack.UI.clsCoreUILogin.Statustext">
	<summary>
 Gets or sets the statustext.
 </summary>
	<value>The statustext.</value>
</member><member name="T:OnTrack.UI.clsCoreUILogin">
	<summary>
 class is a wrapper abstract class for the Login to OTDB
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ComplexPropertyStore.EventArgs.Value">
	<summary>
 Gets the value.
 </summary>
	<value>The value.</value>
</member><member name="P:OnTrack.ComplexPropertyStore.EventArgs.Weight">
	<summary>
 Gets the weight.
 </summary>
	<value>The weight.</value>
</member><member name="P:OnTrack.ComplexPropertyStore.EventArgs.Setname">
	<summary>
 Gets the setname.
 </summary>
	<value>The setname.</value>
</member><member name="P:OnTrack.ComplexPropertyStore.EventArgs.Propertyname">
	<summary>
 Gets the propertyname.
 </summary>
	<value>The propertyname.</value>
</member><member name="T:OnTrack.ComplexPropertyStore.EventArgs">
	<summary>
 Event Arguments
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.ComplexPropertyStore.Sequence">
	<summary>
  Sequenze of sets
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ComplexPropertyStore._sets">
	<summary>
 main data structure a set by name consists of different properties with weights for the values
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ComplexPropertyStore.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="defaultsetname"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.ComplexPropertyStore.CurrentSet">
	<summary>
 Gets or sets the currentset.
 </summary>
	<value>The currentset.</value>
</member><member name="E:OnTrack.ComplexPropertyStore.OnPropertyChanged">
	<summary>
 Event OnPropertyChange
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ComplexPropertyStore.GetProperty(System.String,System.UInt16,System.String,OnTrack.ComplexPropertyStore.Sequence)">
	<summary>
 Gets the Property of a config set. if setname is ommitted then check currentconfigset and the global one
 </summary>
	<param name="name">name of property</param>
	<returns>object of the property</returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ComplexPropertyStore.ConfigSetNamesToSelect">
	<summary>
 returns a list of selectable config set names without global
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ComplexPropertyStore.SetNames">
	<summary>
 returns a list of ConfigSetnames
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ComplexPropertyStore">
	<summary>
 class for a Property Store with weighted properties for multiple property sets
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.Finalize">
	<summary>
 Finalize
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Session.CurrentDomainID">
	<summary>
 Gets or sets the domain.
 </summary>
	<value>The domain.</value>
</member><member name="P:OnTrack.Session.DefaultDeliverableTypeID">
	<summary>
 Gets or sets the default deliverable type ID.
 </summary>
	<value>The default deliverable type ID.</value>
</member><member name="P:OnTrack.Session.AccessLevel">
	<summary>
 Gets or sets the access level.
 </summary>
	<value>The access level.</value>
</member><member name="P:OnTrack.Session.Objects">
	<summary>
 Gets or sets the Objects.
 </summary>
	<value>The Objects.</value>
</member><member name="P:OnTrack.Session.Username">
	<summary>
 Gets the user name.
 </summary>
	<value>The user name.</value>
</member><member name="P:OnTrack.Session.IsRunning">
	<summary>
  returns if session is running
 </summary>
	<value>The is running.</value>
</member><member name="P:OnTrack.Session.Configurations">
	<summary>
 Gets the configurations ComplexPropertyStore.
 </summary>
	<value>The configurations.</value>
</member><member name="P:OnTrack.Session.ConfigSetname">
	<summary>
 returns the setname to be used to connect to the databased
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Session.TodayLatency">
	<summary>
 Gets or sets the today latency.
 </summary>
	<value>The today latency.</value>
</member><member name="P:OnTrack.Session.DefaultScheduleTypeID">
	<summary>
 set or gets the DefaultScheduleTypeID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Session.DefaultCalendarName">
	<summary>
 Gets or sets the default name of the calendar.
 </summary>
	<value>The default name of the calendar.</value>
</member><member name="P:OnTrack.Session.DefaultWorkspaceID">
	<summary>
 Gets or sets the default workspaceID.
 </summary>
	<value>The default workspaceID.</value>
</member><member name="P:OnTrack.Session.IsBootstrappingInstallationRequested">
	<summary>
 Gets or sets the is bootstrapping mode.
 </summary>
	<value>The is bootstrapping installation.</value>
</member><member name="P:OnTrack.Session.IsInstallationRunning">
	<summary>
 Gets or sets the is installation Mode
 </summary>
	<value>The is bootstrapping installation.</value>
</member><member name="P:OnTrack.Session.IsStartingUp">
	<summary>
 Gets or sets the is statup Mode
 </summary>
	<value></value>
</member><member name="P:OnTrack.Session.CurrentWorkspaceID">
	<summary>
 Gets or sets the default workspaceID.
 </summary>
	<value>The default workspaceID.</value>
</member><member name="P:OnTrack.Session.Errorlog">
	<summary>
 the errorlog of the session
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Session.DependencySynchroMinOverlap">
	<summary>
 Gets or sets the dependency synchro min overlap.
 </summary>
	<value>The dependency synchro min overlap.</value>
</member><member name="P:OnTrack.Session.UILogin">
	<summary>
 Gets or sets the UI login.
 </summary>
	<value>The UI login.</value>
</member><member name="P:OnTrack.Session.IsInitialized">
	<summary>
 Gets or sets the is initialized.
 </summary>
	<value>The is initialized.</value>
</member><member name="P:OnTrack.Session.CurrentDBDriver">
	<summary>
 Gets the primary DB driver.
 </summary>
	<value>The primary DB driver.</value>
</member><member name="P:OnTrack.Session.SessionID">
	<summary>
 Gets the session ID.
 </summary>
	<value>The session ID.</value>
</member><member name="M:OnTrack.Session.OnCurrentConfigSetChanged(System.Object,OnTrack.ComplexPropertyStore.EventArgs)">
	<summary>
 Event Handler for the Current ConfigurationSet Changed Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.OnConfigPropertyChanged(System.Object,OnTrack.ComplexPropertyStore.EventArgs)">
	<summary>
 Event Handler for the Configuration Property Changed Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.OnRequestBootstrapInstall(System.Object,OnTrack.SessionBootstrapEventArgs)">
	<summary>
 EventHandler for BootstrapInstall requested by primaryDBDriver
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.InstallOnTrackDatabase(OnTrack.ComplexPropertyStore.Sequence)">
	<summary>
 Install the Ontrack database
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.RequestEndofBootstrap">
	<summary>
 requests and checks if an end of bootstrap is possible 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.RequireAccessRight(OnTrack.otAccessRight,System.String,System.Boolean,System.Boolean)">
	<summary>
 requires from OTDB the Access Rights - starts a session if not running otherwise just validates
 </summary>
	<param name="AccessRequest">otAccessRight</param>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.RaiseObjectChangedDefinitionEvent(System.Object,OnTrack.ObjectDefintionEventArgs)">
	<summary>
 Raises the Event ObjectChagedDefinition
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.ShutDown(System.Boolean)">
	<summary>
 Initiate closeDown this Session and the Connection to OnTrack Database
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.SwitchToDomain(System.String)">
	<summary>
 sets the current Domain
 </summary>
	<param name="newDomainID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.StartUpSessionEnviorment(System.Boolean,System.String)">
	<summary>
 Initialize and set all Parameters
 </summary>
	<param name="FORCE"></param>
	<returns>true if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.ShutDownSessionEnviorment(System.Boolean)">
	<summary>
 reset the Session or close it down
 </summary>
	<param name="FORCE">true if to do it even not initialized</param>
	<returns>True if successfully reseted</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Session">
	<summary>
 Session Class holds all the Session based Data for On Track Database
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefintionEventArgs.Objectname">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="T:OnTrack.ObjectDefintionEventArgs">
	<summary>
 Object Defintion Event Arguments
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.SessionEventArgs.NewDomain">
	<summary>
 Gets or sets the new domain ID.
 </summary>
	<value>The new domain ID.</value>
</member><member name="P:OnTrack.SessionEventArgs.Session">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="T:OnTrack.SessionEventArgs">
	<summary>
 Session Event Arguments
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.DomainEventArgs.Domain">
	<summary>
 Gets or sets the new domain ID.
 </summary>
	<value>The new domain ID.</value>
</member><member name="P:OnTrack.DomainEventArgs.Session">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="T:OnTrack.DomainEventArgs">
	<summary>
 Domain Event Arguments
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionAgent.Worker(System.Object)">
	<summary>
 Worker Sub 
 </summary>
	<param name="stateInfo"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionAgent.Start">
	<summary>
 Start the Agent
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionAgent.Stop">
	<summary>
 Stop the the Agent
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.SessionAgent">
	<summary>
  Session Agent Class
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.SessionLogMessage.StackTrace">
	<summary>
 Gets or sets the stack trace.
 </summary>
	<value>The stack trace.</value>
</member><member name="P:OnTrack.SessionLogMessage.ID">
	<summary>
 Gets or sets the username.
 </summary>
	<value>The username.</value>
</member><member name="P:OnTrack.SessionLogMessage.Username">
	<summary>
 Gets or sets the username.
 </summary>
	<value>The username.</value>
</member><member name="P:OnTrack.SessionLogMessage.Tag">
	<summary>
 Gets or sets the tag.
 </summary>
	<value>The tag.</value>
</member><member name="P:OnTrack.SessionLogMessage.Processed">
	<summary>
 Gets or sets the processed.
 </summary>
	<value>The processed.</value>
</member><member name="P:OnTrack.SessionLogMessage.Entryno">
	<summary>
 Gets or sets the entryno.
 </summary>
	<value>The entryno.</value>
</member><member name="P:OnTrack.SessionLogMessage.Columnname">
	<summary>
 Gets or sets the name of the entry.
 </summary>
	<value>The name of the entry.</value>
</member><member name="P:OnTrack.SessionLogMessage.messagetype">
	<summary>
 Gets or sets the type of the error.
 </summary>
	<value>The type of the error.</value>
</member><member name="P:OnTrack.SessionLogMessage.Tablename">
	<summary>
 Gets or sets the tablename.
 </summary>
	<value>The tablename.</value>
</member><member name="P:OnTrack.SessionLogMessage.Objectname">
	<summary>
 Gets or sets the name of the object.
 </summary>
	<value>The name of the entry.</value>
</member><member name="P:OnTrack.SessionLogMessage.ObjectEntry">
	<summary>
 Gets or sets the name of the object entry.
 </summary>
	<value>The name of the entry.</value>
</member><member name="P:OnTrack.SessionLogMessage.Timestamp">
	<summary>
 Gets or sets the timestamp.
 </summary>
	<value>The timestamp.</value>
</member><member name="P:OnTrack.SessionLogMessage.Subname">
	<summary>
 Gets or sets the subname.
 </summary>
	<value>The subname.</value>
</member><member name="P:OnTrack.SessionLogMessage.Arguments">
	<summary>
 Gets or sets the arguments.
 </summary>
	<value>The arguments.</value>
</member><member name="P:OnTrack.SessionLogMessage.Exception">
	<summary>
 Gets or sets the exception.
 </summary>
	<value>The exception.</value>
</member><member name="P:OnTrack.SessionLogMessage.Message">
	<summary>
 Gets or sets the message.
 </summary>
	<value>The message.</value>
</member><member name="M:OnTrack.SessionLogMessage.CreateSchema(System.Boolean)">
	<summary>
 create the schema for this object
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionLogMessage.Create(System.String,System.Int64)">
	<summary>
 create a persistable Error
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionLogMessage.Persist(System.DateTime)">
	<summary>
 Persist the data object to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionLogMessage.Clone">
	<summary>
 clone the error
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.SessionLogMessage">
	<summary>
 describes a persistable Session Log Message
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.SessionBootstrapEventArgs">
	<summary>
 Event Arguments for Request Bootstrapping Installation
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.ormNoConnectionException">
	<summary>
 No Connection Excpetion
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ORMException.Path">
	<summary>
 Gets the path.
 </summary>
	<value>The path.</value>
</member><member name="P:OnTrack.ORMException.Subname">
	<summary>
 Gets the subname.
 </summary>
	<value>The subname.</value>
</member><member name="P:OnTrack.ORMException.Message">
	<summary>
 Gets the message.
 </summary>
	<value>The message.</value>
</member><member name="P:OnTrack.ORMException.InnerException">
	<summary>
 Gets the inner exception.
 </summary>
	<value>The inner exception.</value>
</member><member name="T:OnTrack.ORMException">
	<summary>
 ORMException is an Exception for the ORM LAyer
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.OTErrorEventArgs.Error">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="T:OnTrack.OTErrorEventArgs">
	<summary>
 Event arguments for Ontrack error Events
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.MessageLog.Tag">
	<summary>
 Gets the tag.
 </summary>
	<value>The tag.</value>
</member><member name="M:OnTrack.MessageLog.GetEnumerator">
	<summary>
 Returns an enumerator that iterates through a collection.
 </summary>
	<returns>
 An <see cref="T:System.Collections.IEnumerator"/> object that can be
 used to iterate through the collection.
 </returns>
</member><member name="M:OnTrack.MessageLog.Clear">
	<summary>
 Clears the error log from all messages
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.MessageLog.Persist(System.DateTime)">
	<summary>
 Persist the Messages
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.MessageLog.Enqueue(OnTrack.SessionLogMessage)">
	<summary>
 Add an otdb error object to the log
 </summary>
	<param name="otdberror"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.MessageLog.Size">
	<summary>
 returns the size of the log
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.MessageLog.PeekFirst">
	<summary>
 try to get the first Error from log
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.MessageLog.PeekLast">
	<summary>
 try to get the most recent error from log without removing
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.MessageLog.Retain">
	<summary>
 remove and returns the first error in the error log 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.MessageLog">
	<summary>
 Describes an not persistable Log of Messages. Can be persisted by SessionLogMessages
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.OrdinalType">
	<summary>
 OrdinalType identifies the data type of the ordinal
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Ordinal.Equals(OnTrack.Ordinal,OnTrack.Ordinal)">
	<summary>
 Equalses the specified x.
 </summary>
	<param name="x">The x.</param>
	<param name="y">The y.</param>
	<returns></returns>
</member><member name="M:OnTrack.Ordinal.Compare(OnTrack.Ordinal,OnTrack.Ordinal)">
	<summary>
 Compares two objects and returns a value indicating whether one is less
 than, equal to, or greater than the other.
 </summary>
	<param name="x">The first object to compare.</param>
	<param name="y">The second object to compare.</param>
	<exception cref="T:System.ArgumentException">Neither <paramref name="x"/> nor
 <paramref name="y"/> implements the <see cref="T:System.IComparable"/> interface.-or-
 <paramref name="x"/> and <paramref name="y"/> are of different types and neither
 one can handle comparisons with the other. </exception>
	<returns>
 A signed integer that indicates the relative values of <paramref name="x"/>
 and <paramref name="y"/>, as shown in the following table.Value Meaning Less
 than zero <paramref name="x"/> is less than <paramref name="y"/>. Zero <paramref name="x"/>
 equals <paramref name="y"/>. Greater than zero <paramref name="x"/> is greater
 than <paramref name="y"/>.
 </returns>
</member><member name="M:OnTrack.Ordinal.CompareTo(OnTrack.Ordinal)">
	<summary>
 Compares to.
 </summary>
	<param name="other">The other.</param>
	<returns></returns>
</member><member name="M:OnTrack.Ordinal.GetHashCode(OnTrack.Ordinal)">
	<summary>
 Gets the hash code.
 </summary>
	<param name="obj">The obj.</param>
	<returns></returns>
</member><member name="P:OnTrack.Ordinal.Value">
	<summary>
 Value of the ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Ordinal.Type">
	<summary>
 Datatype of the ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Ordinal.GetTypeCode">
	<summary>
 gets the Typecode of the ordinal
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Ordinal.Equals(OnTrack.Ordinal)">
	<summary>
 compares this to an ordinal
 </summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Ordinal">
	<summary>
 ordinal class describes values as ordinal values (ordering)
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLog.Initialize">
	<summary>
 Initialize the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLog.Delete">
	<summary>
 delete the Log and all members
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLog.GetAllMsg">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLog.GetMsgDef(System.Object)">
	<summary>
	</summary>
	<param name="i"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLog.Inject(System.String)">
	<summary>
 load and infuse the message log by primary key
 </summary>
	<param name="TAG"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLog.Persist">
	<summary>
 persist the message log
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLog.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLog.Create(System.String)">
	<summary>
 create a message log with a primary key
 </summary>
	<param name="tag"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectLog">
	<summary>
 ObjectLog for Messages for Business Objects 
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLogMessage.#ctor">
	<summary>
 constructor of a message log member
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLogMessage.Inject(System.String,System.Int64)">
	<summary>
 loads and infuses a message log member
 </summary>
	<param name="msglogtag"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLogMessage.CreateSchema(System.Boolean)">
	<summary>
 create peristency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLogMessage.Create(System.String,System.Int64)">
	<summary>
 Create a persistable Message Log Member by primary key
 </summary>
	<param name="msglogtag"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectLogMessage">
	<summary>
 Message Entries of a Object Log 
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.LoadbyDependant(System.String)">
	<summary>
 Load by Dependant to by partid
 </summary>
	<param name="partid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.LoadbyDependingFrom(System.String)">
	<summary>
 Loads Dependency outgoing from a partid
 </summary>
	<param name="partid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.Persist(System.DateTime)">
	<summary>
 Persists the dependency object
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.Create(System.String)">
	<summary>
 Create a Dependency persistable
 </summary>
	<param name="pnid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.Status(System.String)">
	<summary>
 retrieves the Status of the dependency structure
 </summary>
	<param name="typeid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.Inject(System.String,System.String,System.Int64)">
	<summary>
 Loads a Depend Member by Primary Key
 </summary>
	<param name="TYPEID"></param>
	<param name="PARTID"></param>
	<param name="POSNO"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.allHeadsByTypeID(System.String)">
	<summary>
 retrieves a collection of head members by dependency typeid
 </summary>
	<param name="typeid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.CreateSchema(System.Boolean)">
	<summary>
  create static persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.Persist(System.DateTime)">
	<summary>
 persist to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.Create(System.String,System.String,System.Int64,System.String)">
	<summary>
 Create a persistence object
 </summary>
	<param name="TYPEID"></param>
	<param name="PARTID"></param>
	<param name="POSNO"></param>
	<param name="dependfromPartID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.GetDependCheck(System.String)">
	<summary>
 get the latest DependCheck of Type
 </summary>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.Initialize">
	<summary>
 Initialize
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.Inject(System.String,System.String,System.Int64,System.Int64,System.Int64)">
	<summary>
 load a DependCheck by primary key
 </summary>
	<param name="typeid"></param>
	<param name="partid"></param>
	<param name="posno"></param>
	<param name="uid"></param>
	<param name="updc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.AllHeadByClusterID(System.String,System.String,System.String)">
	<summary>
 retrieve just the DependCheckHeads by ClusterID
 </summary>
	<param name="typeid"></param>
	<param name="clusterid"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.CreateSchema(System.Boolean)">
	<summary>
 create persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.Persist(System.DateTime)">
	<summary>
 Persist the object to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.DatabaseDriver">
	<summary>
 Gets or sets the database driver.
 </summary>
	<value>The database driver.</value>
</member><member name="P:OnTrack.Database.ormSqlCommand.NativeCommand">
	<summary>
 set the Native Command
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.SqlText">
	<summary>
 returns the build SQL Statement
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.Type">
	<summary>
 Type of the Sql Command -&gt; Select, Delete etc.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.BuildTextRequired">
	<summary>
 True if the SQL Statement has to be build, false if it has been build
 </summary>
	<value>True</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.Prepared">
	<summary>
 True if the Native sql command is prepared
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlCommand.AddParameter(OnTrack.Database.ormSqlCommandParameter)">
	<summary>
 add a Parameter for the command
 </summary>
	<param name="parameter">a new Parameter</param>
	<returns>true if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlCommand.BuildSqlText">
	<summary>
 builds the SQL text for the Command
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlCommand.Prepare">
	<summary>
 prepares the command
 </summary>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlCommand.IncBuildVersion">
	<summary>
 increase the buildVersion
 </summary>
	<returns>the new build version</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormSqlCommand">
	<summary>
 an neutral SQL Command
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.NotColumn">
	<summary>
 Gets or sets the not column.
 </summary>
	<value>The not column.</value>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.Value">
	<summary>
 Gets or sets the value.
 </summary>
	<value>The value.</value>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.Datatype">
	<summary>
 Gets or sets the datatype.
 </summary>
	<value>The datatype.</value>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.Fieldname">
	<summary>
 Gets or sets the fieldname.
 </summary>
	<value>The fieldname.</value>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.Tablename">
	<summary>
 Gets or sets the fieldname.
 </summary>
	<value>The fieldname.</value>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The name.</value>
</member><member name="T:OnTrack.Database.ormSqlCommandParameter">
	<summary>
 Parameter definition for a SQL Command
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.ResultField.Name">
	<summary>
 Gets or sets the name.
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.ResultField.Type">
	<summary>
 Gets or sets the name.
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.ResultField.Tablestore">
	<summary>
 Gets or sets the Tablestore used
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.ResultField.Tablename">
	<summary>
 Gets or sets the Tablestore / Tablename.
 </summary>
	<value>The name.</value>
</member><member name="M:OnTrack.Database.ormSqlSelectCommand.ResultField.GetHashCode(System.Object)">
	<summary>
 Returns a hash code for the specified object.
 </summary>
	<param name="obj">The <see cref="T:System.Object"/> for which a hash code is
 to be returned.</param>
	<exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/>
 is a reference type and <paramref name="obj"/> is null. </exception>
	<returns>A hash code for the specified object.</returns>
</member><member name="T:OnTrack.Database.ormSqlSelectCommand.ResultField">
	<summary>
 Class for Storing the select result fields per Table(store)
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlSelectCommand.#ctor(System.String)">
	<summary>
 Constructor of the OTDB Select command
 </summary>
	<param name="ID">the unique ID to store it</param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.InnerJoin">
	<summary>
 sets or gets the innerjoin 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.select">
	<summary>
  sets the select part of an Sql Select without SELECT Keyword
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.OrderBy">
	<summary>
 set or gets the orderby string
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.Where">
	<summary>
 sets or gets the wherestr
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.SqlText">
	<summary>
 returns the build SQL Statement
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlSelectCommand.AddTable(System.String,System.Boolean,System.Collections.Generic.List{System.String})">
	<summary>
 Add Table with fields to the Resultfields
 </summary>
	<param name="tableid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlSelectCommand.BuildSqlText">
	<summary>
 builds the SQL text for the Command
 </summary>
	<returns>True if successfull </returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormSqlSelectCommand">
	<summary>
  a flexible Select Command
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDatabaseDriver.Session">
	<summary>
 Gets the session.
 </summary>
	<value>The session.</value>
</member><member name="P:OnTrack.Database.ormDatabaseDriver.DatabaseType">
	<summary>
 returns the OTDBServertype
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDatabaseDriver.ID">
	<summary>
 Gets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormDatabaseDriver.TableSchemaDirectory">
	<summary>
 Gets or sets the table schema directory.
 </summary>
	<value>The table schema directory.</value>
</member><member name="P:OnTrack.Database.ormDatabaseDriver.TableDirectory">
	<summary>
 Gets or sets the table directory.
 </summary>
	<value>The table directory.</value>
</member><member name="P:OnTrack.Database.ormDatabaseDriver.CurrentConnection">
	<summary>
 Gets or sets the connection.
 </summary>
	<value>The connection.</value>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.#ctor(System.String,OnTrack.Session@)">
	<summary>
 constructor
 </summary>
	<param name="session"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.HasSqlCommand(System.String)">
	<summary>
 checks if SqlCommand is in Store of the driver
 </summary>
	<param name="id">id of the command</param>
	<remarks></remarks>
	<returns>True if successful</returns>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.StoreSqlCommand(OnTrack.Database.iormSqlCommand@)">
	<summary>
 Store the Command by its ID - replace if existing
 </summary>
	<param name="sqlCommand">a iOTDBSqlCommand</param>
	<remarks></remarks>
	<returns>true if successful</returns>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.RetrieveSqlCommand(System.String)">
	<summary>
 Retrieve the Command from Store
 </summary>
	<param name="id">id of the command</param>
	<remarks></remarks>
	<returns>a iOTDBSqlCommand</returns>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.RegisterConnection(OnTrack.Database.iormConnection@)">
	<summary>
 Register a connection at the Driver to be used
 </summary>
	<param name="connection">a iOTDBConnection</param>
	<returns>true if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.OnDisconnect">
	<summary>
 Handles the onDisconnect Event of the Driver
 </summary>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.CreateGlobalDomain(System.Object@)">
	<summary>
 Creates the global domain.
 </summary>
	<param name="nativeConnection">The native connection.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.VerifyOnTrackDatabase(System.String[],System.Boolean,System.Boolean)">
	<summary>
 verifyOnTrack
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.AssignNativeDBParameter(System.String,OnTrack.Database.otFieldDataType,System.Int64,System.Object)">
	<summary>
 create an assigned Native DBParameter to provided name and type
 </summary>
	<param name="parametername"></param>
	<param name="datatype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.GetTargetTypeFor(OnTrack.Database.otFieldDataType)">
	<summary>
 returns the target type for a OTDB FieldType - MAPPING
 </summary>
	<param name="type"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.HasTable(System.String,OnTrack.Database.iormConnection@,System.Object)">
	<summary>
 returns True if data store has the table
 </summary>
	<param name="tablename"></param>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.HasColumn(System.String,System.String,OnTrack.Database.iormConnection@)">
	<summary>
 returns True if the column exists in the table 
 </summary>
	<param name="tablename"></param>
	<param name="columnname"></param>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.CreateNativeTableStore(System.String,System.Boolean)">
	<summary>
 create a tablestore 
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.CreateNativeTableSchema(System.String)">
	<summary>
 create a tableschema
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.GetTableStore(System.String,System.Boolean)">
	<summary>
 Gets the table store.
 </summary>
	<param name="tableID">The tablename.</param>
	<param name="Force">The force.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.RunSqlStatement(System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@,System.Boolean,System.Object)">
	<summary>
 Runs the SQL Command
 </summary>
	<param name="sqlcmdstr"></param>
	<param name="parameters"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.CreateNativeDBCommand(System.String,System.Data.IDbConnection)">
	<summary>
 Create a Native IDBCommand (Sql Command)
 </summary>
	<param name="cmd"></param>
	<param name="aNativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormDatabaseDriver">
	<summary>
 abstract ORM Driver class for Database Drivers
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
	<summary>
 dynamic getValue Property
 </summary>
	<param name="binder"></param>
	<param name="result"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
	<summary>
 Dynamic setValue Property
 </summary>
	<param name="binder"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRecord.IsTableBound">
	<summary>
 Gets the is table set.
 </summary>
	<value>The is table set.</value>
</member><member name="P:OnTrack.Database.ormRecord.IsCreated">
	<summary>
 set if this record is a new Record in the databse
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRecord.IsUnknown">
	<summary>
 set if the record state is unkown if new or load
 </summary>
	<value>The is unknown.</value>
</member><member name="P:OnTrack.Database.ormRecord.IsChanged">
	<summary>
 Gets or sets the is changed.
 </summary>
	<value>The is changed.</value>
</member><member name="P:OnTrack.Database.ormRecord.IsLoaded">
	<summary>
 set if record is loaded
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRecord.Alive">
	<summary>
 returns true if record is alive
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRecord.Length">
	<summary>
 returns Length of Record
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRecord.TableID">
	<summary>
  the TableID to the Record
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRecord.TableStore">
	<summary>
 returns the tablestore or nothing
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.CheckStatus">
	<summary>
 checkStatus if loaded or created by checking if Record exists in Table. Sets the isChanged / isLoaded Property
 </summary>
	<returns>true if successfully checked</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.SetTable(System.String,OnTrack.Database.iormDatabaseDriver,OnTrack.Database.iormDataStore,System.Boolean,System.Boolean)">
	<summary>
 Assign a TableStore to this Record
 </summary>
	<param name="TableID">Name of the Table</param>
	<param name="ForceReload">Forece to reaassign</param>
	<returns>True if ssuccessfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.Delete">
	<summary>
 Deletes the Record in the Database
 </summary>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.Keys">
	<summary>
 retus a list of the primaryKeys
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.IsValueChanged(System.Object)">
	<summary>
 returns True if Value of anIndex is Changed
 </summary>
	<param name="anIndex">index in Number 1..n or fieldname</param>
	<returns>True on Change</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.Set(System.Object[]@,System.Object[]@)">
	<summary>
 sets the record to an array
 </summary>
	<param name="array"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.IsNull(System.Object)">
	<summary>
 returns True if the indexed entry in the record is null or doesnot exist
 </summary>
	<param name="index"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormRecord">
	<summary>
 represents a record data tuple for to be stored and retrieved in a data store
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormConnection.#ctor(System.String,OnTrack.Database.iormDatabaseDriver,OnTrack.Session@,OnTrack.ComplexPropertyStore.Sequence)">
	<summary>
 constructor of Connection
 </summary>
	<param name="id"></param>
	<param name="databasedriver"></param>
	<param name="session"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormConnection.ID">
	<summary>
 Gets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormConnection.Useseek">
	<summary>
 Gets the use seek.
 </summary>
	<value>The use seek.</value>
</member><member name="P:OnTrack.Database.ormConnection.Sequence">
	<summary>
 returns the Sequence of the Database Configuration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormConnection.Session">
	<summary>
 Gets the session.
 </summary>
	<value>The session.</value>
</member><member name="P:OnTrack.Database.ormConnection.DatabaseDriver">
	<summary>
 Gets or sets the DatabaseEnvirorment.
 </summary>
	<value>iOTDBDatabaseEnvirorment</value>
</member><member name="P:OnTrack.Database.ormConnection.ErrorLog">
	<summary>
 Gets the error log.
 </summary>
	<value>The error log.</value>
</member><member name="P:OnTrack.Database.ormConnection.UILogin">
	<summary>
 Gets or sets the UI login.
 </summary>
	<value>The UI login.</value>
</member><member name="P:OnTrack.Database.ormConnection.Access">
	<summary>
 Gets or sets the access.
 </summary>
	<value>The access.</value>
</member><member name="P:OnTrack.Database.ormConnection.Dbpassword">
	<summary>
 Gets or sets the dbpassword.
 </summary>
	<value>The dbpassword.</value>
</member><member name="P:OnTrack.Database.ormConnection.Dbuser">
	<summary>
 Gets or sets the dbuser.
 </summary>
	<value>The dbuser.</value>
</member><member name="P:OnTrack.Database.ormConnection.DBName">
	<summary>
 Gets or sets the name.
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.ormConnection.PathOrAddress">
	<summary>
 Gets or sets the path.
 </summary>
	<value>The path.</value>
</member><member name="P:OnTrack.Database.ormConnection.Connectionstring">
	<summary>
 Gets or sets the connectionstring.
 </summary>
	<value>The connectionstring.</value>
</member><member name="P:OnTrack.Database.ormConnection.Databasetype">
	<summary>
 Gets or sets the databasetype.
 </summary>
	<value>The databasetype.</value>
</member><member name="M:OnTrack.Database.ormConnection.OnConfigPropertyChanged(System.Object,OnTrack.ComplexPropertyStore.EventArgs)">
	<summary>
 Event Handler for the Configuration Property Changed Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormConnectionEventArgs.DomainID">
	<summary>
 Gets or sets the domain.
 </summary>
	<value>The domain.</value>
</member><member name="P:OnTrack.Database.ormConnectionEventArgs.Connection">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="T:OnTrack.Database.ormConnectionEventArgs">
	<summary>
 defines the Connection Event Arguments
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.ColumnName">
	<summary>
 Name in the table (data store)
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.ID">
	<summary>
 ID for XChange Manager
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Title">
	<summary>
 Default Title to be used on column heads
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Description">
	<summary>
 Description about the Field
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Aliases">
	<summary>
 Aliases to be used for XChange Manager (Array)
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Datatype">
	<summary>
 OTDB Datatype of the Field
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Parameter">
	<summary>
 Parameters to be used
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Tablename">
	<summary>
 Tablename of the Datastore
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Relation">
	<summary>
 Relation Description as String Array
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Size">
	<summary>
 Size
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.IsNullable">
	<summary>
 Is Nullable
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.IsArray">
	<summary>
 Is Transformed to an Array
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.DefaultValue">
	<summary>
 DefaultValue of the Field
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.Version">
	<summary>
 Version count
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.ordinalPosition">
	<summary>
 Position in the Record
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormFieldDescription.SpareFieldTag">
	<summary>
 if set true this Field is a spare field
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormCompoundDesc.compound_Tablename">
	<summary>
 the tablename in the datastore of the compound
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormCompoundDesc.compound_Relation">
	<summary>
 relation condition fields
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormCompoundDesc.compound_IDFieldname">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormCompoundDesc.compound_ValueFieldname">
	<summary>
 fieldname which has the ID of the compound field as value
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormTableStore.ConstTPNCacheProperty">
	<summary>
 Table Property Name "Cache Property"
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormTableStore.ConstTPNCacheUpdateInstant">
	<summary>
 Table Property Name "Cache Update Instant"
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormTableStore.ConstTPNFullCaching">
	<summary>
 Table Property Name for FULL CACHING
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.#ctor(OnTrack.Database.iormConnection,System.String,System.Boolean)">
	<summary>
 constuctor
 </summary>
	<param name="connection"></param>
	<param name="tableID"></param>
	<param name="force"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.CreateUniquePkValue(System.Object[]@)">
	<summary>
 creates an unique key value. provide primary key array in the form {field1, field2, nothing}. "Nothing" will be increased.
 </summary>
	<param name="pkArray"></param>
	<remarks></remarks>
	<returns>True if successfull new value</returns>
</member><member name="M:OnTrack.Database.ormTableStore.Refresh(System.Boolean)">
	<summary>
 Refresh
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableStore.TableID">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="P:OnTrack.Database.ormTableStore.Connection">
	<summary>
 Gets or sets the connection.
 </summary>
	<value>The connection.</value>
</member><member name="P:OnTrack.Database.ormTableStore.TableSchema">
	<summary>
 Gets or sets the DB table schema.
 </summary>
	<value>The DB table schema.</value>
</member><member name="M:OnTrack.Database.ormTableStore.GetProperty(System.String)">
	<summary>
 Gets the Property of a Tablestore
 </summary>
	<param name="name">name of property</param>
	<returns>object of the property</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.HasProperty(System.String)">
	<summary>
 has Tablestore the named property
 </summary>
	<param name="name">name of property</param>
	<returns>return true</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.GetRecordsBySql(System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@)">
	<summary>
 Gets the records by SQL.
 </summary>
	<param name="wherestr">The wherestr.</param>
	<param name="fullsqlstr">The fullsqlstr.</param>
	<param name="innerjoin">The innerjoin.</param>
	<param name="orderby">The orderby.</param>
	<param name="silent">The silent.</param>
	<returns></returns>
</member><member name="P:OnTrack.Database.ormTableStore.IsLinqAvailable">
	<summary>
 Is Linq in this TableStore available
 </summary>
	<value>True if available</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.GetRecordsbySQlCommand(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@)">
	<summary>
 gets a List of ormRecords by SQLCommand
 </summary>
	<param name="id">ID of the Command to store</param>
	<param name="wherestr"></param>
	<param name="fullsqlstr"></param>
	<param name="innerjoin"></param>
	<param name="orderby"></param>
	<param name="silent"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.RunSQLStatement(System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@,System.Boolean)">
	<summary>
 Runs the SQL command.
 </summary>
	<param name="sqlcmdstr">The SQLCMDSTR.</param>
	<param name="silent">The silent.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormTableStore.Convert2ColumnData(System.Object,System.Object@,System.Int64,System.Int64,System.Boolean@,System.String,System.Nullable{System.Boolean},System.Object)">
	<summary>
 converts an object value to column data
 </summary>
	<param name="invalue"></param>
	<param name="outvalue"></param>
	<param name="targetType"></param>
	<param name="maxsize"></param>
	<param name="abostrophNecessary"></param>
	<param name="fieldname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.HasSqlCommand(System.String)">
	<summary>
 checks if SqlCommand is in Store of the driver
 </summary>
	<param name="id">id of the command</param>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.StoreSqlCommand(OnTrack.Database.iormSqlCommand@)">
	<summary>
 Store the Command by its ID - replace if existing
 </summary>
	<param name="sqlCommand">a iOTDBSqlCommand</param>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.RetrieveSqlCommand(System.String)">
	<summary>
 Retrieve the Command from Store
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.CreateSqlCommand(System.String)">
	<summary>
 Creates a Command and store it or gets the current Command
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.CreateSqlSelectCommand(System.String,System.Boolean,System.Boolean)">
	<summary>
 Creates a Command and store it or gets the current Command
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.GetSqlCommandID(System.String)">
	<summary>
 returns a ID for this Tablestore. Add the name of the table in front of the ID
 </summary>
	<param name="id">SqlcommandID</param>
	<returns>the id</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormTableStore">
	<summary>
 TopLevel OTDB Tablestore implementation base class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableSchema.IsInitialized">
	<summary>
 Gets or sets the is initialized. Should be True if the tableschema has a tableid 
 </summary>
	<value>The is initialized.</value>
</member><member name="M:OnTrack.Database.ormTableSchema.Reset">
	<summary>
 resets the TableSchema to hold nothing
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableSchema.Indices">
	<summary>
 Names of the Indices of the table
 </summary>
	<value>List(of String)</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.GetDomainIDPKOrdinal">
	<summary>
 returns the primary Key ordinal (1..n) for the domain ID or less zero if not in primary key
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.GetNullable(System.Object)">
	<summary>
 Gets the nullable property.
 </summary>
	<param name="index">The index.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormTableSchema.GetDefaultValue(System.Object)">
	<summary>
 returns the default Value
 </summary>
	<param name="index"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.HasDefaultValue(System.Object)">
	<summary>
 returns if there is a default Value
 </summary>
	<param name="index"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.GetIndex(System.String)">
	<summary>
  returns the ArrayList of Fieldnames for the Index or empty array list if not found
 </summary>
	<param name="indexname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.HasIndex(System.String)">
	<summary>
 returns true if index by Name exists
 </summary>
	<param name="indexname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableSchema.PrimaryKeyIndexName">
	<summary>
 gets the primarykey name
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableSchema.NoFields">
	<summary>
 gets the number of fields
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableSchema.Fieldnames">
	<summary>
 List of Fieldnames
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableSchema.Primarykeys">
	<summary>
 List of primary key field names
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.GetFieldname(System.Int32)">
	<summary>
 get the fieldname by index i - nothing if not in range
 </summary>
	<param name="i"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.HasFieldname(System.String)">
	<summary>
 check if fieldname exists
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.GetordinalOfPrimaryKeyField(System.UInt16)">
	<summary>
 gets the field ordinal of the primary Key field by number i. (e.g.returns the ordinal of the primarykey field #2)
 </summary>
	<param name="i">number of primary key field 1..n </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.NoPrimaryKeyFields">
	<summary>
 get the number of primary key fields
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.AbstractPropertyFunction`1.#ctor(`0)">
	<summary>
 Constructor
 </summary>
	<param name="property"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.AbstractPropertyFunction`1.#ctor(`0,System.Object[])">
	<summary>
 Constructor with arguments
 </summary>
	<param name="property"></param>
	<param name="arguments"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.AbstractPropertyFunction`1.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="propertystring"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractPropertyFunction`1.Enum">
	<summary>
 set the enumeration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractPropertyFunction`1.Arguments">
	<summary>
 set or gets the arguments
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.AbstractPropertyFunction`1.ToString">
	<summary>
 String representation of this Property
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.AbstractPropertyFunction`1.ToEnum(System.String)">
	<summary>
 retuns the enumeration of a string presentation
 </summary>
	<param name="property"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.AbstractPropertyFunction`1.Validate``1(System.String)">
	<summary>
 validates the property string against the enumeration T
 </summary>
	<param name="property"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.AbstractPropertyFunction`1.ToString(`0)">
	<summary>
 returns the string presentation of the enum 
 </summary>
	<param name="enumconstant"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.AbstractPropertyFunction`1">
	<summary>
 PropertyFunction base Property Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectPermissionRuleProperty.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="propertystring"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectPermissionRuleProperty.ExitOnTrue">
	<summary>
 returns True if ExitOnTrue Flag is set
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectPermissionRuleProperty.ExitOnFalse">
	<summary>
 returns True if ExitOnTrue Flag is set
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectPermissionRuleProperty.Validate">
	<summary>
 validates the property
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectPermissionRuleProperty.Validate(OnTrack.ObjectPermissionRuleProperty)">
	<summary>
 validates the property
 </summary>
	<param name="property"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectPermissionRuleProperty.ToEnum">
	<summary>
 returns the enumeration value
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectPermissionRuleProperty">
	<summary>
 ObjectPermission Rule Property
 
 </summary>
	<remarks> 
 Validation Rules like 
 1) OTDBACCESS( DBACCESSRIGHT, FALSE|TRUE, FALSE|TRUE) which checks if the user has the DB Access right, then return ARG2 
 and end the permission checking if third argument is true
 2) GROUP( [GROUPNAME] FALSE|TRUE, FALSE|TRUE) which checks if the user is in the group by name, then return ARG2 
 and end the permission checking if third argument is true
 3) USER ( [USERNAME], FALSE|TRUE, FALSE|TRUE) which checks if the user is the username, then return ARG2 
 and end the permission checking if third argument is true
 </remarks>
</member><member name="T:OnTrack.otObjectPermissionRuleProperty">
	<summary>
 Enumeration of the validation properties
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ForeignKeyProperty.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="propertystring"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ForeignKeyProperty.ActionProperty">
	<summary>
 returns the ForeignKey Action Property
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ForeignKeyProperty.Action">
	<summary>
 returns the Foreign Key Action enumeration
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ForeignKeyProperty.Validate">
	<summary>
 validates the property
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ForeignKeyProperty.Validate(OnTrack.ForeignKeyProperty)">
	<summary>
 validates the property
 </summary>
	<param name="property"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ForeignKeyProperty.ToEnum">
	<summary>
 returns the enumeration value
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ForeignKeyProperty">
	<summary>
 ForeignKey Property
 
 </summary>
	<remarks> 
 Validation Rules like 
 1) ONDELETE( CASCADE | RESTRICT | DEFAULT | NULL | NOOP ) which checks if the user has the DB Access right, then return ARG2 
 and end the permission checking if third argument is true
 2) ONUPDATE (CASCADE | RESTRICT | DEFAULT | NULL | NOOP ) which checks if the user is in the group by name, then return ARG2 
 and end the permission checking if third argument is true
 </remarks>
</member><member name="T:OnTrack.otForeignKeyProperty">
	<summary>
 Enumeration of the validation properties
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ForeignKeyActionProperty.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="propertystring"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ForeignKeyActionProperty.Validate(System.String)">
	<summary>
 Validate the string before a Property is created
 </summary>
	<param name="propertystring"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ForeignKeyActionProperty.ToEnum">
	<summary>
 returns the enumeration value
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ForeignKeyActionProperty">
	<summary>
 ObjectPermission Rule Property
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.otForeignKeyAction">
	<summary>
 Enumeration for Access Rights to the database
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectEntryProperty.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="propertystring"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectEntryProperty.Apply(System.String[],System.String[]@)">
	<summary>
 Apply the Property function to a value
 </summary>
	<param name="in"></param>
	<param name="out"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectEntryProperty.Apply(System.Object,System.Object@)">
	<summary>
 Apply the Property function to a value
 </summary>
	<param name="in"></param>
	<param name="out"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectEntryProperty.ToEnum">
	<summary>
 returns the enumeration value
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectEntryProperty">
	<summary>
 ObjectEntry (Field) Property Class
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.otObjectEntryProperty">
	<summary>
 Enumeration of the validation properties
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.AccessRightProperty.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="propertystring"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.AccessRightProperty.ToEnum">
	<summary>
 returns the enumeration value
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.AccessRightProperty.CoverRights(OnTrack.AccessRightProperty,OnTrack.AccessRightProperty)">
	<summary>
 shared version of coverrights of who to cover
 </summary>
	<param name="who"></param>
	<param name="covers"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.AccessRightProperty.CoverRights(OnTrack.AccessRightProperty)">
	<summary>
 returns true if the accessrightproperty (as request) is covered by this access right
 </summary>
	<param name="accessrightpropery"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.AccessRightProperty.CoverRights(OnTrack.otAccessRight,OnTrack.otAccessRight)">
	<summary>
 cover rights and what to cover
 </summary>
	<param name="rights"></param>
	<param name="covers"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.AccessRightProperty">
	<summary>
 ObjectPermission Rule Property
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.otAccessRight">
	<summary>
 Enumeration for Access Rights to the database
 </summary>
	<remarks></remarks>
</member><member name="P:UIWinFormLogin.UsernameEnabled">
	<summary>
 Gets or sets the username enabled.
 </summary>
	<value>The username enabled.</value>
</member><member name="P:UIWinFormLogin.Domain">
	<summary>
 Gets or sets the message.
 </summary>
	<value>The message.</value>
</member><member name="P:UIWinFormLogin.DomainList">
	<summary>
 Gets or sets the domain list.
 </summary>
	<value>The domain list.</value>
</member><member name="P:UIWinFormLogin.DomainChangeEnables">
	<summary>
 Gets or sets the domain change enables.
 </summary>
	<value>The domain change enables.</value>
</member><member name="P:UIWinFormLogin.Message">
	<summary>
 Gets or sets the message.
 </summary>
	<value>The message.</value>
</member><member name="M:UIWinFormLogin.CloseOTDBForm">
	<summary>
 Close the Form
 </summary>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:UIWinFormLogin.RefreshOTDBForm">
	<summary>
 Refresh the Form
 </summary>
	<remarks></remarks>
	<returns></returns>
</member><member name="P:UIWinFormLogin.ConfigSet">
	<summary>
 Gets or sets the config set.
 </summary>
	<value>The config set.</value>
</member><member name="P:UIWinFormLogin.ConfigSetList">
	<summary>
 Gets or sets the config set list.
 </summary>
	<value>The config set list.</value>
</member><member name="P:UIWinFormLogin.ConfigSetEnabled">
	<summary>
 Gets or sets the config set enabled.
 </summary>
	<value>The config set enabled.</value>
</member><member name="P:UIWinFormLogin.Username">
	<summary>
 Gets or sets the username.
 </summary>
	<value>The username.</value>
</member><member name="P:UIWinFormLogin.Password">
	<summary>
 Gets or sets the password.
 </summary>
	<value>The password.</value>
</member><member name="P:UIWinFormLogin.RightsList">
	<summary>
 Gets or sets the rights list.
 </summary>
	<value>The rights list.</value>
</member><member name="P:UIWinFormLogin.StatusText">
	<summary>
 Gets or sets the status text.
 </summary>
	<value>The status text.</value>
</member><member name="P:My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:My.Resources.Resources.OnTrackLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="T:My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:OnTrack.database.iormObjectCacheManager.OnObjectDefinitionLoaded(System.Object,OnTrack.ObjectRepository.EventArgs)">
	<summary>
 Handler for the OnObjectDefinitionLoaded event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.iormObjectCacheManager.OnObjectClassDescriptionLoaded(System.Object,OnTrack.ObjectClassRepository.EventArgs)">
	<summary>
 Handler for the ObjectClassDescriptionLoaded Event of the ORM Object Repository
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.iormObjectCacheManager.OnCreatingDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreating Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.iormObjectCacheManager.OnCreatedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreated Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.iormObjectCacheManager.OnCloningDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCloning Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.iormObjectCacheManager.OnClonedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCloned Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.iormObjectCacheManager.OnDeletedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnDeleted Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.iormObjectCacheManager.OnUnDeletedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnDeleted Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.iormObjectCacheManager.OnPersistedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnPersisted Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.iormObjectCacheManager.OnRetrievingDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnRetrieving Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.iormObjectCacheManager.OnRetrievedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnRetrieved Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.iormObjectCacheManager.OnCheckingUniquenessDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnDeleted Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.database.iormObjectCacheManager">
	<summary>
 Interface for Cache Manager
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.database.ormObjectCacheManager.PersistenceStatus">
	<summary>
 persistence status of the cached object
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.RegisteryEntry`1.#ctor(System.Type)">
	<summary>
 constructor with an ormDataObject Class Type
 </summary>
	<param name="type"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.database.ormObjectCacheManager.RegisteryEntry`1.Objecttype">
	<summary>
 Gets the objecttype.
 </summary>
	<value>The objecttype.</value>
</member><member name="P:OnTrack.database.ormObjectCacheManager.RegisteryEntry`1.Objecttypename">
	<summary>
 Gets the objecttypename.
 </summary>
	<value>The objecttypename.</value>
</member><member name="P:OnTrack.database.ormObjectCacheManager.RegisteryEntry`1.NoKeys">
	<summary>
 Gets the no keys.
 </summary>
	<value>The no keys.</value>
</member><member name="T:OnTrack.database.ormObjectCacheManager.RegisteryEntry`1">
	<summary>
 Registery with some meta information
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.ObjectKeys`1.#ctor(OnTrack.database.ormObjectCacheManager.RegisteryEntry{`0})">
	<summary>
 constructor of an keyentry
 </summary>
	<param name="registeryentry"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.database.ormObjectCacheManager.ObjectKeys`1.Keys">
	<summary>
 Gets or sets the keys.
 </summary>
	<value>The keys.</value>
</member><member name="M:OnTrack.database.ormObjectCacheManager.ObjectKeys`1.Equals(System.Object)">
	<summary>
 Equal routine of 2 keys
 </summary>
	<param name="obj"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.ObjectKeys`1.GetEnumerator">
	<summary>
 get an enumerator
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.ObjectKeys`1.ToString">
	<summary>
 toString
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.database.ormObjectCacheManager.ObjectKeys`1">
	<summary>
 the generic object unique key class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.CachedObject`1.#ctor(`0@)">
	<summary>
 Constructor
 </summary>
	<param name="object"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.database.ormObjectCacheManager.CachedObject`1.ComeToAlive">
	<summary>
 Gets the come to alive.
 </summary>
	<value>The come to alive.</value>
</member><member name="P:OnTrack.database.ormObjectCacheManager.CachedObject`1.Guid">
	<summary>
 Gets the GUID.
 </summary>
	<value>The GUID.</value>
</member><member name="P:OnTrack.database.ormObjectCacheManager.CachedObject`1.IsDeleted">
	<summary>
 Gets or sets the deleted flag
 </summary>
	<value>The is deleted.</value>
</member><member name="P:OnTrack.database.ormObjectCacheManager.CachedObject`1.IsCreated">
	<summary>
 Gets or sets the deleted flag
 </summary>
	<value>The is deleted.</value>
</member><member name="P:OnTrack.database.ormObjectCacheManager.CachedObject`1.IsPersisted">
	<summary>
 Gets or sets the is persisted.
 </summary>
	<value>The is persisted.</value>
</member><member name="P:OnTrack.database.ormObjectCacheManager.CachedObject`1.IsRetrieved">
	<summary>
 Gets or sets the is retrieved.
 </summary>
	<value>The is retrieved.</value>
</member><member name="P:OnTrack.database.ormObjectCacheManager.CachedObject`1.RetrieveData">
	<summary>
 Gets or sets the retrieve data.
 </summary>
	<value>The retrieve data.</value>
</member><member name="P:OnTrack.database.ormObjectCacheManager.CachedObject`1.PersistedDate">
	<summary>
 Gets or sets the persisted date.
 </summary>
	<value>The persisted date.</value>
</member><member name="P:OnTrack.database.ormObjectCacheManager.CachedObject`1.LastAccessStamp">
	<summary>
 Gets or sets the last access stamp.
 </summary>
	<value>The last access stamp.</value>
</member><member name="P:OnTrack.database.ormObjectCacheManager.CachedObject`1.CreationDate">
	<summary>
 Gets or sets the creation date.
 </summary>
	<value>The creation date.</value>
</member><member name="P:OnTrack.database.ormObjectCacheManager.CachedObject`1.Object">
	<summary>
 Gets or sets the object.
 </summary>
	<value>The object.</value>
</member><member name="T:OnTrack.database.ormObjectCacheManager.CachedObject`1">
	<summary>
 Cached Object instance tuppel with some additional data
 </summary>
	<typeparam name="T"></typeparam>
	<remarks></remarks>
</member><member name="F:OnTrack.database.ormObjectCacheManager._registeredObjects">
	<summary>
 registered object classes
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.database.ormObjectCacheManager._cachedObjects">
	<summary>
 the Object Cache
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.database.ormObjectCacheManager._isInitialized">
	<summary>
 dynamic
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.database.ormObjectCacheManager._assignments">
 Define the Assignments of shared iorm persistable Events to the Cache Methods
 IMPORTANT !

</member><member name="M:OnTrack.database.ormObjectCacheManager.#ctor(OnTrack.Session)">
	<summary>
 constructor
 </summary>
	<param name="session"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.Start(System.Boolean)">
	<summary>
 starts the cache
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.Halt(System.Boolean)">
	<summary>
 halts the cache
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.Shutdown(System.Boolean)">
	<summary>
 shutdowns the cache
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.FlushCache">
	<summary>
 flush the cache
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.Initialize(System.Boolean)">
	<summary>
 Initialize the Cache
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.OnObjectDefinitionLoaded(System.Object,OnTrack.ObjectRepository.EventArgs)">
	<summary>
 Handler for the ObjectDefinitionLoaded Event of the ORM Object Repository
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.OnObjectClassDescriptionLoaded(System.Object,OnTrack.ObjectClassRepository.EventArgs)">
	<summary>
 Handler for the OnObjectClassDescriptionLoaded Event of the ORM Object Class Repository
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.OnCreatingDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreating Event Handler for the ORM Data Object - check if the object exists in cache
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.OnCreatedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreated Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.OnCloningDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCloning Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.OnClonedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCloned Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.OnDeletedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnDeleted Event Handler for the ORM Data Object - mark object as deleted
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.OnUnDeletedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnDeleted Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.OnPersistedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnPersisted Event Handler for the ORM Data Object - check if object needs to be added and set persistance timestamp
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.OnRetrievingDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnRetrieving Event Handler for the ORM Data Object - check if object exists in cache and use it from there
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.OnRetrievedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnRetrieved Event Handler for the ORM Data Object - add retrieved object to cache
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.OnInfusingDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreating Event Handler for the ORM Data Object - check if the object exists in cache
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.OnInfusedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnRetrieved Event Handler for the ORM Data Object - add retrieved object to cache
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.database.ormObjectCacheManager.OnCheckinqUniquenessDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnDeleted Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.database.ormObjectCacheManager">
	<summary>
 Object Cache Manager Implementation
 </summary>
	<remarks></remarks>
</member><member name="P:clsCartypes.printout">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectRepository.EventArgs.Objectdefinition">
	<summary>
 Gets the objectdefinition.
 </summary>
	<value>The objectdefinition.</value>
</member><member name="P:OnTrack.ObjectRepository.EventArgs.Objectname">
	<summary>
 Gets the objectname.
 </summary>
	<value>The objectname.</value>
</member><member name="P:OnTrack.ObjectRepository.IsInitialized">
	<summary>
 Gets or sets the is initialiazed.
 </summary>
	<value>The is initialiazed.</value>
</member><member name="P:OnTrack.ObjectRepository.ObjectDefinitions">
	<summary>
 gets a list of all ObjectDefinitions in the repository
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectRepository.ObjectEntryDefinitions">
	<summary>
 gets a list of all ObjectEntry in the repository
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectRepository.XIDs">
	<summary>
 gets a list of all Xchange IDs in the repository
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectRepository.Aliases">
	<summary>
 gets a list of all Xchange Aliases in the repository
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectRepository.TableDefinitions">
	<summary>
 gets a list of all ObjectDefinitions in the repository
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectRepository.RegisterCache(OnTrack.database.iormObjectCacheManager)">
	<summary>
 registers a cache manager for this repository
 </summary>
	<param name="cache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectRepository.AddID(OnTrack.iObjectEntry@)">
	<summary>
 Add an Entry by ID
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectRepository.AddAlias(OnTrack.iObjectEntry@)">
	<summary>
 Add an Entry by ID
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectRepository.Reset">
	<summary>
 reset all the data of the meta store
 </summary>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectRepository.Initialize">
	<summary>
 Initialize
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectRepository.LoadIntoRepository(OnTrack.ObjectDefinition@)">
	<summary>
 Load Object into Store of Objects
 </summary>
	<param name="object"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectRepository.HasObject(System.String)">
	<summary>
 retrieves an Entry by name
 </summary>
	<param name="objectname">name of the object</param>
	<returns>an Entry object or nothing </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectRepository.GetObject(System.String,System.Boolean)">
	<summary>
 retrieves an Entry by name
 </summary>
	<param name="objectname">name of the object</param>
	<returns>an Entry object or nothing </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectRepository.HasEntry(System.String,System.String)">
	<summary>
 retrieves an Entry by name
 </summary>
	<param name="objectname">name of the object</param>
	<returns>an Entry object or nothing </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectRepository.GetEntries(System.String)">
	<summary>
 retrieves an Entry by name
 </summary>
	<param name="objectname">name of the object</param>
	<returns>an Entry object or nothing </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectRepository.GetEntryByAlias(System.String,System.String)">
	<summary>
 retrieves an Entry by Alias ID
 </summary>
	<param name="Alias"></param>
	<returns>an Entry object or nothing </returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectRepository">
	<summary>
 store for all the  OTDB object information - loaded on connecting with the 
 session in the domain
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ColumnDefinition.#ctor">
	<summary>
 constructor of a SchemaDefTableEntry
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ColumnDefinition.Indexname">
	<summary>
 return the IndexName if entry belongs to an index
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ColumnDefinition.PrimaryKeyOrdinal">
	<summary>
 Gets or sets the primary key ordinal.
 </summary>
	<value>The primary key ordinal.</value>
</member><member name="P:OnTrack.ColumnDefinition.Position">
	<summary>
 Gets or sets the position.
 </summary>
	<value>The position.</value>
</member><member name="P:OnTrack.ColumnDefinition.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.ColumnDefinition.DefaultValue">
	<summary>
 gets the default value as object representation
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ColumnDefinition.DefaultValueString">
	<summary>
 Gets or sets the default value in string presentation
 </summary>
	<value>The default value.</value>
</member><member name="P:OnTrack.ColumnDefinition.Tablename">
	<summary>
 sets or gets the tablename of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ColumnDefinition.Name">
	<summary>
 Columnname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ColumnDefinition.IsNullable">
	<summary>
 Gets or sets the is nullable.
 </summary>
	<value>The is nullable.</value>
</member><member name="P:OnTrack.ColumnDefinition.IsUnique">
	<summary>
 Gets or sets the is unique.
 </summary>
	<value></value>
</member><member name="P:OnTrack.ColumnDefinition.Datatype">
	<summary>
 returns the field data type
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ColumnDefinition.Version">
	<summary>
 returns version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ColumnDefinition.Size">
	<summary>
 returns the size
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ColumnDefinition.Properties">
	<summary>
 returns the parameter for the object entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ColumnDefinition.IsPrimaryKey">
	<summary>
 returns true if Entry has a Primary Key
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ColumnDefinition.TableDefinition">
	<summary>
 gets the Tabledefinition object with lazy load
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ColumnDefinition.OnSwitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the SwitchRuntimeOFF Event after Bootstrapping
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ColumnDefinition.IncVersion">
	<summary>
 Increase the version
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ColumnDefinition.SetByAttribute(OnTrack.Database.ormObjectEntryAttribute)">
	<summary>
 set the properties of an ObjectEntryDefinition by a SchemaColumnAttribute
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ColumnDefinition.SetByFieldDesc(OnTrack.Database.ormFieldDescription@)">
	<summary>
 sets the values of this schemadefTableEntry by a FieldDescription
 </summary>
	<param name="FIELDDESC"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ColumnDefinition.GetByFieldDesc(OnTrack.Database.ormFieldDescription@)">
	<summary>
 fills a field description out of this SchemaDefTableEntry
 </summary>
	<param name="fielddesc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ColumnDefinition.CreateSchema(System.Boolean)">
	<summary>
 create the schema for this object
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ColumnDefinition.Retrieve(System.String,System.String,System.Boolean,System.Boolean)">
	<summary>
 retrives a ColumnDef Object
 </summary>
	<param name="tablename"></param>
	<param name="columnname"></param>
	<param name="forcereload"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ColumnDefinition.OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreated handles the creation event - set 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.ColumnDefinition">
	<summary>
 class for Column Definition of a table
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ForeignKeyDefinition.#ctor">
	<summary>
 constructor of a SchemaDefTableEntry
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ForeignKeyDefinition.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.ForeignKeyDefinition.Tablename">
	<summary>
 sets or gets the tablename of the foreign key (source)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ForeignKeyDefinition.Id">
	<summary>
 sets or gets the id of the foreign key
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ForeignKeyDefinition.Version">
	<summary>
 returns version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ForeignKeyDefinition.UseForeignKey">
	<summary>
 Gets or sets the is foreign key implementation.
 </summary>
	<value>T</value>
</member><member name="P:OnTrack.ForeignKeyDefinition.ForeignKeyReferences">
	<summary>
 Gets or sets the is foreign Key reference string.
 </summary>
	<value>The is nullable.</value>
</member><member name="P:OnTrack.ForeignKeyDefinition.ColumnNames">
	<summary>
 Gets or sets the is entry names Key reference string.
 </summary>
	<value>The is nullable.</value>
</member><member name="P:OnTrack.ForeignKeyDefinition.ForeignKeyProperties">
	<summary>
 returns the parameter for the object entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ForeignKeyDefinition.ForeignKeyProperty">
	<summary>
 sets or gets the Properties for the object entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ForeignKeyDefinition.TableDefinition">
	<summary>
 gets the Tabledefinition object with lazy load
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ForeignKeyDefinition.OnSwitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the SwitchRuntimeOFF Event after Bootstrapping
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ForeignKeyDefinition.IncVersion">
	<summary>
 Increase the version
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ForeignKeyDefinition.SetByAttribute(OnTrack.Database.ormSchemaForeignKeyAttribute)">
	<summary>
 set the properties of an ObjectEntryDefinition by a SchemaColumnAttribute
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ForeignKeyDefinition.OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreated handles the creation event - set 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.ForeignKeyDefinition">
	<summary>
 class for foreign key definition of multiple table columns
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.IndexDefinition.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.IndexDefinition.Properties">
	<summary>
 Gets or sets the properties.
 </summary>
	<value>The properties.</value>
</member><member name="P:OnTrack.IndexDefinition.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.IndexDefinition.IsPrimary">
	<summary>
 Gets or sets the is primary.
 </summary>
	<value>The is primary.</value>
</member><member name="P:OnTrack.IndexDefinition.IsUnique">
	<summary>
 Gets or sets the is primary.
 </summary>
	<value>The is primary.</value>
</member><member name="P:OnTrack.IndexDefinition.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.IndexDefinition.DatabaseID">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.IndexDefinition.Columnnames">
	<summary>
 Gets or sets the columnnames.
 </summary>
	<value>The columnnames.</value>
</member><member name="P:OnTrack.IndexDefinition.Tablename">
	<summary>
 Gets the tablename.
 </summary>
	<value>The tablename.</value>
</member><member name="P:OnTrack.IndexDefinition.Name">
	<summary>
 Gets the indexname.
 </summary>
	<value>The indexname.</value>
</member><member name="M:OnTrack.IndexDefinition.OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreated handles the creation event - set 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.IndexDefinition.OnSwitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the SwitchRuntimeOFF Event after Bootstrapping
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.IndexDefinition.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 returns a index definition
 </summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.IndexDefinition.CreateSchema(System.Boolean)">
	<summary>
 creates the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.IndexDefinition.Create(System.String,System.String,System.Boolean,System.Boolean)">
	<summary>
 create a new data object of that type
 </summary>
	<param name="tablename">tablename of the table</param>
	<param name="runTimeOnly">if no save is possible -&gt; bootstrapping</param>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.IndexDefinition.OnPersisting">
	<summary>
 Event Handler on Persisting
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.IndexDefinition">
	<summary>
 definition class Table defintion for an OTDB data object definition
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.TableDefinition.Name">
	<summary>
 Gets the tablename.
 </summary>
	<value>The tablename.</value>
</member><member name="P:OnTrack.TableDefinition.PrimaryKey">
	<summary>
 Gets or sets the primary key name.
 </summary>
	<value>The pkname.</value>
</member><member name="P:OnTrack.TableDefinition.Description">
	<summary>
 Gets or sets the Description.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.TableDefinition.Properties">
	<summary>
 gets or sets the cache selection string
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.TableDefinition.UseCache">
	<summary>
 use Cache on this object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.TableDefinition.CacheProperties">
	<summary>
 gets or sets the cache selection string
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.TableDefinition.DomainBehavior">
	<summary>
 Gets or sets the domain behavior.
 </summary>
	<value>The domain behavior.</value>
</member><member name="P:OnTrack.TableDefinition.Version">
	<summary>
 gets or set the version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.TableDefinition.SpareFieldsBehavior">
	<summary>
 gets or set the the spare fields behavior. Means extra fields are available.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.TableDefinition.DeletePerFlagBehavior">
	<summary>
 sets or gets the delete per flag behavior. If true a deleteflag and a delete date are available.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.TableDefinition.Columns">
	<summary>
 returns a List of Column Definitions
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.TableDefinition.ForeignKeys">
	<summary>
 returns a List of foreign keys
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreated handles the creation event - set 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.OnSwitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the SwitchRuntimeOFF Event after Bootstrapping
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.SetValuesBy(OnTrack.Database.ormSchemaTableAttribute)">
	<summary>
 adds a table entry by an table attribute 
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.OnEntryChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
	<summary>
 Event Handler if a Columndefinition is changing
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.AddColumn(OnTrack.ColumnDefinition)">
	<summary>
 Add a columnDefinition
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.AddForeignKey(OnTrack.ForeignKeyDefinition)">
	<summary>
 Add a columnDefinition
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.AddIndex(OnTrack.Database.ormSchemaIndexAttribute)">
	<summary>
 Adds an Index to the Table Definition
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.GetNoPrimaryKeys">
	<summary>
 retrieve the List of Primary Key Fieldnames
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.GetPrimaryKeyColumnNames">
	<summary>
 retrieve the List of Primary Key Fieldnames
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.GetPrimaryKeyEntries">
	<summary>        ''' retrieve the List of Primary Key Fieldnames
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.GetIndexFieldNames(System.String)">
	<summary>
 retrieves a list of Fieldnames of an Index
 </summary>
	<param name="IndexName">name of the Index</param>
	<returns>List (of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.GetNoIndexFields(System.String)">
	<summary>
 retrieves a list of Fieldnames of an Index
 </summary>
	<param name="IndexName">name of the Index</param>
	<returns>List (of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.GetIndexEntries(System.String)">
	<summary>
 retrieves a list of Fieldnames of an Index
 </summary>
	<param name="IndexName">name of the Index</param>
	<returns>List (of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.HasEntry(System.String)">
	<summary>
 gets an entry by entryname or nothing
 </summary>
	<param name="entryname">name of the entry</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.GetEntry(System.String)">
	<summary>
 gets an entry by columnname or nothing
 </summary>
	<param name="columnname">name of the column</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.RebuildPrimaryKey">
	<summary>
 Helper for rebuilding the Primary Key
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.TableDefinition_OnPersisted(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the Persisted Version
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.OnRelationLoaded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event handler for relations loaded
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.Retrieve(System.String,OnTrack.Database.iormDatabaseDriver,System.Boolean)">
	<summary>
 returns a objecttabledefintion object
 </summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.CreateSchema(System.Boolean)">
	<summary>
 creates the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.Create(System.String,System.Boolean,System.Boolean)">
	<summary>
 create a new data object of that type
 </summary>
	<param name="tablename">tablename of the table</param>
	<param name="runTimeOnly">if no save is possible -&gt; bootstrapping</param>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.TableDefinition.GetMaxPosNo">
	<summary>
 retrieves the max posno / entry index
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.TableDefinition">
	<summary>
 definition class Table defintion for an OTDB data object definition
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectPermission.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectPermission.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.ObjectPermission.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.ObjectPermission.ExitOnFalse">
	<summary>
 Gets or sets the exit.
 </summary>
	<value>The exit.</value>
</member><member name="P:OnTrack.ObjectPermission.ExitOnTrue">
	<summary>
 Gets or sets the exit.
 </summary>
	<value>The exit.</value>
</member><member name="P:OnTrack.ObjectPermission.Allow">
	<summary>
 Gets or sets the allow.
 </summary>
	<value>The allow.</value>
</member><member name="P:OnTrack.ObjectPermission.Rule">
	<summary>
 Gets or sets the rule.
 </summary>
	<value>The rule.</value>
</member><member name="P:OnTrack.ObjectPermission.Ruletype">
	<summary>
 Gets or sets the ruletype.
 </summary>
	<value>The ruletype.</value>
</member><member name="P:OnTrack.ObjectPermission.Order">
	<summary>
 Gets or sets the order.
 </summary>
	<value>The order.</value>
</member><member name="P:OnTrack.ObjectPermission.DomainID">
	<summary>
 Gets the domain ID.
 </summary>
	<value>The domain ID.</value>
</member><member name="P:OnTrack.ObjectPermission.Operation">
	<summary>
 Gets the operation.
 </summary>
	<value>The operation.</value>
</member><member name="P:OnTrack.ObjectPermission.Entryname">
	<summary>
 Gets the entryname.
 </summary>
	<value>The entryname.</value>
</member><member name="P:OnTrack.ObjectPermission.Objectname">
	<summary>
 Gets the objectname.
 </summary>
	<value>The objectname.</value>
</member><member name="P:OnTrack.ObjectPermission.RuleProperty">
	<summary>
 set or gets the RuleProperty
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectPermission.OnSwitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the SwitchRuntimeOFF Event after Bootstrapping
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectPermission.Create(System.String,System.Int64,System.String,System.String,System.String,System.Boolean,System.Boolean)">
	<summary>
 creates a ObjectPermission
 </summary>
	<param name="objectname"></param>
	<param name="order"></param>
	<param name="operationname"></param>
	<param name="entryname"></param>
	<param name="domainID"></param>
	<param name="checkUnique"></param>
	<param name="runtimeOnly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectPermission.CreateSchema(System.Boolean)">
	<summary>
 creates the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectPermission.OnFeeding(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the RecordFed Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectPermission.OnInfused(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the OnInfused Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectPermission.CheckFor(OnTrack.User,System.Boolean@,System.String)">
	<summary>
 applies the current permission rule on the current user and returns the result
 </summary>
	<param name="user"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectPermission">
	<summary>
 definition class for the permission rules on a data object
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.ID">
	<summary>
 gets the ID of the object defintion
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.Count">
	<summary>
 retrieves number of entries
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.IsActive">
	<summary>
 set or gets the object active
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.ObjectDefinition.Classname">
	<summary>
 Gets or sets the Module name.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.ObjectDefinition.Keys">
	<summary>
 Gets or sets the Module name.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.ObjectDefinition.Tables">
	<summary>
 Gets a list of the table definitions
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.ObjectDefinition.PermissionRules">
	<summary>
 Returns a ordered enumerable of ObjectPermissionRules 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.Tablenames">
	<summary>
 Gets or sets the table names.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.ObjectDefinition.Modulename">
	<summary>
 Gets or sets the Module name.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.ObjectDefinition.DefaultPermission">
	<summary>
 set or gets the default permission (true if accessible) if no permission rules are applying
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.ObjectDefinition.Description">
	<summary>
 Gets or sets the Description.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.ObjectDefinition.Properties">
	<summary>
 Gets or sets the parameters.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.ObjectDefinition.UseCache">
	<summary>
 use Cache on this object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.CacheProperties">
	<summary>
 gets or sets the cache selection string
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.DomainBehavior">
	<summary>
 Gets or sets the domain behavior.
 </summary>
	<value>The domain behavior.</value>
</member><member name="P:OnTrack.ObjectDefinition.Version">
	<summary>
 gets or set the version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.SpareFieldsBehavior">
	<summary>
 gets or set the the spare fields behavior. Means extra fields are available.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.DeletePerFlagBehavior">
	<summary>
 sets or gets the delete per flag behavior. If true a deleteflag and a delete date are available.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.Entrynames">
	<summary>
 returns a list of entry names
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectDefinition.Entries">
	<summary>
 gets a collection of object Entry definitions
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreated handles the creation event - set 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.SetValuesBy(OnTrack.Database.ormObjectAttribute)">
	<summary>
 sets the values by attributes
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.AddPermissionRule(OnTrack.Database.ormObjectOperationAttribute,System.Boolean,System.String)">
	<summary>
 sets the values by attributes
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.AddTable(OnTrack.Database.ormSchemaTableAttribute,System.Boolean)">
	<summary>
 adds a table entry by an table attribute 
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.AddEntry(OnTrack.Database.ormObjectEntryAttribute,System.Boolean,System.String)">
	<summary>
 adds a column entry by an ObjectEntry Attribute 
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.AddEntry(OnTrack.Database.ormCompoundDesc)">
	<summary>
 add a Compound description to field
 </summary>
	<param name="COMPOUNDDESC"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.CreateSchema(System.Boolean)">
	<summary>
 creates the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.CreateObjectSchema(System.Type)">
	<summary>
 static create object schema out of attributes
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.CreateObjectSchema(System.Boolean)">
	<summary>
 Create the Object Schema in the Database for this ObjectDefinition
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.SetupByClassDescription(System.Type,System.Boolean)">
	<summary>
 fills a object definition by attributes from ObjectClassDescription
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetNoKeys">
	<summary>
 retrieve the List of Primary Key entry names
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetKeyNames">
	<summary>
 retrieve the List of Primary Key entry names
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetKeyEntries">
	<summary>
 retrieve the List of Primary Key Fieldnames
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.AddEntry(OnTrack.iObjectEntry)">
	<summary>
 Add an Entry by Object Entry Definition
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.HasEntry(System.String)">
	<summary>
 gets an entry by entryname or nothing
 </summary>
	<param name="entryname">name of the entry</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetTable(System.String)">
	<summary>
 gets the Table Object for the tablename assosciated with this object definition
 </summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetClassDescription">
	<summary>
 returns the Object Class Description for the Object Definition Instance
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetRelationAttributes">
	<summary>
 returns a list of relation Attributes defined in the class description
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetRelationAttribute(System.String)">
	<summary>
 returns a list of relation Attributes defined in the class description
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetIndexAttribute(System.String)">
	<summary>
 returns a list of relation Attributes defined in the class description
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetEntry(System.String)">
	<summary>
 gets an entry by entryname or nothing
 </summary>
	<param name="entryname">name of the entry</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.Retrieve(System.String,System.String,OnTrack.Database.iormDatabaseDriver,System.Boolean,System.Boolean)">
	<summary>
 Retrieves an Object Definition from the persistence store
 </summary>
	<param name="objectname"></param>
	<param name="domainID"></param>
	<param name="dbdriver"></param>
	<param name="forceReload"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.OnInfused(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handles the OnPersisted Event - used to persist the tables since these are dynamic and not relation mapped
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.Create(System.String,System.String,System.Boolean,System.Boolean,System.UInt16)">
	<summary>
 creates an new object definition in the persistnce store
 </summary>
	<param name="objectID"></param>
	<param name="domainID"></param>
	<param name="runTimeOnly"></param>
	<param name="checkunique"></param>
	<param name="version"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectDefinition.GetEffectivePermission(OnTrack.User,System.String,System.String)">
	<summary>
 gets the permission for an user and a specified operation - returns true if permission is given
 </summary>
	<param name="user"></param>
	<param name="operationname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectDefinition">
	<summary>
 definition class data for an OTDB data object classes
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.AbstractEntryDefinition.#ctor">
	<summary>
 constructor of a SchemaDefTableEntry
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.Validate">
	<summary>
 gets or sets the validation flag - object takes part in validation if true
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.Render">
	<summary>
 gets or sets the render flag - object takes part in rendering if true
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.HasLowerRangeValue">
	<summary>
 True if ObjectEntry has a defined lower value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.LowerRangeValue">
	<summary>
 gets the lower range Value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.HasUpperRangeValue">
	<summary>
 True if ObjectEntry has a defined upper value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.UpperRangeValue">
	<summary>
 gets the upper range Value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.HasPossibleValues">
	<summary>
 returns true if there are possible values
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.PossibleValues">
	<summary>
 gets the list of possible values
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.HasValidationProperties">
	<summary>
 returns true if there are validation properties
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.Validationproperties">
	<summary>
 gets or sets the validation properties
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.HasValidateRegExpression">
	<summary>
 returns true if there is a regular expression condition for validating the object value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.ValidateRegExpression">
	<summary>
 gets or sets the regular expression condition for validating the object value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.HasRenderProperties">
	<summary>
 returns true if there are validation properties
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.RenderProperties">
	<summary>
 gets or sets the validation properties
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.HasRenderRegExpression">
	<summary>
 returns true if there is a regular expression condition for rendering the object value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.RenderRegExpMatch">
	<summary>
 gets or sets the regular expression condition for validating the object value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.RenderRegExpPattern">
	<summary>
 gets or sets the regular expression condition for validating the object value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.HasLookupCondition">
	<summary>
 returns true if there are lookup condition
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.LookupCondition">
	<summary>
 gets or sets the lookup condition
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.AbstractEntryDefinition.isNullable">
	<summary>
 gets or sets the nullable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.Size">
	<summary>
 gets or sets the size
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.Datatype">
	<summary>
 gets or sets the datatype
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.InnerDatatype">
	<summary>
 gets or sets the inner datatype
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.PrimaryKeyOrdinal">
	<summary>
 gets or sets the nullable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.Objectname">
	<summary>
 sets or gets the object name of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.RunTimeOnly">
	<summary>
 Object cannot be persisted only.
 </summary>
	<value>The run tim only.</value>
</member><member name="P:OnTrack.AbstractEntryDefinition.XID">
	<summary>
 sets or gets the XchangeManager ID for the field 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.Entryname">
	<summary>
  gets the name of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.Typeid">
	<summary>
 sets or gets the type OTDBSchemaDefTableEntryType of the field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.SpareFieldTag">
	<summary>
 sets or gets true if this field is a spare field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.IsColumn">
	<summary>
 IsField ?
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.IsCompound">
	<summary>
 returns true if entry is a compound
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.Version">
	<summary>
 returns version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.Aliases">
	<summary>
 returns a array of aliases
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.Relation">
	<summary>
 returns the relation ob the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.Properties">
	<summary>
 sets or gets the Properties for the object entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.AbstractEntryDefinition.Title">
	<summary>
 returns Title (Column Header)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.AbstractEntryDefinition.OnSwitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the SwitchRuntimeOFF Event after Bootstrapping
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.AbstractEntryDefinition.IncVersion">
	<summary>
 Increase the version
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.AbstractEntryDefinition.SetByAttribute(OnTrack.Database.ormObjectEntryAttribute)">
	<summary>
 set the properties of an ObjectEntryDefinition by a SchemaColumnAttribute
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.AbstractEntryDefinition.LoadByID(System.String,System.String)">
	<summary>
 load data from datastore
 </summary>
	<param name="ID"></param>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.AbstractEntryDefinition.CreateSchema(System.Boolean)">
	<summary>
 create the schema for this object
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.AbstractEntryDefinition.OnRecordFed(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 event Handly for Record Fed
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.AbstractEntryDefinition">
	<summary>
 abstract class for ObjectEntry (data slots) Definition 
 Subclasses are ObjectColumnEntry and ObjecCompoundEntry
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectCompoundEntry.#ctor">
	<summary>
 constructor of a SchemaDefTableEntry
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectCompoundEntry.PrimaryKeyOrdinal">
	<summary>
 not applicable for Compound Entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectCompoundEntry.IsNullable">
	<summary>
 returns the Nullable Property
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectCompoundEntry.Size">
	<summary>
 returns the size
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectCompoundEntry.Datatype">
	<summary>
 returns the field data type
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectCompoundEntry.InnerDatatype">
	<summary>
 returns the inner list data type
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectCompoundEntry.DefaultValue">
	<summary>
 gets the default value as object representation
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectCompoundEntry.DefaultValueString">
	<summary>
 Gets or sets the default value in string presentation
 </summary>
	<value>The default value.</value>
</member><member name="P:OnTrack.ObjectCompoundEntry.Version">
	<summary>
 returns version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectCompoundEntry.CompoundTablename">
	<summary>
 returns the CompoundTablename
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectCompoundEntry.CompoundIDFieldname">
	<summary>
 returns the fieldname of the compound ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectCompoundEntry.CompoundValueFieldname">
	<summary>
 returns the fieldname of the compounds value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectCompoundEntry.CompoundRelation">
	<summary>
 returns the array of relations of a compound
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectCompoundEntry.OnSwitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the SwitchRuntimeOFF Event after Bootstrapping
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectCompoundEntry.SetByAttribute(OnTrack.Database.ormObjectEntryAttribute)">
	<summary>
 set the properties of a Column Entry by a ormObjectEntryAttribute
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectCompoundEntry.IncVersion">
	<summary>
 Increase the version
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectCompoundEntry.SetByCompoundDesc(OnTrack.Database.ormCompoundDesc@)">
	<summary>
 sets the values of this schemadefTableEntry by a CompoundDescription
 </summary>
	<param name="compounddesc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectCompoundEntry.GetByCompoundDesc(OnTrack.Database.ormCompoundDesc@)">
	<summary>
 fills a compound description out of this SchemaDefTableentry
 </summary>
	<param name="compounddesc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectCompoundEntry.Retrieve(System.String,System.String,System.String,System.Boolean)">
	<summary>
 retrieves an Object entry Definition from persistence store
 </summary>
	<param name="objectname"></param>
	<param name="entryname"></param>
	<param name="domainID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectCompoundEntry.CreateSchema(System.Boolean)">
	<summary>
 create the schema for this object
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectCompoundEntry">
	<summary>
 class for ObjectEntry (data slots)
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectColumnEntry.#ctor">
	<summary>
 constructor 
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectColumnEntry.Columnname">
	<summary>
 sets or gets the column name of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectColumnEntry.TableName">
	<summary>
 sets or gets the table name of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectColumnEntry.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.ObjectColumnEntry.DefaultValue">
	<summary>
 sets or gets the default value of the column entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectColumnEntry.DefaultValueString">
	<summary>
 sets or gets the default value string
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectColumnEntry.Datatype">
	<summary>
 sets or gets the Datatype
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectColumnEntry.PrimaryKeyOrdinal">
	<summary>
 returns the Position in the primary key ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectColumnEntry.Indexname">
	<summary>
 return the IndexName if entry belongs to an index
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectColumnEntry.IsNullable">
	<summary>
 returns true if column accepts null
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectColumnEntry.IsPrimaryKey">
	<summary>
 returns true if Entry has a Primary Key
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectColumnEntry.Size">
	<summary>
 returns the datasize 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectColumnEntry.Position">
	<summary>
 returns the Position Ordinal in the record 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectColumnEntry.ColumnDefinition">
	<summary>
 returns the corresponding columndefinition
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectColumnEntry.OnSwitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the SwitchRuntimeOFF Event after Bootstrapping 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectColumnEntry.OnInitialize(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Initialize Event handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectColumnEntry.SetByAttribute(OnTrack.Database.ormObjectEntryAttribute)">
	<summary>
 set the properties of a Column Entry by a ormObjectEntryAttribute
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectColumnEntry.Retrieve(System.String,System.String,System.String,System.Boolean)">
	<summary>
 retrieves an Object entry Definition from persistence store
 </summary>
	<param name="objectname"></param>
	<param name="entryname"></param>
	<param name="domainID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectColumnEntry.OnRelationLoaded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler relation loaded
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormEntryMapping.InfuseMode">
	<summary>
 Gets or sets the infuse mode.
 </summary>
	<value>The infuse mode.</value>
</member><member name="P:OnTrack.Database.ormEntryMapping.RelationName">
	<summary>
 Gets or sets the name of the relation.
 </summary>
	<value>The name of the relation.</value>
</member><member name="P:OnTrack.Database.ormEntryMapping.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormEntryMapping.TableName">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="P:OnTrack.Database.ormEntryMapping.EntryName">
	<summary>
 Gets or sets the object's entry name.
 </summary>
	<value>The entry name.</value>
</member><member name="P:OnTrack.Database.ormEntryMapping.ColumnName">
	<summary>
 Gets or sets the field name.
 </summary>
	<value>The fieldname.</value>
</member><member name="P:OnTrack.Database.ormEntryMapping.KeyEntries">
	<summary>
 Gets or sets the field name.
 </summary>
	<value>The fieldname.</value>
</member><member name="T:OnTrack.Database.ormEntryMapping">
	<summary>
 OTDBDataObject Attribute links a class variable to a datastore table and field
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormPropertyMappingAttribute.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormPropertyMappingAttribute.TableName">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="P:OnTrack.Database.ormPropertyMappingAttribute.Fieldname">
	<summary>
 Gets or sets the fieldname.
 </summary>
	<value>The fieldname.</value>
</member><member name="T:OnTrack.Database.ormPropertyMappingAttribute">
	<summary>
 Mapping a instance field member to a fieldname of a schema description
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.UseCache">
	<summary>
 Gets or sets the cache is active.
 </summary>
	<value>The is active.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.CacheProperties">
	<summary>
 Gets or sets the cache select.
 </summary>
	<value>cache.</value>
</member><member name="M:OnTrack.Database.ormSchemaTableAttribute.AddColumn(OnTrack.Database.ormSchemaTableColumnAttribute)">
	<summary>
 Add an entry by TabeColumn
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSchemaTableAttribute.UpdateColumn(OnTrack.Database.ormSchemaTableColumnAttribute)">
	<summary>
 Add an entry by TabeColumn
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSchemaTableAttribute.GetColumn(System.String)">
	<summary>
 returns an entry by columnname or nothing
 </summary>
	<param name="columnname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSchemaTableAttribute.HasColumn(System.String)">
	<summary>
 returns an entry by columnname or nothing
 </summary>
	<param name="columnname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSchemaTableAttribute.RemoveColumn(System.String)">
	<summary>
 remove an entry by columnname 
 </summary>
	<param name="columnname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.ColumnAttributes">
	<summary>
 returns a List of all Entries
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSchemaTableAttribute.AddForeignKey(OnTrack.Database.ormSchemaForeignKeyAttribute)">
	<summary>
 Add an foreign key entry
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.ForeignKeyAttributes">
	<summary>
 returns a List of all Entries
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.ColumnNames">
	<summary>
 returns a List of all Entries
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.PrimaryKey">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.ObjectID">
	<summary>
 Gets or sets the object ID.
 </summary>
	<value>The object ID.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.TableName">
	<summary>
 Gets or sets the name of the table.
 </summary>
	<value>The name of the table.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.AddDomainBehavior">
	<summary>
 Gets or sets the add domain ID flag.
 </summary>
	<value>The add domain ID flag.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.AddDeleteFieldBehavior">
	<summary>
 sets or gets the add deletefield flag. This will add a field for deletion the record to the schema.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.AddSpareFields">
	<summary>
 sets or gets the add ParameterField flag. 
 This will add extra fields for additional parameters (reserve and spare) to the data object.
 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaRelationAttribute.CascadeOnUpdate">
	<summary>
 Gets or sets the cascade on update.
 </summary>
	<value>The cascade on update.</value>
</member><member name="P:OnTrack.Database.ormSchemaRelationAttribute.CascadeOnDelete">
	<summary>
 Gets or sets the cascade on delete.
 </summary>
	<value>The cascade on delete.</value>
</member><member name="P:OnTrack.Database.ormSchemaRelationAttribute.CascadeOnCreate">
	<summary>
 Gets or sets the cascade on create.
 </summary>
	<value>The cascade on create.</value>
</member><member name="P:OnTrack.Database.ormSchemaRelationAttribute.ToPrimaryKeys">
	<summary>
 Gets or sets to primary keys of the linkes object.
 </summary>
	<value>To primary keys.</value>
</member><member name="P:OnTrack.Database.ormSchemaRelationAttribute.ToEntries">
	<summary>
 Gets or sets to entries.
 </summary>
	<value>To entries.</value>
</member><member name="P:OnTrack.Database.ormSchemaRelationAttribute.FromEntries">
	<summary>
 Gets or sets from entries.
 </summary>
	<value>From entries.</value>
</member><member name="P:OnTrack.Database.ormSchemaRelationAttribute.LinkObject">
	<summary>
 Gets or sets the linkedwith object.
 </summary>
	<value>The linkedwith object.</value>
</member><member name="P:OnTrack.Database.ormSchemaRelationAttribute.LinkJoin">
	<summary>
 Gets or sets the link join.
 </summary>
	<value>The link join.</value>
</member><member name="P:OnTrack.Database.ormSchemaRelationAttribute.Name">
	<summary>
 Gets the name.
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.ormSchemaRelationAttribute.TableName">
	<summary>
 Gets or sets the name of the table.
 </summary>
	<value>The name of the table.</value>
</member><member name="P:OnTrack.Database.ormSchemaRelationAttribute.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.TableName">
	<summary>
 Gets or sets the name of the table.
 </summary>
	<value>The name of the table.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.Description">
	<summary>
 Gets or sets the name of the table.
 </summary>
	<value>The name of the table.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.IsUnique">
	<summary>
 Gets or sets unique flag on this index.
 </summary>
	<value></value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.IsPrimaryKey">
	<summary>
 Gets or sets the primary key flag on this indeex.
 </summary>
	<value></value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.IndexName">
	<summary>
 Gets or sets the name.
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnNames">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnName1">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnName2">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnName3">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnName4">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnName5">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="T:OnTrack.Database.ormSchemaIndexAttribute">
	<summary>
 Attributes for Schema Generation of an Index
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.ColumnName">
	<summary>
 Gets or sets the name of the column.
 </summary>
	<value>The name of the column.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.Posordinal">
	<summary>
 Gets or sets the pos ordinal.
 </summary>
	<value>The pos ordinal.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.DefaultValue">
	<summary>
 Gets or sets the default value.
 </summary>
	<value>The default value.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.Tablename">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.Typeid">
	<summary>
 Gets or sets the typeid.
 </summary>
	<value>The typeid.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.InnerTypeid">
	<summary>
 Gets or sets the inner typeid of list.
 </summary>
	<value>The typeid.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.Size">
	<summary>
 Gets or sets the size.
 </summary>
	<value>The size.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.Parameter">
	<summary>
 Gets or sets the parameter.
 </summary>
	<value>The parameter.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.IsNullable">
	<summary>
 Gets or sets the is nullable.
 </summary>
	<value>The is nullable.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.IsUnique">
	<summary>
 Gets or sets the Unique Property.
 </summary>
	<value></value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.UseForeignKey">
	<summary>
 Gets or sets the is foreign Key flag. References must be set
 </summary>
	<value></value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.ForeignKeyReferences">
	<summary>
 Gets or sets the foreign key reference.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.ForeignKeyProperties">
	<summary>
 Gets or sets the foreign key properties as string
 </summary>
	<value>string</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.ForeignKeyProperty">
	<summary>
 sets or gets the foreign key properties as list of ForeignKeyProperty
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.PrimaryKeyOrdinal">
	<summary>
 Gets or sets the primary key ordinal.
 </summary>
	<value>The primary key ordinal.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.Relation">
	<summary>
 Gets or sets the relation.
 </summary>
	<value>The relation.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.Version">
	<summary>
 gets or sets the version counter
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormSchemaTableColumnAttribute">
	<summary>
 Attribute for Const fields to describe the schema
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.Entrynames">
	<summary>
 Gets or sets the name of the column.
 </summary>
	<value>The name of the column.</value>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.ID">
	<summary>
 Gets or sets the ID
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.Tablename">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.ObjectID">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.UseForeignKey">
	<summary>
 Gets or sets the is foreign Key flag. References must be set
 </summary>
	<value></value>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.ForeignKeyReferences">
	<summary>
 Gets or sets the foreign key reference.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.ForeignKeyProperties">
	<summary>
 Gets or sets the foreign key properties as string
 </summary>
	<value>string</value>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.ForeignKeyProperty">
	<summary>
 sets or gets the foreign key properties as list of ForeignKeyProperty
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.Version">
	<summary>
 gets or sets the version counter
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormSchemaForeignKeyAttribute">
	<summary>
 Attribute for Const fields to describe foreign keys with multiple keys
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.EntryType">
	<summary>
 Gets or sets the type of the entry.
 </summary>
	<value>The type of the entry.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.LookupCondition">
	<summary>
 Gets or sets the lookup condition.
 </summary>
	<value>The lookup condition.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.RenderRegExpPattern">
	<summary>
 Gets or sets the render reg exp pattern.
 </summary>
	<value>The render reg exp pattern.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.RenderRegExpMatch">
	<summary>
 Gets or sets the render reg exp match.
 </summary>
	<value>The render reg exp match.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Properties">
	<summary>
 Gets or sets the object entry properties.
 </summary>
	<value>The render properties.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.RenderProperties">
	<summary>
 Gets or sets the render properties.
 </summary>
	<value>The render properties.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Render">
	<summary>
 Gets or sets the render.
 </summary>
	<value>The render.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.ValidateRegExp">
	<summary>
 Gets or sets the validate reg exp.
 </summary>
	<value>The validate reg exp.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.ValidationProperties">
	<summary>
 Gets or sets the validation properties.
 </summary>
	<value>The validation properties.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Values">
	<summary>
 Gets or sets the values.
 </summary>
	<value>The values.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.UpperRange">
	<summary>
 Gets or sets the upper range.
 </summary>
	<value>The upper range.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.LowerRange">
	<summary>
 Gets or sets the lower range.
 </summary>
	<value>The lower range.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Validate">
	<summary>
 Gets or sets the validate.
 </summary>
	<value>The validate.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.ObjectName">
	<summary>
 Gets or sets the name of the object.
 </summary>
	<value>The name of the object.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.EntryName">
	<summary>
 Gets or sets the name of the column.
 </summary>
	<value>The name of the column.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.XID">
	<summary>
 Gets or sets the name of the column.
 </summary>
	<value>The name of the column.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.KeyOrdinal">
	<summary>
 Gets or sets the primary key ordinal.
 </summary>
	<value>The primary key ordinal.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Posordinal">
	<summary>
 Gets or sets the pos ordinal.
 </summary>
	<value>The pos ordinal.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.SpareFieldTag">
	<summary>
 set or gets if this field is a spare field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Title">
	<summary>
 Gets or sets the title.
 </summary>
	<value>The title.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Relation">
	<summary>
 Gets or sets the relation.
 </summary>
	<value>The relation.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Aliases">
	<summary>
 Gets or sets the aliases.
 </summary>
	<value>The aliases.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Version">
	<summary>
 gets or sets the version counter
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectEntryAttribute.ToString">
	<summary>
 returns a String presentation of an ObjEctEntry Attribute
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormObjectEntryAttribute">
	<summary>
 Attribute for Object Entry fields to describe the schema
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormObjectAttribute.PrimaryKeys">
	<summary>
 Gets or sets the primary keys.
 </summary>
	<value>The primary keys.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.IsActive">
	<summary>
 Gets or sets the is active.
 </summary>
	<value>The is active.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.DefaultPermission">
	<summary>
 Gets or sets the is active.
 </summary>
	<value>The is active.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.Properties">
	<summary>
 Gets or sets the object Properties
 </summary>
	<value>cache.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.IsBootstrap">
	<summary>
 Gets or sets bootstrap object flag.
 </summary>
	<value>The is active.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.UseCache">
	<summary>
 Gets or sets the cache is active.
 </summary>
	<value>The is active.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.CacheProperties">
	<summary>
 Gets or sets the cache select.
 </summary>
	<value>cache.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.Modulename">
	<summary>
 Gets or sets the modulename.
 </summary>
	<value>The modulename.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.AddDomainBehaviorFlag">
	<summary>
 Gets or sets the add domain behavior flag.
 </summary>
	<value>The add domain behavior flag.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.SpareFieldsFlag">
	<summary>
 Gets or sets the spare fields flag.
 </summary>
	<value>The spare fields flag.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.DeleteFieldFlag">
	<summary>
 Gets or sets the delete field flag.
 </summary>
	<value>The delete field flag.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.Title">
	<summary>
 Gets or sets the title.
 </summary>
	<value>The title.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.Tablenames">
	<summary>
 Gets or sets the tablenames.
 </summary>
	<value>The tablenames.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.ClassName">
	<summary>
 Gets or sets the name of the class.
 </summary>
	<value>The name of the class.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="T:OnTrack.Database.ormObjectAttribute">
	<summary>
 Attribute for Const fields to describe the schema
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormObjectOperationAttribute.OperationName">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationAttribute.DefaultAllowPermission">
	<summary>
 Gets or sets bootstrap object flag.
 </summary>
	<value>The is active.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationAttribute.PermissionRules">
	<summary>
 Gets or sets the object Properties
 </summary>
	<value>cache.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationAttribute.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationAttribute.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationAttribute.Title">
	<summary>
 Gets or sets the title.
 </summary>
	<value>The title.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationAttribute.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="T:OnTrack.Database.ormObjectOperationAttribute">
	<summary>
 Attribute for Const fields to describe an object operation
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormObjectOperationMethodAttribute.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationMethodAttribute.OperationName">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationMethodAttribute.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationMethodAttribute.Title">
	<summary>
 Gets or sets the title.
 </summary>
	<value>The title.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationMethodAttribute.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="T:OnTrack.Database.ormObjectOperationMethodAttribute">
	<summary>
 Attribute for Const fields to describe an object operation method - connects the opeation to different methods in the class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.#ctor">
	<summary>
 constructore
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.clsOTDBMessageQueue.ContextIdentifier">
	<summary>
 Gets or sets the context identifier.
 </summary>
	<value>The context identifier.</value>
</member><member name="P:OnTrack.Xchange.clsOTDBMessageQueue.TupleIdentifier">
	<summary>
 Gets or sets the tuple identifier.
 </summary>
	<value>The tuple identifier.</value>
</member><member name="P:OnTrack.Xchange.clsOTDBMessageQueue.EntitityIdentifier">
	<summary>
 Gets or sets the entitity identifier.
 </summary>
	<value>The entitity identifier.</value>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.Delete">
	<summary>
 deletesthe persisted objecte and subobjects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.Inject(System.String)">
	<summary>
 loads a message queue from the datastore
 </summary>
	<param name="TAG"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.Persist(System.DateTime)">
	<summary>
 Persists the Queue and all entries
 </summary>
	<param name="TIMESTAMP"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.CreateSchema(System.Boolean)">
	<summary>
 create Persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.Create(System.String)">
	<summary>
 create a persistble message queue
 </summary>
	<param name="TAG"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.Process">
	<summary>
 process -&gt; write the MQF to the Database through the XChangeManager
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.raiseMessage(System.Int64,OnTrack.ObjectLog@)">
	<summary>
 Raises the message.
 </summary>
	<param name="index">The index.</param>
	<param name="MSGLOG">The MSGLOG.</param>
	<returns></returns>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.attachMessageLog(OnTrack.ObjectLog@)">
	<summary>
 Attaches the message log.
 </summary>
	<param name="MSGLOG">The MSGLOG.</param>
	<returns></returns>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueue.Precheck">
	<summary>
 precheck -&gt; check the MQF
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.GetMember(System.Int64)">
	<summary>
 GetMember by index
 </summary>
	<param name="i"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.clsOTDBMessageQueueEntry.Members">
	<summary>
 returns a List of Members
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.VerifyAction(System.String)">
	<summary>
 verify action
 </summary>
	<param name="ActionCommand"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.IsActionProcessable(System.String,OnTrack.ObjectLog@)">
	<summary>
 Is Action Processable
 </summary>
	<param name="ActionCommand"></param>
	<param name="MSGLOG"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.Delete">
	<summary>
 Deletes all persistable objects in the datastore
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.CreateMember">
	<summary>
 creates a member
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.Persist(System.DateTime)">
	<summary>
 Persist the Entry with members
 </summary>
	<param name="TIMESTAMP"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.CreateSchema(System.Boolean)">
	<summary>
 Create Persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.RunPreCheck(OnTrack.ObjectLog@)">
	<summary>
 run the Precheck on the Entry
 </summary>
	<param name="msglog"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.FillMapping(System.Collections.Generic.Dictionary{System.Object,System.Object}@)">
	<summary>
 Fill Mapping from the Entry
 </summary>
	<param name="mapping"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueEntry.RunXChange(System.Boolean,OnTrack.ObjectLog@,System.Collections.Generic.Dictionary{System.Object,System.Object}@)">
	<summary>
 Run XChange on the Enry
 </summary>
	<param name="justprecheck"></param>
	<param name="MSGLOG"></param>
	<param name="MAPPING"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueMember.CreateSchema(System.Boolean)">
	<summary>
 create persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.clsOTDBMessageQueueMember.Persist(System.DateTime)">
	<summary>
 persist the Object
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.TrackItem.Listid">
	<summary>
 gets the id of the tracking list
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.TrackItem.Posno">
	<summary>
 gets the position number in the list
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.TrackItem.PartID">
	<summary>
 gets or set the part id to be tracked - might be null / nothing
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.TrackItem.Comment">
	<summary>
 gets or sets some comments and textfield
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.TrackItem.Matchcode">
	<summary>
 gets or sets the matchcode
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.TrackItem.Ordinal">
	<summary>
 gets or sets the ordinal in the list
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.TrackItem.DlvUid">
	<summary>
 gets or sets the deliverable uid to be tracked - might be nothing / nullable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.TrackItem.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.TrackItem.Retrieve(System.String,System.Int64)">
	<summary>
 Retrieve a trackitem from the data store
 </summary>
	<param name="listid"></param>
	<param name="posno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.TrackItem.Create(System.String,System.Int64)">
	<summary>
 create a persistable track list item
 </summary>
	<param name="listid"></param>
	<param name="posno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.TrackItem.GetTrackItemsList(System.String)">
	<summary>
 get the items by list
 </summary>
	<param name="listid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.TrackItem.All">
	<summary>
 retrieve a collection of all Items
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.TrackItem">
	<summary>
 List of Tracking Items
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.IsNull">
	<summary>
 Gets or sets the is null.
 </summary>
	<value>The is null.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.IsEmpty">
	<summary>
 Gets or sets the is empty.
 </summary>
	<value>The is empty.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.Datatype">
	<summary>
 Gets or sets the datatype.
 </summary>
	<value>The datatype.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.Msglog">
	<summary>
 Gets or sets the msglog.
 </summary>
	<value>The msglog.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.ConvertSucceeded">
	<summary>
 Gets or sets the convert succeeded.
 </summary>
	<value>The convert succeeded.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.Value">
	<summary>
 returns the value to be converted
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.ConvertedValue">
	<summary>
 returns the converted value 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.Dbvalue">
	<summary>
 Gets or sets the dbvalue.
 </summary>
	<value>The dbvalue.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.Hostvalue">
	<summary>
 Gets or sets the hostvalue.
 </summary>
	<value>The hostvalue.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.HostValueisNull">
	<summary>
 Gets or sets the host valueis null.
 </summary>
	<value>The host valueis null.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.HostValueisEmpty">
	<summary>
 Gets or sets the host valueis empty.
 </summary>
	<value>The host valueis empty.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.DbValueisNull">
	<summary>
 Gets or sets the db valueis null.
 </summary>
	<value>The db valueis null.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.DbValueIsEmpty">
	<summary>
 Gets or sets the db value is empty.
 </summary>
	<value>The db value is empty.</value>
</member><member name="T:OnTrack.XChange.ConvertRequestEventArgs">
	<summary>
 Arguments for the ConvertRequest and Result Arguments
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.Entryname">
	<summary>
 returns the entryname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.ID">
	<summary>
 returns the ID of the ConfigMember
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.Objectname">
	<summary>
 returns the name of the Object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.Aliases">
	<summary>
 returns a List of Aliases
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.Configname">
	<summary>
 returns the configname of this Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.HasAlias(System.String)">
	<summary>
 Has Alias
 </summary>
	<param name="alias"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.Msglogtag">
	<summary>
 gets the MSGLog Tag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.XChangeCmd">
	<summary>
 gets or sets the Xchange Command
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.Parameter">
	<summary>
 gets or sets parameter
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.Relation">
	<summary>
 gets or sets relation
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.Indexno">
	<summary>
 Primary Key Indexno
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.IsXChanged">
	<summary>
 gets or sets the Xhanged Flag - value is not xchangend to and from Host Application
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.IsReadOnly">
	<summary>
 sets the Readonly Flag - value of the OTDB cannot be overwritten
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.IsAttributeEntry">
	<summary>
 gets or sets the Attribute Entry Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.IsCompound">
	<summary>
 gets True if this is a Compound
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.IsField">
	<summary>
 gets True if the Attribute is a Field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.IsObjectEntry">
	<summary>
 gets True if this is an Object Entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.ordinal">
	<summary>
 gets or sets the ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.iConfigMember.IsOrderedBy">
	<summary>
 gets or sets the OrderedBy Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.iConfigMember">
	<summary>
 Interface for XConfigMembers
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigObjectEntry.IsAttributeEntry">
	<summary>
 gets or sets the Attribute Entry Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigObjectEntry.IsField">
	<summary>
 gets True if the Attribute is a Field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigObjectEntry.IsObjectEntry">
	<summary>
 gets True if this is an Object Entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfigObjectEntry.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XConfigObjectEntry">
	<summary>
 describes an XChange XConfigMember ObjectEntry (Object is usually the Table)
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.ID">
	<summary>
 gets or sets the XChange ID for the Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.Entryname">
	<summary>
 gets the fieldname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.Aliases">
	<summary>
 gets the Aliases of the XChange Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.HasAlias(System.String)">
	<summary>
 gets true if the XChangeMember has the Alias
 </summary>
	<param name="alias"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.IsAttributeEntry">
	<summary>
 gets or sets the Attribute Entry Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.IsCompound">
	<summary>
 gets True if this is a Compound
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.IsField">
	<summary>
 gets True if the Attribute is a Field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.IsObjectEntry">
	<summary>
 gets True if this is an Object Entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigAttributeEntry.IsDynamicAttribute">
	<summary>
 gets or sets the Dynamic Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfigAttributeEntry.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XConfigAttributeEntry">
	<summary>
 describes the XConfig Member Attribute
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.ID">
	<summary>
 gets or sets the XChange ID for the Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Entryname">
	<summary>
 gets the fieldname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Objectname">
	<summary>
 gets or sets the objectname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Msglogtag">
	<summary>
 gets the MSGLog Tag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Configname">
	<summary>
 gets the configname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Aliases">
	<summary>
 gets the Aliases of the XChange Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.HasAlias(System.String)">
	<summary>
 gets true if the XChangeMember has the Alias
 </summary>
	<param name="alias"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.XChangeCmd">
	<summary>
 gets or sets the Xchange Command
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.ObjectEntryDefinition">
	<summary>
 gets the ObjectEntry Definition for the XChange Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.ObjectDefinition">
	<summary>
 Object Definition
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Ordinal">
	<summary>
 gets or sets the ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Parameter">
	<summary>
 gets or sets parameter
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Relation">
	<summary>
 gets or sets relation
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Comment">
	<summary>
 gets or sets comment
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Indexno">
	<summary>
 Primary Key Indexno
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.IsXChanged">
	<summary>
 gets or sets the Xhanged Flag - value is not xchangend to and from Host Application
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.IsReadOnly">
	<summary>
 sets the Readonly Flag - value of the OTDB cannot be overwritten
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.IsAttributeEntry">
	<summary>
 gets or sets the Attribute Entry Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.IsCompound">
	<summary>
 gets True if this is a Compound
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.IsField">
	<summary>
 gets True if the Attribute is a Field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.IsObjectEntry">
	<summary>
 gets True if this is an Object Entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.IsOrderedBy">
	<summary>
 gets or sets the OrderedBy Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfigMember.Orderno">
	<summary>
 Gets or sets the Order ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfigMember.Incordinal">
	<summary>
 Increment ordinal
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfigMember.Inject(System.String,System.Int64)">
	<summary>
 Load XChange Member from persistence store
 </summary>
	<param name="configname"></param>
	<param name="indexno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfigMember.CreateSchema(System.Boolean)">
	<summary>
 Create Persistence Schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfigMember.Persist(System.DateTime)">
	<summary>
 Persist the Xchange Member
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfigMember.Create(System.String,System.Int64)">
	<summary>
 creates a persistable XChange member with primary Key
 </summary>
	<param name="configname"></param>
	<param name="indexno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XConfigMember">
	<summary>
 describes a Xconfig Member - an individual item
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XConfig.OutlineID">
	<summary>
 Gets or sets the S outlineid.
 </summary>
	<value>The S outlineid.</value>
</member><member name="P:OnTrack.XChange.XConfig.AllowDynamicAttributes">
	<summary>
 Gets or sets the dynamic attributes.
 </summary>
	<value>The S dynamic attributes.</value>
</member><member name="P:OnTrack.XChange.XConfig.Configname">
	<summary>
 gets name of configuration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.GetMaxordinalNo">
	<summary>
  get the maximal ordinal as long if it is numeric
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.GetMaxIndexNo">
	<summary>
 returns the maximal index number
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.GetMaxObjectOrderNo">
	<summary>
 returns the max order number 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.SetordinalForID(System.String,System.Object,System.String)">
	<summary>
 sets the ordinal for an ID
 </summary>
	<param name="ID"></param>
	<param name="ordinal"></param>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.SetObjectXCmd(System.String,OnTrack.otXChangeCommandType)">
	<summary>
 set the object xchange command
 </summary>
	<param name="name"></param>
	<param name="xchangecommand"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AddObjectByName(System.String,System.Int64,OnTrack.otXChangeCommandType)">
	<summary>
 Adds an object to exchange by name and orderno
 </summary>
	<param name="name"></param>
	<param name="orderno"></param>
	<param name="xcmd"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AddAttributeByField(System.String@,System.String,System.Object,System.Boolean,OnTrack.otXChangeCommandType,System.Boolean)">
	<summary>
 Adds an atribute by fieldname
 </summary>
	<param name="entryname"></param>
	<param name="ordinal"></param>
	<param name="OBJECTNAME"></param>
	<param name="ISXCHANGED"></param>
	<param name="XCMD"></param>
	<param name="READONLY"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AddAttributeByID(System.String,System.Object,System.String,System.Boolean,OnTrack.otXChangeCommandType,System.Boolean)">
	<summary>
 Adds an Attribute to the XCHange Config by its XChange-ID
 </summary>
	<param name="id"></param>
	<param name="ordinal"></param>
	<param name="objectname"></param>
	<param name="isXChanged"></param>
	<param name="xcmd"></param>
	<param name="readonly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.Exists(System.String,System.String)">
	<summary>
 returns True if an Objectname with an ID exists
 </summary>
	<param name="objectname"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AddordinalReference(OnTrack.XChange.iConfigMember@)">
	<summary>
 Add ordinal to Reference Structures
 </summary>
	<param name="member"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AddMember(OnTrack.XChange.iConfigMember)">
	<summary>
 Add XChangeMember
 </summary>
	<param name="anEntry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.Initialize">
	<summary>
 Initialize
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.Reset">
	<summary>
 Resets all dynamic structures
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.Delete">
	<summary>
 deletes an objects in persistency store
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.ObjectByName(System.String)">
	<summary>
 retrieves an Object by its name or nothing
 </summary>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.MemberIndexNo">
	<summary>
 retrieves a list of the Index Numbers of the members
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.ObjectsByOrderNo">
	<summary>
 retrieves the ordinal numbers of the objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AttributesByObjectName(System.String)">
	<summary>
 retrieves a List of Attributes per Objectname
 </summary>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.Objects">
	<summary>
 returns all the objectMembers
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AttributeByFieldName(System.String,System.String)">
	<summary>
 returns an attribute by its fieldname and tablename
 </summary>
	<param name="fieldname"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AttributeByID(System.String,System.String)">
	<summary>
 returns an Attribute in the XChange Config by its XChange ID or Alias
 </summary>
	<param name="ID"></param>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AttributesByordinal(OnTrack.Ordinal)">
	<summary>
 returns a List of XConfigMembers per ordinal
 </summary>
	<param name="ordinal"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.AttributeByAlias(System.String,System.String)">
	<summary>
 returns an Attribute by its XChange Alias ID
 </summary>
	<param name="alias"></param>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.Attributes(System.String)">
	<summary>
 Returns an ienumerable of all attributes (optional just by an objectname)
 </summary>
	<param name="objectname">optional objectname</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.Inject(System.String)">
	<summary>
 Loads a XChange Configuration from Store
 </summary>
	<param name="configname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.Persist(System.DateTime)">
	<summary>
 perstist the XChange Config to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.CreateSchema(System.Boolean)">
	<summary>
 create a persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.Create(System.String)">
	<summary>
 creates a persistable object with primary key
 </summary>
	<param name="configname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XConfig.All">
	<summary>
 retrieves a List of all XConfigs
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XBag.DefaultEnvelope">
	<summary>
 Gets the default envelope.
 </summary>
	<value>The default envelope.</value>
</member><member name="P:OnTrack.XChange.XBag.XChangeCommand">
	<summary>
 Gets or sets the top CMD.
 </summary>
	<value>The top CMD.</value>
</member><member name="P:OnTrack.XChange.XBag.PreparedOn">
	<summary>
 Gets or sets the prepared on.
 </summary>
	<value>The prepared on.</value>
</member><member name="P:OnTrack.XChange.XBag.ProcessedOn">
	<summary>
 Gets or sets the processed on.
 </summary>
	<value>The processed on.</value>
</member><member name="P:OnTrack.XChange.XBag.IsPrepared">
	<summary>
 Gets or sets the is prepared.
 </summary>
	<value>The is prepared.</value>
</member><member name="P:OnTrack.XChange.XBag.IsProcessed">
	<summary>
 Gets or sets the is processed.
 </summary>
	<value>The is processed.</value>
</member><member name="P:OnTrack.XChange.XBag.ProcessedOK">
	<summary>
 returns true if the successfully processed
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XBag.XChangeDefaultConfig">
	<summary>
 Gets the xchangeconfig.
 </summary>
	<value>The xchangeconfig.</value>
</member><member name="M:OnTrack.XChange.XBag.Clear">
	<summary>
 clear all entries remove all envelopes
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.AddEnvelope(System.Int64,OnTrack.XChange.XEnvelope,System.Boolean)">
	<summary>
 adds an envelope to the bag by key
 </summary>
	<param name="key"></param>
	<param name="envelope"></param>
	<param name="removeIfExists"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.AddEnvelope(System.String,OnTrack.XChange.XEnvelope,System.Boolean)">
	<summary>
 adds an envelope to the bag by key
 </summary>
	<param name="key"></param>
	<param name="envelope"></param>
	<param name="removeIfExists"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.AddEnvelope(OnTrack.Ordinal,OnTrack.XChange.XEnvelope,System.Boolean)">
	<summary>
 adds an envelope to the bag by ordinal
 </summary>
	<param name="ordinal"></param>
	<param name="envelope"></param>
	<param name="removeIfExists"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.ReplaceEnvelope(System.Int64,OnTrack.XChange.XEnvelope)">
	<summary>
 replaces or adds an envelope against another with same key
 </summary>
	<param name="key"></param>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.ReplaceEnvelope(System.String,OnTrack.XChange.XEnvelope)">
	<summary>
 replaces or adds an envelope against another with same key
 </summary>
	<param name="key"></param>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.ReplaceEnvelope(OnTrack.Ordinal,OnTrack.XChange.XEnvelope)">
	<summary>
 replaces or adds an envelope against another with same ordinal
 </summary>
	<param name="ordinal"></param>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.Item(System.Object)">
	<summary>
 returns an Envelope by key
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.GetEnvelope(System.Int64)">
	<summary>
 returns an Envelope by key
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.GetEnvelope(System.String)">
	<summary>
  returns an Envelope by key
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.GetEnvelope(OnTrack.Ordinal)">
	<summary>
  returns an Envelope by ordinal
 </summary>
	<param name="ordinal"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.GetEnumerator">
	<summary>
 gets an enumarator over the envelopes
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.OnRequestConvert2HostValue(System.Object,OnTrack.XChange.ConvertRequestEventArgs)">
	<summary>
 Event handler for the Slots OnRequestConvert2Hostvalue
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.OnRequestConvert2DBValue(System.Object,OnTrack.XChange.ConvertRequestEventArgs)">
	<summary>
 EventHandler for the Slots OnRequestConvert2DBValue
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.Prepare(System.Boolean)">
	<summary>
 Prepares the XBag for the Operations to run on it
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.RunPreXCheck">
	<summary>
 Runs the XChange PreCheck
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.RunXChange">
	<summary>
 Runs the XChange
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XBag">
	<summary>
 XBag is an arbitary XChange Data Object which constists of different XEnvelopes ordered by
 ordinals.
 An XBag an Default persistable XChangeConfig
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XSlot.#ctor(OnTrack.XChange.XEnvelope,OnTrack.XChange.XConfigAttributeEntry)">
	<summary>
 constructor for slot with envelope reference and attribute
 </summary>
	<param name="xenvelope"></param>
	<param name="attribute"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XSlot.#ctor(OnTrack.XChange.XEnvelope,OnTrack.XChange.XConfigAttributeEntry,System.Object,System.Boolean,System.Boolean)">
	<summary>
 constructor for slot with envelope reference and attribute and hostvalue
 </summary>
	<param name="xenvelope"></param>
	<param name="attribute"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XSlot.IsPrecheckedOk">
	<summary>
 gets the pre checked result - only valid if ISPrechecked is true
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XSlot.IsXChanged">
	<summary>
 returns True if Slot is supposed to be XChanged
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XSlot.IsPrechecked">
	<summary>
 gets the IsPrechecked flag if pre check has Run
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XSlot.ordinal">
	<summary>
 Gets or sets the ordinal.
 </summary>
	<value>The ordinal.</value>
</member><member name="P:OnTrack.XChange.XSlot.IsNull">
	<summary>
 Gets or sets the is null.
 </summary>
	<value>The is null.</value>
</member><member name="P:OnTrack.XChange.XSlot.IsEmpty">
	<summary>
 Gets or sets the is empty.
 </summary>
	<value>The is empty.</value>
</member><member name="P:OnTrack.XChange.XSlot.HostValue">
	<summary>
 Gets or sets the host value.
 </summary>
	<value>The value.</value>
</member><member name="P:OnTrack.XChange.XSlot.DBValue">
	<summary>
 Gets or sets the Database value.
 </summary>
	<value>The value.</value>
</member><member name="P:OnTrack.XChange.XSlot.XAttribute">
	<summary>
 Gets or sets the xattribute.
 </summary>
	<value>The xattribute.</value>
</member><member name="T:OnTrack.XChange.XSlot">
	<summary>
 a XSlot represents a Slot in an XEnvelope
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.#ctor(OnTrack.XChange.XBag)">
	<summary>
 constructor
 </summary>
	<param name="xbag"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.IsPrechecked">
	<summary>
 get the prechecked flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.PrecheckedOK">
	<summary>
 gets the precheck result - only valid if IsPrechecked is true
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.PrecheckTimestamp">
	<summary>
 gets the timestamp for the precheck
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.ProcessedOk">
	<summary>
 returns true if successfully processed (exchanged)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.IsProcessed">
	<summary>
 returns true if the envelope was xchanged / processed
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.ProcessedTimestamp">
	<summary>
 Gets or sets the processed date.
 </summary>
	<value>The processed date.</value>
</member><member name="P:OnTrack.XChange.XEnvelope.MsgLog">
	<summary>
 returns the msglog associated with this xEnvelope
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.Xchangeconfig">
	<summary>
 Gets the xchangeconfig.
 </summary>
	<value>The xchangeconfig.</value>
</member><member name="M:OnTrack.XChange.XEnvelope.HasConfigID(System.String,System.String)">
	<summary>
 returns true if in the XConfig a Slot is available for the XChange ID
 </summary>
	<param name="id"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.RemoveSlot(System.Int64)">
	<summary>
 remove the slot by ordinal
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.RemoveSlot(System.String)">
	<summary>
 remove the slot by ordinal
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.RemoveSlot(OnTrack.Ordinal)">
	<summary>
 remove the slot by ordinal
 </summary>
	<param name="ordinal"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.Clear">
	<summary>
 clear the Envelope from all slots
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.SetSlotValue(System.Int64,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 sets the value of an existing slot given by ordinal
 </summary>
	<param name="key"></param>
	<param name="value"></param>
	<param name="isHostValue"></param>
	<param name="overwrite"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.SetSlotValue(System.String,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 sets the value of an existing slot given by ordinal
 </summary>
	<param name="key"></param>
	<param name="value"></param>
	<param name="isHostValue"></param>
	<param name="overwrite"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.SetSlotValue(OnTrack.Ordinal,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 set the value of an existing slot given by ordinal
 </summary>
	<param name="ordinal"></param>
	<param name="value"></param>
	<param name="isHostValue"></param>
	<param name="overwrite"></param>
	<returns>returns true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlot(OnTrack.Ordinal@)">
	<summary>
 returns a Slot by ordinal
 </summary>
	<param name="ordinal"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.AddSlot(OnTrack.XChange.XSlot@,System.Boolean)">
	<summary>
 Add a Slot by ordinal
 </summary>
	<param name="slot"></param>
	<param name="replaceSlotIfExists"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.AddSlotByID(System.String,System.Object,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,OnTrack.otXChangeCommandType)">
	<summary>
 set a slot by ID Reference. get the ordinal from the id and set the value
 </summary>
	<param name="id"></param>
	<param name="value"></param>
	<param name="isHostValue"></param>
	<param name="tablename"></param>
	<param name="replaceSlotIfExists"></param>
	<param name="extendXConfig"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.AddSlotByFieldname(System.String,System.Object,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,OnTrack.otXChangeCommandType)">
	<summary>
 Add a Slot by fieldname
 </summary>
	<param name="fieldname"></param>
	<param name="value"></param>
	<param name="isHostValue"></param>
	<param name="tablename"></param>
	<param name="overwriteValue"></param>
	<param name="extendXConfig"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlotValueByID(System.String,System.String,System.Boolean)">
	<summary>
 returns the Slot's value by ID
 </summary>
	<param name="id"></param>
	<param name="tablename"></param>
	<param name="asHostValue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.HasSlotByID(System.String,System.String)">
	<summary>
 return true if there is a slot by ID
 </summary>
	<param name="id"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlotValueByFieldname(System.String,System.String,System.Boolean)">
	<summary>
 returns the slot's value by fieldname
 </summary>
	<param name="fieldname"></param>
	<param name="tablename"></param>
	<param name="asHostValue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.HasSlotByFieldname(System.String,System.String)">
	<summary>
 returns true if there is a slot by fieldname
 </summary>
	<param name="fieldname"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlotValueByAttribute(OnTrack.XChange.XConfigAttributeEntry@,System.Boolean)">
	<summary>
 returns the slot's value by attribute
 </summary>
	<param name="xchangemember"></param>
	<param name="asHostValue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.HasSlotByAttribute(OnTrack.XChange.XConfigAttributeEntry@)">
	<summary>
 returns True if there is a slot by XConfig Member by XChangemember
 </summary>
	<param name="xchangemember"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetAttributeByFieldname(System.String,System.String)">
	<summary>
 returns the Attribute of a slot by fieldname and tablename
 </summary>
	<param name="fieldname"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetAttributeByID(System.String,System.String)">
	<summary>
 returns the Attribute of a slot by id and tablename
 </summary>
	<param name="id"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlotValue(System.Int64,System.Boolean)">
	<summary>
 returns the Slotsvalue as hostvalue or dbvalue by ordinal
 </summary>
	<param name="key"></param>
	<param name="asHostvalue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlotValue(System.String,System.Boolean)">
	<summary>
 returns the Slotsvalue as hostvalue or dbvalue by ordinal
 </summary>
	<param name="key"></param>
	<param name="asHostvalue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlotValue(OnTrack.Ordinal,System.Boolean)">
	<summary>
 returns the Slotsvalue as hostvalue or dbvalue by ordinal
 </summary>
	<param name="ordinal"></param>
	<param name="asHostvalue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.OnRequestConvert2HostValue(System.Object,OnTrack.XChange.ConvertRequestEventArgs)">
	<summary>
 Eventhandler for the Slots OnRequestConvert2Hostvalue
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.OnRequestConvert2DBValue(System.Object,OnTrack.XChange.ConvertRequestEventArgs)">
	<summary>
 EventHandler for the Slots OnRequestConvert2DBValue
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetObjectXCmd(System.String)">
	<summary>
 returns the Object XCommand
 </summary>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.RunXChange(OnTrack.ObjectLog@,System.Boolean)">
	<summary>
 run XChange for this Envelope
 </summary>
	<param name="msglog"></param>
	<param name="suspendoverload"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.CreateandUpdateObject(OnTrack.XChange.XConfigObjectEntry@,OnTrack.Database.ormRecord@,System.Object[]@,OnTrack.ObjectLog@)">
	<summary>
 create and update a object 
 </summary>
	<param name="xobject"></param>
	<param name="record"></param>
	<param name="pkarray"></param>
	<param name="msglog"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.RunDefaultXchange``1(``0@,OnTrack.ObjectLog@,System.Boolean)">
	<summary>
 Run the default xchange for a given object
 </summary>
	<typeparam name="T"></typeparam>
	<param name="dataobject"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.RunDefaultXChange(OnTrack.XChange.XConfigObjectEntry@,OnTrack.ObjectLog@,System.Boolean)">
	<summary>
 Run the Default XChange for an object by primary keys
 </summary>
	<param name="xobject"></param>
	<param name="msglog"></param>
	<param name="nocompounds"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XEnvelope">
	<summary>
 XChange Envelope is a Member of a Bag and Contains Pairs of ordinal, XSlot
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeConfig.OutlineID">
	<summary>
 Gets or sets the S outlineid.
 </summary>
	<value>The S outlineid.</value>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeConfig.AllowDynamicAttributes">
	<summary>
 Gets or sets the dynamic attributes.
 </summary>
	<value>The S dynamic attributes.</value>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeConfig.Configname">
	<summary>
 gets name of configuration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.GetMaxordinalNo">
	<summary>
  get the maximal ordinal as long if it is numeric
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.GetMaxIndexNo">
	<summary>
 returns the maximal index number
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.GetMaxObjectOrderNo">
	<summary>
 returns the max order number 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.SetordinalForID(System.String,System.Object,System.String)">
	<summary>
 sets the ordinal for an ID
 </summary>
	<param name="ID"></param>
	<param name="ordinal"></param>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.SetObjectXCmd(System.String,OnTrack.otXChangeCommandType)">
	<summary>
 set the object xchange command
 </summary>
	<param name="name"></param>
	<param name="xchangecommand"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.AddObjectByName(System.String,System.Int64,OnTrack.otXChangeCommandType)">
	<summary>
 Adds an object to exchange by name and orderno
 </summary>
	<param name="name"></param>
	<param name="orderno"></param>
	<param name="xcmd"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.AddAttributeByID(System.String,System.Object,System.String,System.Boolean,OnTrack.otXChangeCommandType,System.Boolean)">
	<summary>
 Adds an Attribute to the XCHange Config by its XChange-ID
 </summary>
	<param name="id"></param>
	<param name="ordinal"></param>
	<param name="objectname"></param>
	<param name="isXChanged"></param>
	<param name="xcmd"></param>
	<param name="readonly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.Exists(System.String,System.String)">
	<summary>
 returns True if an Objectname with an ID exists
 </summary>
	<param name="objectname"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.AddordinalReference(OnTrack.XChange.clsOTDBXChangeMember@)">
	<summary>
 Add ordinal to Reference Structures
 </summary>
	<param name="member"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.AddMember(OnTrack.XChange.clsOTDBXChangeMember)">
	<summary>
 Add XChangeMember
 </summary>
	<param name="anEntry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.Initialize">
	<summary>
 Initialize
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.Reset">
	<summary>
 Resets all dynamic structures
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.Delete">
	<summary>
 deletes an objects in persistency store
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.ObjectByName(System.String)">
	<summary>
 retrieves an Object by its name or nothing
 </summary>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.MemberIndexNo">
	<summary>
 retrieves a list of the Index Numbers of the members
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.ObjectsByOrderNo">
	<summary>
 retrieves the ordinal numbers of the objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.AttributesByObjectName(System.String)">
	<summary>
 retrieves a List of Attributes per Objectname
 </summary>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.Objects">
	<summary>
 returns all the objectMembers
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.AttributeByFieldName(System.String,System.String)">
	<summary>
 returns an attribute by its fieldname and tablename
 </summary>
	<param name="fieldname"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.AttributeByID(System.String,System.String)">
	<summary>
 returns an Attribute in the XChange Config by its XChange ID or Alias
 </summary>
	<param name="ID"></param>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.AttributeByAlias(System.String,System.String)">
	<summary>
 returns an Attribute by its XChange Alias ID
 </summary>
	<param name="alias"></param>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.Attributes(System.String)">
	<summary>
 Returns an ienumerable of all attributes (optional just by an objectname)
 </summary>
	<param name="objectname">optional objectname</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.Inject(System.String)">
	<summary>
 Loads a XChange Configuration from Store
 </summary>
	<param name="configname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.Persist(System.DateTime)">
	<summary>
 perstist the XChange Config to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.CreateSchema(System.Boolean)">
	<summary>
 create a persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeConfig.Create(System.String)">
	<summary>
 creates a persistable object with primary key
 </summary>
	<param name="configname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsCompundEntry">
	<summary>
 Gets the S is compund entry.
 </summary>
	<value>The S is compund entry.</value>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Objectname">
	<summary>
 gets or sets the objectname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Msglogtag">
	<summary>
 gets the MSGLog Tag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.ID">
	<summary>
 gets or sets the XChange ID for the Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Entryname">
	<summary>
 gets the fieldname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Configname">
	<summary>
 gets the configname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Aliases">
	<summary>
 gets the Aliases of the XChange Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.HasAlias(System.String)">
	<summary>
 gets true if the XChangeMember has the Alias
 </summary>
	<param name="alias"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.XChangeCmd">
	<summary>
 gets or sets the Xchange Command
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.ObjectEntryDefinition">
	<summary>
 gets the ObjectEntry Definition for the XChange Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.ObjectDefinition">
	<summary>
 Object Definition
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.ordinal">
	<summary>
 gets or sets the ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Parameter">
	<summary>
 gets or sets parameter
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Relation">
	<summary>
 gets or sets relation
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Comment">
	<summary>
 gets or sets comment
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Indexno">
	<summary>
 Primary Key Indexno
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsXChanged">
	<summary>
 gets or sets the Xhanged Flag - value is not xchangend to and from Host Application
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsReadOnly">
	<summary>
 sets the Readonly Flag - value of the OTDB cannot be overwritten
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsAttributeEntry">
	<summary>
 gets or sets the Attribute Entry Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsCompound">
	<summary>
 gets True if this is a Compound
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsField">
	<summary>
 gets True if the Attribute is a Field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsObjectEntry">
	<summary>
 gets True if this is an Object Entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsOrderedBy">
	<summary>
 gets or sets the OrderedBy Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.Orderno">
	<summary>
 Gets or sets the Order ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.clsOTDBXChangeMember.IsDynamicAttribute">
	<summary>
 gets or sets the Dynamic Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeMember.Incordinal">
	<summary>
 Increment ordinal
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeMember.Inject(System.String,System.Int64)">
	<summary>
 Load XChange Member from persistence store
 </summary>
	<param name="configname"></param>
	<param name="indexno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeMember.CreateSchema(System.Boolean)">
	<summary>
 Create Persistence Schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeMember.Persist(System.DateTime)">
	<summary>
 Persist the Xchange Member
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.clsOTDBXChangeMember.Create(System.String,System.Int64)">
	<summary>
 creates a persistable XChange member with primary Key
 </summary>
	<param name="configname"></param>
	<param name="indexno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.clsOTDBXChangeMember">
	<summary>
 describes a XChange Member - an individual 
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XOutline.Description">
	<summary>
 Gets or sets the desc.
 </summary>
	<value>The desc.</value>
</member><member name="P:OnTrack.XChange.XOutline.DynamicAddRevisions">
	<summary>
 Gets or sets the dynamic add revisions.
 </summary>
	<value>The dynamic add revisions.</value>
</member><member name="P:OnTrack.XChange.XOutline.id">
	<summary>
 gets the ID of the Outline
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XOutline.Count">
	<summary>
 gets the number outline items in the outline
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.GetMaxordinal">
	<summary>
 returns the maximal ordinal of the outline items
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.Initialize">
	<summary>
 Initializes the data obejct
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.Delete">
	<summary>
 deletes the object and components from the datastore
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.ordinals">
	<summary>
 ordinals of the components
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.Items">
	<summary>
 retrieves a collection of Outline Items
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.CreateSchema">
	<summary>
 Create persistable schema for this dataobject
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.Inject(System.String)">
	<summary>
 loads the X Outline from the datastore
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.LoadItems(System.String)">
	<summary>
 load all the related outline items
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.Persist(System.DateTime)">
	<summary>
 persist the Outline and the components
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.Create(System.String)">
	<summary>
 create an persistable outline
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XOutline">
	<summary>
 describes a XChange Outline data structure
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XOutlineItem.Text">
	<summary>
 Gets or sets the text.
 </summary>
	<value>The text.</value>
</member><member name="P:OnTrack.XChange.XOutlineItem.IsText">
	<summary>
 Gets or sets the is text.
 </summary>
	<value>The is text.</value>
</member><member name="P:OnTrack.XChange.XOutlineItem.IsGroup">
	<summary>
 Gets or sets the is group.
 </summary>
	<value>The is group.</value>
</member><member name="P:OnTrack.XChange.XOutlineItem.OTLineKey.Type">
	<summary>
 Gets the type.
 </summary>
	<value>The type.</value>
</member><member name="P:OnTrack.XChange.XOutlineItem.OTLineKey.ID">
	<summary>
 Gets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.XChange.XOutlineItem.OTLineKey.Value">
	<summary>
 Gets the value.
 </summary>
	<value>The value.</value>
</member><member name="T:OnTrack.XChange.XOutlineItem.OTLineKey">
	<summary>
 OutlineKey Class as subclass of outline item to make it flexible
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutlineItem.AllByID(System.String)">
	<summary>
 retrieves a sorted list of items by uid
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutlineItem.Inject(System.String,System.String)">
	<summary>
 retrieves the data object from the data store
 </summary>
	<param name="id"></param>
	<param name="ordinal"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutlineItem.CreateSchema(System.Boolean)">
	<summary>
 create schema for persistency
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutlineItem.Persist(System.DateTime)">
	<summary>
 Persist the data object to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutlineItem.Create(System.String,System.String,System.Int64,System.UInt16)">
	<summary>
 create a new outline item in the persistable data store
 </summary>
	<param name="ID"></param>
	<param name="ordinal"></param>
	<param name="uid"></param>
	<param name="level"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XOutlineItem">
	<summary>
 OutlineItem of an Outline
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.CalendarEntry.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.CalendarEntry.Timestamp">
	<summary>
 Timestamp entry of the calendar
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.CalendarEntry.Datevalue">
	<summary>
 returns or sets the date portion of the timestamp
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.CalendarEntry.Timevalue">
	<summary>
 returns the Timeportion
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.CalendarEntry.OnRecordFed(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for record Fed
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.CalendarEntry.Retrieve(System.String,System.Int64,System.String)">
	<summary>
 loads and infuses the object
 </summary>
	<param name="Name"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.CalendarEntry.Inject(System.String,System.Int64,System.String)">
	<summary>
 loads and infuses the object
 </summary>
	<param name="Name"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.CalendarEntry.CreateSchema(System.Boolean)">
	<summary>
 create persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.CalendarEntry.All">
	<summary>
 Return a Collection of all Calendar Entries
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.CalendarEntry.AvailableDays(System.DateTime,System.DateTime,System.String,System.String)">
	<summary>
 Returns the number of available days between two dates
 </summary>
	<param name="fromdate"></param>
	<param name="untildate"></param>
	<param name="name">default calendar</param>
	<returns>days in long</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.CalendarEntry.NextAvailableDate(System.DateTime,System.Int32,System.String,System.String)">
	<summary>
 returnss the next available date from a date in no of  days
 </summary>
	<param name="fromdate">From Date</param>
	<param name="noDays">number of days</param>
	<param name="Name">default calendar</param>
	<returns>next date</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.CalendarEntry.IsAvailableOn(System.DateTime,System.String,System.String)">
	<summary>
 isAvailable looks for otDayEntries showing availibility
 </summary>
	<param name="refdate"></param>
	<param name="Name">default calendar</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.CalendarEntry.AllByDate(System.DateTime,System.String,System.String)">
	<summary>
 returns all calendar entries by refence date
 </summary>
	<param name="refDate"></param>
	<param name="name"></param>
	<returns>a collection of objects</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.CalendarEntry.GenerateDays(System.DateTime,System.DateTime,System.String,System.String)">
	<summary>
 Initialize the calendar with dates from a date until a date
 </summary>
	<param name="fromdate">from date to initalize</param>
	<param name="untildate">to date </param>
	<param name="name">name of the calendar (optional)</param>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.CalendarEntry.Create(System.String,System.Int64,System.String)">
	<summary>
 Creates an persistable calendar entry
 </summary>
	<param name="name">name of calendar</param>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.CalendarEntry">
	<summary>
 Calendar Entry Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.createDatabase.Scheduling">
	<summary>
 creates or updates all schematas for scheduling objects
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.createDatabase.CoreDefinition">
	<summary>
 creates or updates the schemata for all core definition objects
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.createDatabase.Deliverables">
	<summary>
 creates or updates all schemata for deliverables business objects
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.createDatabase.Parts">
	<summary>
 creates or updates all schemata for pats business objects
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.createDatabase.CreateAndPersist(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
	<summary>
 creates the schema and persist for a list of objects
 </summary>
	<param name="objects"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.createDatabase.Run(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
	<summary>
 Creates or updates all the Database Schema for all objects or a subset
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.createDatabase.InitializeCalendar">
	<summary>
 Initialize the Calendar
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.createDatabase.InitialCoreData">
	<summary>
  Initial Core Data
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Configurables.clsOTDBDefConfigurationItem.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Configurables.clsOTDBConfigurable.RunXPreCheck(OnTrack.XChange.XEnvelope@)">
	<summary>
 run the XPrecheck on the Envelope and Object
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Configurables.clsOTDBConfigurable.RunXChange(OnTrack.XChange.XEnvelope@)">
	<summary>
 run the XChange with the envelope
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Parts.Part.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.PartID">
	<summary>
 gets the unique PARTID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.DeliverableUID">
	<summary>
 sets or gets the linkes Deliverable UID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.Workpackage">
	<summary>
 gets or sets the workpackage code
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.Workspace">
	<summary>
 gets or sets the Workspace
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.Description">
	<summary>
 sets or gets the Description
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.Category">
	<summary>
 gets or sets the category
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.Function">
	<summary>
 Gets or sets the function.
 </summary>
	<value>The function.</value>
</member><member name="P:OnTrack.Parts.Part.Responsible">
	<summary>
 sets or gets the responsible Person for the Part
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.ResponsibleOU">
	<summary>
 sets or gets the Responsible OU
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.BlockingItemID">
	<summary>
 Sets or gets the BlockingItem Reference
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.Parttype">
	<summary>
 sets or gets the Part-Type
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.Matchcode">
	<summary>
 sets or gets the MatchCode
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.ChangeReferenceID">
	<summary>
 gets or set the ChangeReferenceID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.Comment">
	<summary>
 gets or sets the general Comment
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Parts.Part.All(System.Boolean)">
	<summary>
 return all Parts as List
 </summary>
	<param name="isDeleted"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Parts.Part.AllByDeliverable(System.Int64,System.Boolean)">
	<summary>
 return a List of parts by deliverableUID
 </summary>
	<param name="deliverableUID"></param>
	<param name="isDeleted"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Parts.Part.Inject(System.String)">
	<summary>
 Load by Primary Key
 </summary>
	<param name="pnid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Parts.Part.CreateSchema(System.Boolean)">
	<summary>
 create persistency Schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Parts.Part.Create(System.String,System.String,System.String)">
	<summary>
 Create an Object in the datastore
 </summary>
	<param name="partid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.InitializedCluster(System.Boolean)">
	<summary>
 Initialize a cluster
 </summary>
	<param name="FORCE"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.CreateClusterID(System.String,System.Boolean)">
	<summary>
 create a clusterID
 </summary>
	<param name="aDependTypeId"></param>
	<param name="isDynamic"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.MarkClusterID(System.String,System.String,System.String)">
	<summary>
 mark a clusterID in the tree
 </summary>
	<param name="aDependTypeId"></param>
	<param name="aClusterID"></param>
	<param name="aSameClusterID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.SaveClusterIDs(System.String,System.Boolean)">
	<summary>
 save the clusterID
 </summary>
	<param name="aDependTypeId"></param>
	<param name="isDynamic"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.UpdateSameClusterID(System.String,System.Boolean)">
	<summary>
 updates same clusterIDs
 </summary>
	<param name="aDependTypeId"></param>
	<param name="isDynamic"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.BuildDependencyNet(System.ComponentModel.BackgroundWorker)">
	<summary>
 Build Dependencies for all Parts
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.BuildDynamicDependencyCluster(System.String,System.ComponentModel.BackgroundWorker)">
	<summary>
 builds dynamic dependency clusters out of the dependencies net
 </summary>
	<param name="workspaceID"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.CheckAllDependencies(System.String,System.ComponentModel.BackgroundWorker)">
	<summary>
 check the dependiencies for all parts in a workspaceID if they are hold
 and create dependency check objects
 </summary>
	<param name="workspaceID"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.CheckDependenciesFor(System.String,OnTrack.Scheduling.clsOTDBDependency@,System.String)">
	<summary>
 check dependencies for a part
 </summary>
	<param name="partID"></param>
	<param name="dependency"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.Guid">
	<summary>
 Gets the GUID for the Object.
 </summary>
	<value>T</value>
</member><member name="P:OnTrack.Database.ormDataObject.IsDomainIgnored">
	<summary>
 Sets the flag for ignoring the domainentry (delete on domain level)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.TableStore">
	<summary>
 Gets the table store.
 </summary>
	<value>The table store.</value>
</member><member name="P:OnTrack.Database.ormDataObject.RunTimeOnly">
	<summary>
 True if a memory data object
 </summary>
	<value>The run time only.</value>
</member><member name="P:OnTrack.Database.ormDataObject.ObjectDefinition">
	<summary>
 returns the object definition associated with this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.ObjectClassDescription">
	<summary>
 returns the object class description associated with this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.TableSchema">
	<summary>
 returns the tableschema associated with this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.DomainID">
	<summary>
 Gets or sets the domain ID.
 </summary>
	<value>The domain ID.</value>
</member><member name="P:OnTrack.Database.ormDataObject.DBDriver">
	<summary>
 sets or gets the DBDriver for the data object to use
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.IsInitialized">
	<summary>
 Gets or sets the PS is initialized.
 </summary>
	<value>The PS is initialized.</value>
</member><member name="P:OnTrack.Database.ormDataObject.ObjectID">
	<summary>
 returns the ObjectID of the Class of this instance
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.IsDeleted">
	<summary>
 Gets or sets the isDeleted.
 </summary>
	<value>The isDeleted.</value>
</member><member name="P:OnTrack.Database.ormDataObject.HasDomainBehavior">
	<summary>
 returns true if object has domain behavior
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.UseCache">
	<summary>
 returns true if object is cached
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.HasDeletePerFlagBehavior">
	<summary>
 returns true if object has delete per flag behavior
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.IsChanged">
	<summary>
 Gets or sets the PS is changed.
 </summary>
	<value>The PS is changed.</value>
</member><member name="P:OnTrack.Database.ormDataObject.IsLoaded">
	<summary>
 Gets or sets the PS is loaded.
 </summary>
	<value>The PS is loaded.</value>
</member><member name="P:OnTrack.Database.ormDataObject.IsCreated">
	<summary>
 Gets or sets the PS is created.
 </summary>
	<value>The PS is created.</value>
</member><member name="M:OnTrack.Database.ormDataObject.Unload">
	<summary>
 unload the Dataobject from the datastore
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.Record">
	<summary>
 Gets or sets the OTDB record.
 </summary>
	<value>The OTDB record.</value>
</member><member name="P:OnTrack.Database.ormDataObject.PrimaryKeyValues">
	<summary>
 returns the primaryKeyvalues
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.SavedToHost">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.SerializeWithHostApplication">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.TableID">
	<summary>
 gets the TableID of the persistency table
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.CreatedOn">
	<summary>
 gets the Creation date in the persistence store
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.UpdatedOn">
	<summary>
 gets the last update date in the persistence store
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.DeletedOn">
	<summary>
 gets the deletion date in the persistence store
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.#ctor(System.String,System.String,OnTrack.Database.iormDatabaseDriver)">
	<summary>
 constructor for ormDataObject
 </summary>
	<param name="tableid"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Finialize">
	<summary>
 clean up with the object
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.RegisterCacheEvents(OnTrack.database.iormObjectCacheManager)">
	<summary>
 Register a cache manager at the events level of the class
 </summary>
	<param name="cache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Validate">
	<summary>
 validates the Business Object as total
 </summary>
	<remarks></remarks>
	<returns>True if validated and OK</returns>
</member><member name="M:OnTrack.Database.ormDataObject.Validate(System.String,System.Object)">
	<summary>
 validates a named object entry of the object
 </summary>
	<param name="enryname"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDataObject.RaiseObjectEntryChanged(System.String)">
	<summary>
 raises the PropetyChanged Event
 </summary>
	<param name="entryname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.ApplyObjectEntryProperty(System.String,System.Object,System.Object@)">
	<summary>
 Apply the ObjectEntryProperty to a value
 </summary>
	<param name="entryname"></param>
	<param name="in"></param>
	<param name="out"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.MergeRecord(OnTrack.Database.ormRecord)">
	<summary>
 Merge Values of an record in own record
 </summary>
	<param name="record"></param>
	<returns>True if successfull </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.DetermineLiveStatus">
	<summary>
 sets the Livecycle status of this object if created or loaded
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.IsAlive(System.Boolean,System.String)">
	<summary>
 checks if the data object is alive
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Initialize(System.Boolean)">
	<summary>
 initialize the data object
 </summary>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.InjectDataObject``1(System.Object[],System.String,OnTrack.Database.iormDatabaseDriver)">
	<summary>
 load DataObject by Type and Primary Key-Array
 </summary>
	<typeparam name="T"></typeparam>
	<param name="pkArray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Persist(System.DateTime,System.Boolean)">
	<summary>
 Persist the object to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.All``1(System.String,System.String,System.String,System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter},System.Boolean)">
	<summary>
 Static Function ALL returns a Collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.CreateDataObjectSchema``1(System.Boolean,OnTrack.Database.iormDatabaseDriver)">
	<summary>
 shared create the schema for this object by reflection
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.AddSwitchRuntimeOffhandler(System.Delegate)">
	<summary>
 Helper for Adding Handlers to SwitchRuntimeOff Event
 </summary>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.SwitchRuntimeOff">
	<summary>
 Switch off the Runtime Mode
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.SwitchRuntimeON">
	<summary>
 set the dataobject to Runtime
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.CreateDataObject``1(System.Object[]@,System.String,System.Boolean,System.Boolean)">
	<summary>
 create a persistable dataobject of type T 
 </summary>
	<typeparam name="T"></typeparam>
	<param name="pkArray"></param>
	<param name="checkUnique"></param>
	<returns>the iotdbdataobject or nothing (if checkUnique)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.CopyPrimaryKeyToRecord(System.Object[]@,OnTrack.Database.ormRecord@,System.String,System.Boolean)">
	<summary>
 copy the Primary key to the record
 </summary>
	<param name="pkArray"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.SubstituteDomainIDinPKArray(System.Object[]@,System.String,System.Boolean)">
	<summary>
 helper substitutes the DomainID in the primary key
 </summary>
	<param name="pkarray"></param>
	<param name="runtimeOnly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.CheckUniqueness(System.Object[],System.Boolean)">
	<summary>
 helper for checking the uniqueness during creation
 </summary>
	<param name="pkarray"></param>
	<param name="runtimeOnly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.ExtractPrimaryKey(OnTrack.Database.ormRecord,System.String,System.Boolean)">
	<summary>
 extract out of a record a Primary Key array
 </summary>
	<param name="record"></param>
	<param name="runtimeOnly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.CloneDataObject``1(OnTrack.Database.iotCloneable{``0},System.Object[])">
	<summary>
 clone a dataobject with a new pkarray. return nothing if fails
 </summary>
	<typeparam name="T"></typeparam>
	<param name="cloneobject"></param>
	<param name="newpkarray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Retrieve``1(System.Object[],System.String,OnTrack.Database.iormDatabaseDriver,System.Boolean,System.Boolean)">
	<summary>
 Retrieve a data object from the cache or load it
 </summary>
	<typeparam name="T"></typeparam>
	<param name="pkArray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Undelete">
	<summary>
 Undelete the data object
 </summary>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Delete">
	<summary>
 Delete the object and its persistancy
 </summary>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.InfuseColumnMapping(OnTrack.Database.iormPersistable@,OnTrack.Database.ormRecord@,OnTrack.Database.otInfuseMode,OnTrack.ObjectClassDescription@)">
	<summary>
 infuse a data objects objectentry column mapped members
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.InfusePrimaryKeys(OnTrack.Database.iormPersistable@,System.Object[]@,System.Boolean)">
	<summary>
 infuse a data objects objectentry column mapped members
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.RaiseOnRelationLoading(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Raise the Instance OnRelationLoading
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.RaiseOnRelationLoaded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Raise the Instance OnRelationLoaded
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.InfuseRelationMapped(OnTrack.Database.iormPersistable@,OnTrack.ObjectClassDescription@,OnTrack.Database.otInfuseMode,System.String)">
	<summary>
 infuse the relation mapped Members of a dataobject
 </summary>
	<param name="dataobject"></param>
	<param name="classdescriptor"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.CascadeRelation(OnTrack.Database.iormPersistable@,OnTrack.ObjectClassDescription@,System.Boolean,System.Boolean,System.String)">
	<summary>
 cascade the update of relational data
 </summary>
	<param name="dataobject"></param>
	<param name="classdescriptor"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.InfuseDataObject(OnTrack.Database.ormRecord@,OnTrack.Database.iormPersistable@,System.Nullable{OnTrack.Database.otInfuseMode})">
	<summary>
 infuse a data object by a record - use reflection and cache. Substitute data object if it is in cache
 </summary>
	<param name="dataobject"></param>
	<param name="record"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Feed(OnTrack.Database.ormRecord)">
	<summary>
 Feed the record belonging to the data object
 </summary>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.FeedRecordDataObject(OnTrack.Database.iormPersistable@,OnTrack.Database.ormRecord@)">
	<summary>
 feed the record from the field of an data object - use reflection of attribute otfieldname
 </summary>
	<param name="dataobject"></param>
	<param name="record"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Infuse(OnTrack.Database.ormRecord@,System.Nullable{OnTrack.Database.otInfuseMode})">
	<summary>
 infuses a data object by a record
 </summary>
	<param name="Record">a fixed ormRecord with the persistence data</param>
	<returns>true if successful</returns>
	<remarks>might be overwritten by class descendants but make sure that you call mybase.infuse</remarks>
</member><member name="T:OnTrack.Database.ormDataObject">
	<summary>
 abstract base class for all data objects
 handles the data operations with an embedded record
 raises all data events
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObjectEventArgs.#ctor(OnTrack.Database.ormDataObject,OnTrack.Database.ormRecord,System.Boolean,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object[],System.Nullable{OnTrack.Database.otInfuseMode})">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.Infusemode">
	<summary>
 Gets the infusemode.
 </summary>
	<value>The infusemode.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.HasDomainBehavior">
	<summary>
 Gets the has domain behavior.
 </summary>
	<value>The has domain behavior.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.DomainID">
	<summary>
 Gets or sets the domain ID.
 </summary>
	<value>The domain ID.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.RelationID">
	<summary>
 Gets or sets the relation ID.
 </summary>
	<value>The relation ID.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.Result">
	<summary>
 Gets or sets the result.
 </summary>
	<value>The result.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.Pkarray">
	<summary>
 Gets or sets the pkarray.
 </summary>
	<value>The pkarray.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.UseCache">
	<summary>
 Gets or sets the use cache.
 </summary>
	<value>The use cache.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.AbortOperation">
	<summary>
 Gets or sets the abort.
 </summary>
	<value>The abort.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.Proceed">
	<summary>
 Gets or sets if to proceed.
 </summary>
	<value>The abort.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.DescribedByAttributes">
	<summary>
 Gets the described by attributes.
 </summary>
	<value>The described by attributes.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.Record">
	<summary>
 Gets the record.
 </summary>
	<value>The record.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.DataObject">
	<summary>
 Gets the object.
 </summary>
	<value>The object.</value>
</member><member name="T:OnTrack.Database.ormDataObjectEventArgs">
	<summary>
 Event Arguments for Data Object Events
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.UIWinFormMessageBox.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.UIWinFormMessageBox.Type">
	<summary>
 Gets or sets the type.
 </summary>
	<value>The type.</value>
</member><member name="P:OnTrack.UI.UIWinFormMessageBox.Title">
	<summary>
 Gets or sets the title.
 </summary>
	<value>The title.</value>
</member><member name="M:OnTrack.UI.UIWinFormMessageBox.CloseOTDBForm">
	<summary>
 Close the Form
 </summary>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.UI.UIWinFormMessageBox.RefreshOTDBForm">
	<summary>
 Refresh the Form
 </summary>
	<remarks></remarks>
	<returns></returns>
</member><member name="P:OnTrack.UI.UIWinFormMessageBox.Message">
	<summary>
 Gets or sets the message.
 </summary>
	<value>The message.</value>
</member><member name="P:OnTrack.UI.UIWinFormMessageBox.Buttons">
	<summary>
 Gets or sets the buttons.
 </summary>
	<value>The buttons.</value>
</member><member name="P:OnTrack.UI.UIWinFormMessageBox.Result">
	<summary>
 Gets or sets the answer.
 </summary>
	<value>The answer.</value>
</member><member name="M:OnTrack.ValueEntry.#ctor">
	<summary>
 constructor of a clsOTDBDefWorkspace
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ValueEntry.DomainID">
	<summary>
 gets the ID of the Domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ValueEntry.ListID">
	<summary>
 gets the ID of the Setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ValueEntry.Selector">
	<summary>
 Description of the setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ValueEntry.Datatype">
	<summary>
 returns the datatype 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ValueEntry.Value">
	<summary>
 gets or sets the value of the domain setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ValueEntry.CreateSchema(System.Boolean)">
	<summary>
 create the objects persistence schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ValueEntry">
	<summary>
 Value Entry Class for List of Values
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.DomainSetting.#ctor">
	<summary>
 constructor of a clsOTDBDefWorkspace
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.DomainSetting.DomainID">
	<summary>
 gets the ID of the Domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.DomainSetting.ID">
	<summary>
 gets the ID of the Setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.DomainSetting.Description">
	<summary>
 Description of the setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.DomainSetting.Datatype">
	<summary>
 returns the datatype 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.DomainSetting.value">
	<summary>
 gets or sets the value of the domain setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.DomainSetting.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Retrieve the workspaceID Cache Object
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.DomainSetting.CreateSchema(System.Boolean)">
	<summary>
 create the objects persistence schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.DomainSetting">
	<summary>
 Domain Setting Definition Class
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Group.HasNoRights">
	<summary>
 has no rights at all ?! -&gt; Blocked ?!
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Group.HasReadRights">
	<summary>
 has right to read
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Group.HasUpdateRights">
	<summary>
 has right to update and read data
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Group.HasAlterSchemaRights">
	<summary>
 Has Right to update, read and alter schema data
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Group.AccessRight">
	<summary>
 gets the accessright out of the setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Group.All">
	<summary>
 Returns a collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Group.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema with use of database driver
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Group.Create(System.String)">
	<summary>
 Create persistency for this object
 </summary>
	<param name="groupname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Group">
	<summary>
 User Definition Class of an OnTrack User
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.GroupMember.All">
	<summary>
 Returns a collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.GroupMember.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema with use of database driver
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.GroupMember.GetGroup">
	<summary>
 Returns the Groupdefinition
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.GroupMember.GetUser">
	<summary>
 Returns the Userdefinition
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.GroupMember.Create(System.String,System.String,System.String,System.Boolean)">
	<summary>
 Create persistency for this object
 </summary>
	<param name="groupname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.GroupMember">
	<summary>
 Group Member Definition Class of an OnTrack User
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.User.GroupNames">
	<summary>
 returns a list of groups
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.User.DefaultWorkspaceID">
	<summary>
 set or return the default workspace
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.User.DefaultDomainID">
	<summary>
 set or return the default workspace
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.User.Password">
	<summary>
 Password
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.User.PersonName">
	<summary>
 gets or set the person id
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.User.Username">
	<summary>
 gets the ontrack username
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.User.HasNoRights">
	<summary>
 has no rights at all ?! -&gt; Blocked ?!
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.User.HasReadRights">
	<summary>
 has right to read
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.User.HasUpdateRights">
	<summary>
 has right to update and read data
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.User.HasAlterSchemaRights">
	<summary>
 Has Right to update, read and alter schema data
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.User.IsAnonymous">
	<summary>
 is anonymous user
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.User.AccessRight">
	<summary>
 gets the accessright out of the setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.All">
	<summary>
 Returns a collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.GetAnonymous">
	<summary>
 returns the anonyous user ( first descending username)
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.GetGroups">
	<summary>
 Returns a list of groupdefinition this belongs to
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.HasSetting(System.String)">
	<summary>
 returns true if the setting exists
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.GetSetting(System.String)">
	<summary>
 returns the setting valid in the domain
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.SetSetting(System.String,OnTrack.Database.otFieldDataType,System.Object)">
	<summary>
 sets the setting valid in the domain
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.LoadSettings(System.Boolean)">
	<summary>
 Load the settings to the settings dictionary
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema with use of database driver
 ATTENTION ! This can only be called if database is set up
 user createSql function otherwise
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.User.Create(System.String)">
	<summary>
 Create persistency for this object
 </summary>
	<param name="username"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.User">
	<summary>
 User Definition Class of an OnTrack User
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.UserSetting.#ctor">
	<summary>
 constructor of a clsOTDBDefWorkspace
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.UserSetting.Username">
	<summary>
 gets the ID of the Domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UserSetting.ID">
	<summary>
 gets the ID of the Setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UserSetting.Description">
	<summary>
 Description of the setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UserSetting.Datatype">
	<summary>
 returns the datatype 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UserSetting.Value">
	<summary>
 gets or sets the value of the domain setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UserSetting.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Retrieve the workspaceID Cache Object
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UserSetting.CreateSchema(System.Boolean)">
	<summary>
 create the objects persistence schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.UserSetting">
	<summary>
 User Setting Definition Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Person.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Person.ID">
	<summary>
 returns the ID of the Person
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Person.Firstname">
	<summary>
 Gets or sets the firstname.
 </summary>
	<value>The firstname.</value>
</member><member name="P:OnTrack.Person.Midnames">
	<summary>
 sets or gets the midnames
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Person.Sirname">
	<summary>
 Gets or sets the Sirname.
 </summary>
	<value>The sirname.</value>
</member><member name="P:OnTrack.Person.Description">
	<summary>
 returns the description of the person
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Person.IsRole">
	<summary>
 Gets or sets the role flag
 </summary>
	<value></value>
</member><member name="P:OnTrack.Person.Company">
	<summary>
 Gets or sets the company ID.
 </summary>
	<value>The company name.</value>
</member><member name="P:OnTrack.Person.ManagerID">
	<summary>
 gets or sets the ManagerID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Person.OrgUnitID">
	<summary>
 sets or gets the Organization Unit ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Person.OrgUnit">
	<summary>
 sets or gets the Organization Unit 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Person.eMail">
	<summary>
 Gets or sets the email address 
 </summary>
	<value>The company name.</value>
</member><member name="P:OnTrack.Person.Phone">
	<summary>
 Gets or sets the Phone number 
 </summary>
	<value>The company name.</value>
</member><member name="P:OnTrack.Person.Fax">
	<summary>
 Gets or sets the email address 
 </summary>
	<value>The company name.</value>
</member><member name="M:OnTrack.Person.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Retrieve
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Person.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Person.All(System.String)">
	<summary>
 returns a collection of all Person Definition Objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Person.BuildID(System.String,System.String,System.String[])">
	<summary>
 build the ID string out of the names
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Person">
	<summary>
 the person definition class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLogMessageDef.#ctor">
	<summary>
 constructor of a Message Definition
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLogMessageDef.Retrieve(System.String,System.String)">
	<summary>
 returns a Object Log Message Definition Object from the data store
 </summary>
	<param name="id"></param>
	<param name="domainID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLogMessageDef.Inject(System.String,System.String)">
	<summary>
 Load the Log Message Definition from store
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLogMessageDef.CreateSchema(System.Boolean)">
	<summary>
 create the persitency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLogMessageDef.All(System.String)">
	<summary>
 return all Log Message Definitions
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectLogMessageDef.Create(System.String,System.String)">
	<summary>
 Create a persistable Log Message
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectLogMessageDef">
	<summary>
 Object Message Definition Class - bound messages to a buisiness object
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.StatusItem.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.StatusItem.Inject(System.String,System.String,System.String)">
	<summary>
 Load and Infuse a status item defintion
 </summary>
	<param name="TYPEID"></param>
	<param name="code"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.StatusItem.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.StatusItem.Create(System.String,System.String,System.String)">
	<summary>
 create a persistable object 
 </summary>
	<param name="typeid"></param>
	<param name="code"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.StatusItem">
	<summary>
 Status ITEM Class for Stati in Object Messages
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Workspace.#ctor">
	<summary>
 constructor of a clsOTDBDefWorkspace
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Workspace.DomainID">
	<summary>
 Gets or sets the domain ID.
 </summary>
	<value>The domain ID.</value>
</member><member name="M:OnTrack.Workspace.Retrieve(System.String,System.Boolean)">
	<summary>
 Retrieve the workspaceID Cache Object
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Workspace.Inject(System.String)">
	<summary>
 load and infuse the current workspaceID object
 </summary>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Workspace.CreateSchema(System.Boolean)">
	<summary>
 create the objects persistence schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Workspace.Create(System.String)">
	<summary>
 creates with this object a new persistable Def workspaceID
 </summary>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Workspace.All">
	<summary>
 returns a List(of clsotdbDefWorkspace) of all workspaceID Definitions
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Workspace">
	<summary>
 Workspace Definition Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.#ctor">
	<summary>
 constructor of a clsOTDBDefWorkspace
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Domain.ID">
	<summary>
 returns the ID of this domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Domain.Description">
	<summary>
 gets and sets the description text of the domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Domain.IsGlobal">
	<summary>
 gets and set the Global Flag of the domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Domain.MinDeliverableUID">
	<summary>
 gets or set the minimum deliverable UID for this domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Domain.MaxDeliverableUID">
	<summary>
 gets or set the maximum Deliverable UID for this domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Domain.Settings">
	<summary>
 gets a list of domain settings
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.OnSessionEnd(System.Object,OnTrack.SessionEventArgs)">
	<summary>
 handles the session start event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.OnSessionStart(System.Object,OnTrack.SessionEventArgs)">
	<summary>
 handles the session end event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.RegisterSession(OnTrack.Session)">
	<summary>
 Register a Session a the Domain
 </summary>
	<param name="session"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.Retrieve(System.String,OnTrack.Database.iormDatabaseDriver,System.Boolean,System.Boolean)">
	<summary>
 Retrieve the workspaceID Cache Object
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.HasSetting(System.String)">
	<summary>
 returns true if the setting exists
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.GetSetting(System.String)">
	<summary>
 returns the setting valid in the domain
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.SetSetting(System.String,OnTrack.Database.otFieldDataType,System.Object)">
	<summary>
 sets the setting valid in the domain
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.LoadSettings">
	<summary>
 Load the settings to the settings dictionary
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.CreateSchema(System.Boolean)">
	<summary>
 create the objects persistence schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Domain.All">
	<summary>
 returns a List(of Domain) of all workspaceID Definitions
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Domain">
	<summary>
 Domain Definition Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.OrgUnit.#ctor">
	<summary>
 constructor of a DefOrgUnit
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.OrgUnit.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Retrieve 
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.OrgUnit.Inject(System.String,System.String)">
	<summary>
 loads and infuses a DefOrgUnit Object with the primary key
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.OrgUnit.CreateSchema(System.Boolean)">
	<summary>
 create the persistence schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.OrgUnit.All">
	<summary>
 returns a collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.OrgUnit">
	<summary>
 Organization Unit Definition Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Site.#ctor">
	<summary>
 constructor of Def OUSite
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Site.ID">
	<summary>
 ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Site.Description">
	<summary>
 Description
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Site.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Retrieve
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Site.Inject(System.String,System.String)">
	<summary>
 Load and infuse the object 
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Site.CreateSchema(System.Boolean)">
	<summary>
 create the persistency object
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Site.All(System.String)">
	<summary>
 returns a collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Site.Create(System.String,System.String)">
	<summary>
 creates a persistable site object
 </summary>
	<param name="id"></param>
	<param name="domainID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Site">
	<summary>
 Site Definition Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.Clone(System.Object[])">
	<summary>
 clone the object with the new primary key
 </summary>
	<param name="pkarray">primary key array</param>
	<remarks></remarks>
	<returns>the new cloned object or nothing</returns>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.Clone(System.Int64,System.String)">
	<summary>
 Clone this data object by primary key
 </summary>
	<param name="uid"></param>
	<param name="workspaceID">optional workspaceID id</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.AllByUID(System.Int64)">
	<summary>
 returns a collection of objects filtered by uid
 </summary>
	<param name="uid">deliverable uid</param>
	<returns>a collection</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.AllByWorkspace(System.String)">
	<summary>
 return a collection of current Targets filtered by workspaceID
 </summary>
	<param name="workspaceID">the workspaceID id</param>
	<returns>a Collection</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.CreateSchema(System.Boolean)">
	<summary>
 create the schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.Inject(System.Int64,System.String)">
	<summary>
 Loads and infuses a Current Target dependent on the workspaceID
 </summary>
	<param name="uid">deliverable uid</param>
	<param name="workspaceID">the workspaceID to look into - default workspaceID used</param>
	<returns>true if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.LoadUniqueBy(System.Int64,System.String)">
	<summary>
 load a unique current Target by its primary keys
 </summary>
	<param name="uid"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.CurrentTarget.Create(System.Int64,System.String,System.String)">
	<summary>
 create a current Target by primary key
 </summary>
	<param name="UID"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.CurrentTarget">
	<summary>
 Current target object points to the current clsOTDBDeliverableTarget 
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.UID">
	<summary>
 gets the UID of the Deliverable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.UPDC">
	<summary>
 gets  the update counter of the target
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.Target">
	<summary>
 gets or sets the Target Date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.PrevTarget">
	<summary>
 gets or set the previous target
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.Responsible">
	<summary>
 Gets or sets the resp.
 </summary>
	<value>The resp.</value>
</member><member name="P:OnTrack.Deliverables.Target.ResponsibleOU">
	<summary>
 Gets or sets the resp OU.
 </summary>
	<value>The resp OU.</value>
</member><member name="P:OnTrack.Deliverables.Target.Comment">
	<summary>
 Gets or sets the resp OU.
 </summary>
	<value>The resp OU.</value>
</member><member name="P:OnTrack.Deliverables.Target.ChangedDate">
	<summary>
 gets or sets the timestamp of the  target date (changed on)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.Revision">
	<summary>
 gets or sets the revision string for the target
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.AllByUid(System.Int64)">
	<summary>
 returns all Targets by Deliverable UID
 </summary>
	<param name="uid"></param>
	<returns>a Collection</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.Create(System.Int64,System.Int64)">
	<summary>
 create the persistent target by primary key
 </summary>
	<param name="uid"></param>
	<param name="updc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.Inject(System.Int64,System.Int64)">
	<summary>
 load and infuse the object by primary key
 </summary>
	<param name="uid"></param>
	<param name="updc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.PublishNewTarget(System.DateTime,System.String,System.Int64,System.String,OnTrack.Deliverables.Target@)">
	<summary>
 publish a new Target to the database from a Date
 </summary>
	<param name="NewTargetDate"></param>
	<param name="workspaceID"></param>
	<param name="UID"></param>
	<param name="revision"></param>
	<param name="NewDeliverableTarget"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.IncreaseRevison(System.Boolean,System.Boolean)">
	<summary>
 Increase the Revision in Form VXX.YY
 </summary>
	<param name="majorFlag">is a major version - increase xx </param>
	<param name="minorFlag">is a minor version - increase yy</param>
	<returns>new revision</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.RunXPreCheck(OnTrack.XChange.XEnvelope@)">
	<summary>
 Run the XPrecheck on the Target with the envelope
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.RunXChange(OnTrack.XChange.XEnvelope@)">
	<summary>
 run the XChange on the Deliverable Target for an Envelope
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.Clone(System.Object[])">
	<summary>
 clone the object with the new primary key
 </summary>
	<param name="pkarray">primary key array</param>
	<remarks></remarks>
	<returns>the new cloned object or nothing</returns>
</member><member name="M:OnTrack.Deliverables.Target.Clone(System.Int64,System.Int64)">
	<summary>
 clone the loaded or created dataobject object
 </summary>
	<param name="UID"></param>
	<param name="updc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.Target">
	<summary>
 target object for the deliverable class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.UpdateAllTracks(System.String,System.ComponentModel.BackgroundWorker)">
	<summary>
 Batch processing for updating all Tracks
 </summary>
	<param name="workspaceID"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.CreateSchema">
	<summary>
 Create persistency schema for deliverable tracks
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.Create(System.Int64,System.Int64,System.Int64,System.Int64)">
	<summary>
 create the data object by primary key
 </summary>
	<param name="deliverableUID"></param>
	<param name="scheduleUID"></param>
	<param name="scheduleUPDC"></param>
	<param name="targetUPDC"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.Clone(System.Object[])">
	<summary>
 clone the track
 </summary>
	<param name="pkarray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.Inject(System.Int64,System.Int64,System.Int64,System.Int64)">
	<summary>
 load and infuse data object by primary key
 </summary>
	<param name="deliverableUID"></param>
	<param name="scheduleUID"></param>
	<param name="scheduleUPDC"></param>
	<param name="targetUPDC"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.UpdateFromTarget(OnTrack.Deliverables.Target@,System.String,System.Boolean,System.Boolean)">
	<summary>
  updateFromTarget -&gt; update a Track from a given Target
 </summary>
	<param name="TARGET"></param>
	<param name="workspaceID"></param>
	<param name="PERSIST"></param>
	<param name="checkGAP"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.UpdateFromSchedule(OnTrack.Scheduling.Schedule@,System.Int64,System.String,System.Boolean,System.Boolean)">
	<summary>
 updateFromSchedule -&gt; update a Track from a given Schedule
 </summary>
	<param name="SCHEDULE"></param>
	<param name="targetUPDC"></param>
	<param name="workspaceID"></param>
	<param name="PERSIST"></param>
	<param name="checkGAP"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.UpdateFromDeliverable(OnTrack.Deliverables.Deliverable@,System.String,System.Boolean,System.Boolean)">
	<summary>
 updateFromDeliverable -&gt; updated a Track from a given deliverable
 </summary>
	<param name="DELIVERABLE"></param>
	<param name="workspaceID"></param>
	<param name="checkGAP"></param>
	<param name="PERSIST"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.SetTarget">
	<summary>
 setTarget -&gt; set the Internal Target
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.SetSchedule">
	<summary>
 setSchedule -&gt; set the Internal Schedule
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.CheckOnGap">
	<summary>
 checkOnGAP -&gt; Calculate the GAP
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.CheckOnBaselineGap">
	<summary>
 checkOnBaselineGAP -&gt; Calculate the baseline GAP
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.Track">
	<summary>
 deliverable track class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.DeliverableType.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.DeliverableType.DefScheduleType">
	<summary>
 Gets or sets the type of the def schedule.
 </summary>
	<value>The type of the def schedule.</value>
</member><member name="P:OnTrack.Deliverables.DeliverableType.Comment">
	<summary>
 Gets or sets the comment.
 </summary>
	<value>The comment.</value>
</member><member name="P:OnTrack.Deliverables.DeliverableType.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Deliverables.DeliverableType.Typeid">
	<summary>
 Gets or sets the typeid.
 </summary>
	<value>The typeid.</value>
</member><member name="M:OnTrack.Deliverables.DeliverableType.Clone(System.Object[])">
	<summary>
 Clone the object with its primary key array.
 </summary>
	<param name="pkArray"></param>
	<returns>the new object or nothing</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.DeliverableType.Clone(System.String,System.String)">
	<summary>
 Clone the deliverable type
 </summary>
	<param name="typeid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.DeliverableType.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.DeliverableType.All(System.String)">
	<summary>
 returns a List(of Delivertype) for the DomainID
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.DeliverableType">
	<summary>
 Definition class for Deliverables
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Uid">
	<summary>
 gets the UID of the deliverable (unique)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.FirstRevisionUID">
	<summary>
 set or gets the first revision uid - might be null
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Revision">
	<summary>
 gets or set the revision id 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Format">
	<summary>
 gets or sets the format of the deliverable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.DeliverableID">
	<summary>
 gets or sets the ID of the deliverable (non-unique)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.WorkspaceID">
	<summary>
 gets or sets the ID of the deliverable (non-unique)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Description">
	<summary>
 gets or sets the description of the deliverable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Category">
	<summary>
 sets or gets the category of the deliverable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.IsRevision">
	<summary>
 true if this is a revision 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.IsFirstRevision">
	<summary>
 True if this deliverable is first revision
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.ResponsibleID">
	<summary>
  gets or sets the responsible Person ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.ResponsibleOUID">
	<summary>
 gets or sets the Responsible Organization Unit ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Matchcode">
	<summary>
 gets or sets the matchcode 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.PartID">
	<summary>
 gets or sets the Part Id related to the deliverable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.ChangeReferenceID">
	<summary>
 gets or sets the Change Reference ID 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.TypeID">
	<summary>
 gets or sets the type ID 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.WBSID">
	<summary>
 gets or sets the wbs ID 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Workpackage">
	<summary>
 gets or sets the workpackage code
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.WBSCode">
	<summary>
 gets or sets the wbs code
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.function">
	<summary>
 gets or sets the function
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.BlockingItemID">
	<summary>
 gets or sets the blocking item reference ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Comment">
	<summary>
 gets or sets the comment
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Activetag">
	<summary>
 gets the activity tag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Configtag">
	<summary>
 gets  the config tag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Purge">
	<summary>
 Purge revisions of a deliverable
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Inject(System.Int64)">
	<summary>
 loads and infuse the deliverable by primary key from the data store
 </summary>
	<param name="UID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.All(System.Boolean,System.String)">
	<summary>
 returns a collection of all deliverables (not deleted)
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.AllUIDs">
	<summary>
 returns a collection of all uids of deliverables
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.AllByPnid(System.String,System.String)">
	<summary>
 return a collection of deliverables filtered by partid
 </summary>
	<param name="partid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.AllRevisionUIDsBy(System.Int64)">
	<summary>
 returns all revisions of a firstrevision including it
 </summary>
	<param name="firstrevisionUID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetPart">
	<summary>
 Load the related part object
 </summary>
	<returns>clsOTDBPart or nothing if load failed</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetCurrTarget(System.String)">
	<summary>
 return the related current target object
 </summary>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetCurrSchedule(System.String)">
	<summary>
 retrieve the current schedule object
 </summary>
	<param name="workspaceID">optional workspaceID id</param>
	<returns>the data object or nothing</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetSchedule(System.String)">
	<summary>
 retrieves the active and curent schedule object for the deliverable 
 </summary>
	<param name="workspaceID">workspaceID id</param>
	<returns>a scheduling object or nothing</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetTarget(System.String)">
	<summary>
 retrieves the target object (most current)
 </summary>
	<param name="workspaceID">optional workspaceID id</param>
	<returns>the data object or nothing</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Create(System.Int64,System.String,System.String,System.String)">
	<summary>
 create unique persistable object by primary key
 </summary>
	<param name="uid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.CreateFirstRevision(System.Int64,System.String,System.Boolean)">
	<summary>
 createFirstRevision : add a FirstRevision
 </summary>
	<param name="uid"></param>
	<param name="newRevision"></param>
	<param name="persist"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.AddRevision(System.Int64,System.String,System.Boolean)">
	<summary>
 clones the deliverable and inserts a new revision
 </summary>
	<param name="UID"></param>
	<param name="newRevision"></param>
	<param name="persist"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Clone(System.Object[])">
	<summary>
 Clone the object with its primary key array. if {uid} = {0} generate a new uid
 </summary>
	<param name="pkArray"></param>
	<returns>the new object or nothing</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Clone(System.Int64)">
	<summary>
 Clone the deliverable
 </summary>
	<param name="UID">new uid If 0 then generate a new uid</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.Deliverable">
	<summary>
 Deliverable Class
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstDepTypeIDIFC">
	<summary>
 Dependency Type Interfaces
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstDelimiter">
	<summary>
 Default Delimiter for String Expressions
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstOTDBSchemaVersion">
	<summary>
 The Schema Version - increase here to trigger recreation of the database schema
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstGlobalConfigSetName">
	<summary>
 Config Property name
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstCPNUseConfigSetName">
	<summary>
  Parameters names for config parameters read from .ini or documents
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstCPVDBTypeSqlServer">
	<summary>
 config Property value
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstGlobalDomain">
	<summary>
 Global Domain Name
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstModuleCore">
	<summary>
 Name of the different OnTrack Modules
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.ApplicationName">
	<summary>
 Gets or sets the name of the application.
 </summary>
	<value>The name of the application.</value>
</member><member name="P:OnTrack.ot.CurrentConfigSetName">
	<summary>
 returns the name of the standard Config set to be used - might be nothing if not set
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.CurrentConfigFileName">
	<summary>
 sets or gets the name of the current config file name
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.ConfigFileLocations">
	<summary>
 Gets the configfilelocations.
 </summary>
	<value>The configfilelocations.</value>
</member><member name="P:OnTrack.ot.ObjectClassRepository">
	<summary>
 gets the Object Class Repository
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.CurrentSession">
	<summary>
 Property CurrentSession 
 </summary>
	<value></value>
	<returns>the current session object</returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.CurrentDBDriver">
	<summary>
 Gets the primary DB env.
 </summary>
	<value>The primary DB env.</value>
</member><member name="P:OnTrack.ot.Errorlog">
	<summary>
 returns the otdb errorlog or nothing
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.IsInitialized">
	<summary>
 Gets or sets the OTD bis initialized.
 </summary>
	<value>The OTD bis initialized.</value>
</member><member name="P:OnTrack.ot.ObjectClassDescriptions">
	<summary>
 returns an IEnumerable of all Object Class Descriptions
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.CurrentConnection(System.Boolean,OnTrack.otAccessRight,System.String,System.String)">
	<summary>
 Gets or sets the O TDB connection.
 </summary>
	<value>The O TDB connection.</value>
</member><member name="P:OnTrack.ot.IsConnected">
	<summary>
 return True if the Current Connection exists to the database
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.UsedConfigFileLocation">
	<summary>
 gets the used location for the config file location
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.Username">
	<summary>
 returns Current Username in the current connection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.InstalledModules">
	<summary>
 retuns a list of Installed OnTrack Modules
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.ConfigSetNamesToSelect">
	<summary>
 returns a list of selectable config set names without global
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.ConfigSetNames">
	<summary>
 returns a list of ConfigSetnames
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.ReadConfigFile(System.String,System.String)">
	<summary>
 reads the config parameters from the configfile
 </summary>
	<param name="configFilePath">path where to read config file</param>
	<param name="configFileName">name of the config file to read</param>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetConfigProperty(System.String,System.UInt16,System.String,OnTrack.ComplexPropertyStore.Sequence)">
	<summary>
 Gets the Property of a config set. if configsetname is ommitted then check currentconfigset and the global one
 </summary>
	<param name="name">name of property</param>
	<returns>object of the property</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.HasConfigProperty(System.String,System.String,OnTrack.ComplexPropertyStore.Sequence)">
	<summary>
 has the config set the named property
 </summary>
	<param name="name">name of property</param>
	<returns>return true</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.RetrieveConfigProperties(System.Boolean)">
	<summary>
 retrieve the Config parameters of OnTrack and write it to the PropertyBag
 </summary>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetObjectClassDescriptionByTable(System.String)">
	<summary>
 Retrieves a List of  ObjectClasses Descriptions referenced by a tableid
 </summary>
	<param name="tableid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetObjectClassByTable(System.String)">
	<summary>
 Retrieves the ObjectClasses as system.type referenced by a tableid
 </summary>
	<param name="tableid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetBootStrapObjectClassDescriptions">
	<summary>
 returns the names of the bootstrapping tables
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetBootStrapObjectClassIDs">
	<summary>
 returns the names of the bootstrapping tables
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetObjectClassDescription(System.Type)">
	<summary>
 returns the object class description for a type
 </summary>
	<param name="type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetObjectClassDescriptionsForModule(System.String)">
	<summary>
 Returns a List of ObjectClassDescriptions per Modulename
 </summary>
	<param name="modulename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetBootStrapTableNames">
	<summary>
 returns a List of Boot strapping tables
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetObjectClassType(System.String)">
	<summary>
 returns the type of the business object class if any
 </summary>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetSchemaTableColumnAttribute(System.String,System.String)">
	<summary>
 returns a SchemaColumnAttribute for columnname and tablename from the core repisotory
 </summary>
	<param name="columnname"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.Initialize(System.Boolean)">
	<summary>
 Initialize the OTDB Envirormenent
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetDBParameter(System.String,System.Boolean)">
	<summary>
 retrieve a DB Parameter from Ontrack from the central core module
 </summary>
	<param name="name"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.SetDBParameter(System.String,System.Object,System.Boolean,System.Boolean)">
	<summary>
 sets a DB Parameter (in the DB) from the central core module
 </summary>
	<param name="name"></param>
	<param name="value"></param>
	<param name="updateOnly"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetTableStore(System.String,System.Boolean)">
	<summary>
 returns a TableStore for the id from the central OnTrack Core Module
 </summary>
	<param name="tableid"></param>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.AddErrorToLog(OnTrack.SessionLogMessage@)">
	<summary>
 Add Error Message to the ErrorLog of the Current Session
 </summary>
	<param name="otdberror">clsOTDBError object</param>
	<returns>true if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetLastError">
	<summary>
 returns the most recent error from error log or nothing
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.CoreMessageHandler(System.Boolean,System.Exception,System.Object,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,OnTrack.otCoreMessageType,OnTrack.ObjectLog@,System.String)">
	<summary>
 central error handler .. all messages and error conditions are fed here
 </summary>
	<param name="SHOWMSGBOX"></param>
	<param name="EXCEPTION"></param>
	<param name="ARG1"></param>
	<param name="SUBNAME"></param>
	<param name="TABLENAME"></param>
	<param name="ENTRYNAME"></param>
	<param name="message"></param>
	<param name="break"></param>
	<param name="NoOTDBAvailable"></param>
	<param name="messagetype"></param>
	<param name="MSGLOG"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.#ctor(System.String,OnTrack.Session@)">
	<summary>
 Constructor
 </summary>
	<param name="ID">an ID for this driver</param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.adonetDBDriver.OnTrackDataSet">
	<summary>
 Gets the on track data set.
 </summary>
	<value>The on track data set.</value>
</member><member name="P:OnTrack.Database.adonetDBDriver.IsInitialized">
	<summary>
 returns True if driver is initialized.
 </summary>
	<value></value>
</member><member name="P:OnTrack.Database.adonetDBDriver.NativeConnection">
	<summary>
 gets the native connection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.Initialize(System.Boolean)">
	<summary>
 initialize driver
 </summary>
	<param name="Force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.OnStartofBootstrap(System.Object,OnTrack.SessionEventArgs)">
	<summary>
 Start of Bootstrap of the session
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.OnEndOfBootstrap(System.Object,OnTrack.SessionEventArgs)">
	<summary>
 handle the end of bootstrap
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.Reset">
	<summary>
 reset the Driver
 </summary>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.HasTable(System.String,OnTrack.Database.iormConnection@,System.Object)">
	<summary>
 returns True if data store has the table name
 </summary>
	<param name="tablename"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.GetIndex(System.Object@,OnTrack.IndexDefinition@,System.Boolean,System.Boolean,OnTrack.Database.iormConnection@)">
	<summary>
 gets or creates a native index object out of a indexdefinition
 </summary>
	<param name="nativeTable"></param>
	<param name="indexdefinition"></param>
	<param name="forceCreation"></param>
	<param name="createOrAlter"></param>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.GetTargetTypeFor(OnTrack.Database.otFieldDataType)">
	<summary>
 returns the target type for a OTDB FieldType - MAPPING
 </summary>
	<param name="type"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.adonetDBDriver.InstallOnTrackDatabase(System.Boolean,System.String[])">
	<summary>
 Install the schema of Ontrack Database
 </summary>
	<param name="askBefore"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.VerifyOnTrackDatabase(System.String[],System.Boolean,System.Boolean)">
	<summary>
 Checks if the most important objects are here
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.RaiseRequestBootstrapInstall(System.Object,System.EventArgs@)">
	<summary>
  raise the RequestBootStrapInstall Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.CreateGlobalDomain(System.Object@)">
	<summary>
 creates the entry for the global domain in bootstrapping
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.HasAdminUserValidation(System.Object@)">
	<summary>
 returns true if there is a Admin User in the user definition of this database
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.GetUserValidation(System.String,System.Boolean,System.Object@)">
	<summary>
 Gets the def user validation structure from the database.
 </summary>
	<param name="Username">The username.</param>
	<param name="SelectAnonymous"></param>
	<param name="nativeConnection">The native connection.</param>
	<returns></returns>
</member><member name="P:OnTrack.Database.InternalConnectionEventArgs.NativeConnection">
	<summary>
 Gets the native connection.
 </summary>
	<value>The native connection.</value>
</member><member name="P:OnTrack.Database.InternalConnectionEventArgs.Connection">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="P:OnTrack.Database.adonetConnection.IsNativeInternalLocked">
	<summary>
 Gets or sets the is native internal locked.
 </summary>
	<value>The is native internal locked.</value>
</member><member name="P:OnTrack.Database.adonetConnection.NativeConnection">
	<summary>
 Gets the native connection.
 </summary>
	<value>The native connection.</value>
</member><member name="P:OnTrack.Database.adonetConnection.IsConnected">
	<summary>
 Gets the is connected.
 </summary>
	<value>The is connected.</value>
</member><member name="M:OnTrack.Database.adonetConnection.Disconnect">
	<summary>
 Disconnects this instance of the connection with raising events
 </summary>
	<returns></returns>
</member><member name="P:OnTrack.Database.adonetConnection.NativeInternalConnection">
	<summary>
 gets the native internal connection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetConnection.CreateNewNativeConnection">
	<summary>
 create a new native Connection (not connected)
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetConnection.Connect(System.Boolean,OnTrack.otAccessRight,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Connects the specified FORCE.
 </summary>
	<param name="FORCE">The FORCE.</param>
	<param name="AccessRequest">The access request.</param>
	<param name="OTDBUsername">The OTDB username.</param>
	<param name="OTDBPassword">The OTDB password.</param>
	<param name="exclusive">The exclusive.</param>
	<param name="notInitialize">The not initialize.</param>
	<returns></returns>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.CharachterOctetLength">
	<summary>
 Gets or sets the length of the charachter octet.
 </summary>
	<value>The length of the charachter octet.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.DateTimePrecision">
	<summary>
 Gets or sets the date time precision.
 </summary>
	<value>The date time precision.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.NumericScale">
	<summary>
 Gets or sets the numeric scale.
 </summary>
	<value>The numeric scale.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.NumericPrecision">
	<summary>
 Gets or sets the numeric precision.
 </summary>
	<value>The numeric precision.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.Catalog">
	<summary>
 Gets or sets the catalog.
 </summary>
	<value>The catalog.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.DataType">
	<summary>
 Gets or sets the type of the data.
 </summary>
	<value>The type of the data.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.Default">
	<summary>
 Gets or sets the default.
 </summary>
	<value>The default.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.HasDefault">
	<summary>
 Gets or sets the has default.
 </summary>
	<value>The has default.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.CharacterMaxLength">
	<summary>
 Gets or sets the length of the character max.
 </summary>
	<value>The length of the character max.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.Ordinal">
	<summary>
 Gets or sets the ordinal.
 </summary>
	<value>The ordinal.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.IsNullable">
	<summary>
 Gets or sets the is nullable.
 </summary>
	<value>The is nullable.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.ColumnName">
	<summary>
 Gets or sets the name of the column.
 </summary>
	<value>The name of the column.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="M:OnTrack.Database.adonetTableSchema.reset">
	<summary>
 resets the TableSchema
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.adonetTableSchema.TableID">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="M:OnTrack.Database.adonetTableSchema.GetColumnDescription(System.UInt16)">
	<summary>
 get the ColumnDescription of Field 
 </summary>
	<param name="Index">Index no</param>
	<returns>ColumnDescription</returns>
	<remarks>Returns Nothing on range bound exception</remarks>
</member><member name="M:OnTrack.Database.adonetTableSchema.GetCommand(System.String,OnTrack.Database.adonetTableSchema.CommandType)">
	<summary>
 return a Command
 </summary>
	<param name="indexname"></param>
	<param name="commandtype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableSchema.CreateNativeDBParameter">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableSchema.CreateNativeDBCommand">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableSchema.IsNativeDBTypeOfVar(System.Object)">
	<summary>
	</summary>
	<param name="type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableSchema.BuildCommand(System.String,OnTrack.Database.adonetTableSchema.CommandType,System.Data.IDbConnection@)">
	<summary>
 buildcommand builds per Indexname and commandtype the Command and prepare it
 </summary>
	<param name="commandtype">type of clsADONETTableSchema.commandtype</param>
	<param name="indexname">name of the index</param>
	<returns>the IDBCommand </returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.adonetTableSchema">
	<summary>
 CLASS describes the schema per table of the database itself
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.#ctor(OnTrack.Database.iormConnection,System.String,System.Boolean)">
	<summary>
 constructor
 </summary>
	<param name="connection"></param>
	<param name="TableID"></param>
	<param name="forceSchemaReload"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.adonetTableStore.CacheTable">
	<summary>
 gets the current cache Table
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.adonetTableStore.CacheViews">
	<summary>
 gets an enumerable of the cached views (indices)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.Convert2ObjectData(System.Object,System.Object,System.Object@,System.Nullable{System.Boolean},System.Object,System.Boolean@)">
	<summary>
 converts data to object data
 </summary>
	<param name="index"></param>
	<param name="invalue"></param>
	<param name="outvalue"></param>
	<param name="abostrophNecessary"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.IsCacheInitialized">
	<summary>
 if Cache is Initialized and running 
 </summary>
	<returns>return true</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.InitializeCache(System.Boolean)">
	<summary>
 Initialize Cache 
 </summary>
	<returns>true if successfull </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.CreateNativeDBCommand(System.String,System.Data.IDbConnection@)">
	<summary>
 specific Command
 </summary>
	<param name="commandstr"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.DelRecordByPrimaryKey(System.Object[]@,System.Boolean)">
	<summary>
 deletes a Record in the database by Primary key
 </summary>
	<param name="primaryKeyArray">Array of Objects as Primary Key</param>
	<param name="silent"></param>
	<returns>true if successfull </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.GetRecordByPrimaryKey(System.Object[]@,System.Boolean)">
	<summary>
 GetRecordbyPrimaryKey returns a clsOTDBRecord object by the Primarykey from the Database
 </summary>
	<param name="primaryKeyArray">PrimaryKey Array</param>
	<param name="silent"></param>
	<returns>returns Nothing if not found otherwise a clsOTDBRecord</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.UpdateDBDataTable(System.Data.IDbDataAdapter@,System.Data.DataTable@)">
	<summary>
 Update a Datatable with the adapter
 </summary>
	<param name="datatable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.GetRecordsBySqlCommand(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@)">
	<summary>
 returns a collection of records selected by this helper command which creates an SqlCommand with an ID or reuse one
 </summary>
	<param name="ID"></param>
	<param name="wherestr"></param>
	<param name="fullsqlstr"></param>
	<param name="innerjoin"></param>
	<param name="orderby"></param>
	<param name="silent"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.PersistCache(OnTrack.Database.ormRecord@,System.DateTime,System.Boolean)">
	<summary>
 persists aRecord to the database if aRecord is created or loaded
 </summary>
	<param name="record">clsOTDBRecord</param>
	<param name="timestamp">the Timestamp to be used for the ChangedOn or CreatedOn</param>
	<param name="silent">no messages</param>
	<returns>true if successfull and written, false if error or no changes</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.MileStoneDefinition.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.MileStoneDefinition.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Retrieve
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.MileStoneDefinition.Inject(System.String,System.String)">
	<summary>
 load and infuse a milestone definition 
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.MileStoneDefinition.CreateSchema(System.Boolean)">
	<summary>
 create a persistance schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.MileStoneDefinition.All(System.String)">
	<summary>
 Return a collection of all def Milestones
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.MileStoneDefinition.Create(System.String,System.String)">
	<summary>
 create persistable object with primary key ID
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.MileStoneDefinition">
	<summary>
 milestone definition class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleTask.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleTask.Inject(System.String,System.String)">
	<summary>
 loads and infuses the schedule task definition by primary key
 </summary>
	<param name="scheduletype"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleTask.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleTask.Persist(System.DateTime)">
	<summary>
 Persist the data object 
 </summary>
	<param name="TIMESTAMP"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleTask.All">
	<summary>
 retrieve a collection of all schedule task definition object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDefScheduleTask.Create(System.String,System.String)">
	<summary>
 create the data object with primary key
 </summary>
	<param name="scheduletype"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.clsOTDBDefScheduleTask">
	<summary>
 Definition class of a schedule task
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestoneDefinition.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestoneDefinition.Retrieve(System.String,System.String,System.String,System.Boolean)">
	<summary>
 Retrieve
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestoneDefinition.GetDefMilestone">
	<summary>
 retrieve related Milestone Definition Object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestoneDefinition.Inject(System.String,System.String,System.String)">
	<summary>
 load the object by primary keys
 </summary>
	<param name="scheduletype"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestoneDefinition.CreateSchema(System.Boolean)">
	<summary>
 create persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestoneDefinition.Persist(System.DateTime)">
	<summary>
 Persist the Object
 </summary>
	<param name="TIMESTAMP"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestoneDefinition.All">
	<summary>
 retrieve a collection of all schedule milestone definition objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestoneDefinition.AllByType(System.String)">
	<summary>
 returns a List of Schedule Milestone Definitions by scheduletype
 </summary>
	<param name="scheduletype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestoneDefinition.Create(System.String,System.String,System.String)">
	<summary>
 create the persistable object
 </summary>
	<param name="SCHEDULETYPE"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.ScheduleMilestoneDefinition">
	<summary>
 Definition of a schedule milestone class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.Initialize">
	<summary>
 initialize the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.Delete">
	<summary>
 delete the data object and all members
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.Orderno">
	<summary>
 orderno returns an object array of orderno's
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.MembersByOrderNo">
	<summary>
  Members returns a Collection of Members (Milestone Definitions) in Order of the OrderNo
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.Members">
	<summary>
  returns a Collection of Members
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.Inject(System.String,System.String)">
	<summary>
	</summary>
	<param name="scheduletype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.Persist(System.DateTime)">
	<summary>
 Persist the data object and all loaded definition memebrs
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.Create(System.String,System.String)">
	<summary>
 create the data object by primary key
 </summary>
	<param name="SCHEDULETYPE"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.ScheduleDefinition">
	<summary>
 schedule definition object
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.Schedule.NoMilestones">
	<summary>
 gets the number of milestones in the schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.Schedule.IsForecastChanged">
	<summary>
 returns true if the the forecast is changed since Inject / last persist
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.Schedule.Typeid">
	<summary>
 returns the type id of the schedule type of this schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.Schedule.haveMileStonesChanged">
	<summary>
 true if a milestone was changed after last load / persist / publish
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.GetDefSchedule">
	<summary>
 retrieve the related Schedule Definition object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.GetDefScheduleMilestone(System.String)">
	<summary>
 retrieve the related Schedule Milestone Definition Object
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.Initialize">
	<summary>
 Initialize the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.GetMilestoneValue(System.String,System.Boolean)">
	<summary>
 milestone returns the Milestone Value as object or Null if not exists
 </summary>
	<param name="ID"></param>
	<param name="ORIGINAL"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.SetMilestone(System.String,System.Object,System.Boolean)">
	<summary>
 setMilestone ID to Value
 </summary>
	<param name="ID"></param>
	<param name="Value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.MoveMilestone(System.Int64,System.String,System.Boolean)">
	<summary>
 move the milestone in date range
 </summary>
	<param name="noDays"></param>
	<param name="MSID"></param>
	<param name="considerWorkingDays"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.MoveSchedule(System.Int64,System.String,System.Boolean)">
	<summary>
 move the full schedule in date range
 </summary>
	<param name="noDays"></param>
	<param name="startMS"></param>
	<param name="considerWorkingDays"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.GetDefScheduleMSbyOrder(System.Boolean)">
	<summary>
 getDefScheduleMSbyOrder returns a Collection of ScheduleMilestones by Orderno
 </summary>
	<param name="justDates"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.AllByUID(System.Int64)">
	<summary>
 return a collection of all schedules of a uid
 </summary>
	<param name="UID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.LoadMilestones(System.String)">
	<summary>
 load all Milestones as Members -&gt; look for Actuals access
 </summary>
	<param name="scheduletypeid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.Delete">
	<summary>
 delete the record and all members
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.Milestones">
	<summary>
 returns all schedule milestones
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.AddMilestone(OnTrack.Scheduling.ScheduleMilestone@)">
	<summary>
 Add a Milestone
 </summary>
	<param name="Milestone"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.Inject(System.Int64,System.String)">
	<summary>
 load the current schedule by uid and optionally workspaceID
 </summary>
	<param name="uid"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.Inject(System.Int64,System.Int64)">
	<summary>
 loads an schedule from store
 </summary>
	<param name="UID"></param>
	<param name="updc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.Retrieve(System.Int64,System.Int64)">
	<summary>
 loads an schedule from store
 </summary>
	<param name="UID"></param>
	<param name="updc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.GetDeliverableTrack">
	<summary>
 retrieve the corresponding deliverableTrack
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.hasMilestone(System.String,OnTrack.otMilestoneType,System.Boolean)">
	<summary>
 if the milestone by id exists
 </summary>
	<param name="ID"></param>
	<param name="MSTYPEID"></param>
	<param name="HASDATA"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.HasMilestoneDate(System.String)">
	<summary>
 has the Milestone date data ?!
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.IsMilestoneValueMissing(System.String,System.Boolean)">
	<summary>
 returns true if the milestone has no data or does not exist (optional ifNotExists)
 </summary>
	<param name="ID"></param>
	<param name="ifNotExists"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.IsFinished">
	<summary>
 is the schedule finished
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.GetTimeInterval(System.String)">
	<summary>
 timeinterval for the task
 </summary>
	<param name="TaskTypeID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.DrawBaseline(OnTrack.ObjectLog@,System.DateTime,System.DateTime,System.Boolean)">
	<summary>
 creates out of this Schedule a new Baseline and updates all other Objects
 </summary>
	<param name="MSGLOG"></param>
	<param name="REFDATE"></param>
	<param name="TIMESTAMP"></param>
	<param name="ForceSerializeToOTDB"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.IncreaseRevison(System.Boolean,System.Boolean)">
	<summary>
 increase revision in Form VXX.YY
 </summary>
	<param name="MajorFlag"></param>
	<param name="MinorFlag"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.Persist(System.DateTime,System.Boolean)">
	<summary>
 Persist the data object
 </summary>
	<param name="TIMESTAMP"></param>
	<param name="ForceSerializeToOTDB"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.Clone(System.Object[])">
	<summary>
 clones an object
 </summary>
	<param name="pkarray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.CloneToWorkspace(System.String,System.Int64,System.Int64,System.Boolean)">
	<summary>
 clone this schedule to a specific workspaceID by id
 </summary>
	<param name="workspaceID"></param>
	<param name="UID"></param>
	<param name="updc"></param>
	<param name="setCurrSchedule"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.GetMaxUpdc(System.Int64@,System.String)">
	<summary>
 retrieve maximum update count from the datastore
 </summary>
	<param name="max">the max to be set</param>
	<param name="workspaceID">optional workspaceID</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.RunXPrecheck(OnTrack.XChange.XEnvelope@)">
	<summary>
 run XChange on an envelope
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.RunXChange(OnTrack.XChange.XEnvelope@)">
	<summary>
 run XChange on an envelope
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.runXChangeOLD(System.Collections.Generic.Dictionary{System.Object,System.Object}@,OnTrack.XChange.clsOTDBXChangeConfig@,OnTrack.ObjectLog@)">
	<summary>
 run XChange on a Schedule Object
 </summary>
	<param name="MAPPING"></param>
	<param name="CHANGECONFIG"></param>
	<param name="MSGLOG"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.runXPreCheckOLD(System.Collections.Generic.Dictionary{System.Object,System.Object}@,OnTrack.XChange.clsOTDBXChangeConfig@,OnTrack.ObjectLog@)">
	<summary>
 run Xchange Precheck
 </summary>
	<param name="MAPPING"></param>
	<param name="CHANGECONFIG"></param>
	<param name="MSGLOG"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.Inject(OnTrack.XChange.XEnvelope@)">
	<summary>
 loads the schedule from the Store by values from the envelope
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Schedule.AddSlotCompounds(OnTrack.XChange.XEnvelope@)">
	<summary>
 Add Compounds Slots to the Envelope
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.Schedule">
	<summary>
 schedule class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.UniqueTag">
	<summary>
 unique Tag
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.Initialize">
	<summary>
 Initialize the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.Inject(System.Int64,System.Int64,System.String)">
	<summary>
 Load and infuse the schedule milestone from the data store by primary key
 </summary>
	<param name="UID"></param>
	<param name="updc"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema 
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.Clone(System.Int64,System.Int64,System.String)">
	<summary>
 Clone the schedule milestone by new primary key
 </summary>
	<param name="UID"></param>
	<param name="updc"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.Clone(System.Object[])">
	<summary>
 clone the data object by primary key array
 </summary>
	<param name="pkArray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.ScheduleMilestone">
	<summary>
 Schedule Milestone Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleLink.#ctor">
	<summary>
 constructor of Current schedule
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleLink.Type">
	<summary>
 Gets or sets the type.
 </summary>
	<value>The type.</value>
</member><member name="P:OnTrack.Scheduling.ScheduleLink.TagObject">
	<summary>
 gets the TAG of the scheduled business object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleLink.TagUID">
	<summary>
 gets the TAG of the scheduled business object uid
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleLink.Milestone">
	<summary>
 gets the TAG of the scheduled business object uid milestone
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleLink.ToTagObject">
	<summary>
 gets the TAG to the scheduled business object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleLink.ToTagUID">
	<summary>
 gets the TAG to the scheduled business uid
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleLink.ToTagUIDMilestone">
	<summary>
 gets the TAG to the scheduled business milestone
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleLink.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.ScheduleLink">
	<summary>
 the current schedule class links the current schedule updc to a scheduled object 
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.CurrentSchedule.#ctor">
	<summary>
 constructor of Current schedule
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.CurrentSchedule.UID">
	<summary>
 gets the schedule UID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.CurrentSchedule.TagObject">
	<summary>
 gets the TAG of the scheduled business object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.CurrentSchedule.TagUID">
	<summary>
 gets the TAG of the scheduled business object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.CurrentSchedule.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.CurrentSchedule.Retrieve(System.Int64,System.String)">
	<summary>
 retrieves a clsotdbcurrschedule from the datastore
 </summary>
	<param name="UID"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.CurrentSchedule.Inject(System.Int64,System.String)">
	<summary>
 loads the currschedule from the datastore
 </summary>
	<param name="UID"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.CurrentSchedule.LoadUniqueBy(System.Int64,System.String)">
	<summary>
 load the object by the PrimaryKeys
 </summary>
	<param name="UID"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.CurrentSchedule">
	<summary>
 the current schedule class links the current schedule updc  in a given workspace
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UserValidation">
	<summary>
 Structure to Use to Validate UserInformation
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otValidationProperties">
	<summary>
 Enumeration of the validation properties
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otValidationResultType">
	<summary>
 type of validation results
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otInfuseMode">
	<summary>
 Point of Lifecycle to infuse a relation
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otForeignKeyImplementation">
	<summary>
 the Foreign Key Implementation layer
 on Native Database layer or ORM (internal)
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otFieldDataType">
	<summary>
 Data Types for OnTrack Database Fields
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.GetIndex(System.Object@,OnTrack.IndexDefinition@,System.Boolean,System.Boolean,OnTrack.Database.iormConnection@)">
	<summary>
 creates or retrieves an index out of a indexdefinition
 </summary>
	<param name="nativeTable"></param>
	<param name="indexdefinition"></param>
	<param name="forceCreation"></param>
	<param name="createOrAlter"></param>
	<param name="connection"></param>
	<returns>native index object</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.InstallOnTrackDatabase(System.Boolean,System.String[])">
	<summary>
 Install the OnTrackDatabase
 </summary>
	<param name="askBefore"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormDatabaseDriver.DatabaseType">
	<summary>
 the Type of the Server
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.PersistLog(OnTrack.MessageLog@)">
	<summary>
 Persist the Session or ErrorLog
 </summary>
	<param name="log"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.VerifyOnTrackDatabase(System.String[],System.Boolean,System.Boolean)">
	<summary>
 verify OnTrack if Data Objects are there and up to date
 </summary>
	<returns>true if OnTrack is ok</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.CreateDBUserDefTable(System.Object@)">
	<summary>
 creates the UserDefinition Table
 </summary>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.CreateDBParameterTable(System.Object@)">
	<summary>
 creates the DB parameter table
 </summary>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.SetDBParameter(System.String,System.Object,System.Object@,System.Boolean,System.Boolean)">
	<summary>
 sets a db parameter
 </summary>
	<param name="parametername"></param>
	<param name="value"></param>
	<param name="nativeConnection"></param>
	<param name="updateOnly"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.GetDBParameter(System.String,System.Object@,System.Boolean)">
	<summary>
 returns a DB parameter value
 </summary>
	<param name="parametername"></param>
	<param name="nativeConnection"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.GetUserValidation(System.String,System.Boolean,System.Object@)">
	<summary>
 gets a user validation structure from the DB
 </summary>
	<param name="username"></param>
	<param name="selectAnonymous"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.GetTableStore(System.String,System.Boolean)">
	<summary>
 returns a Tablestore Object
 </summary>
	<param name="tableID"></param>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.GetTableSchema(System.String,System.Boolean)">
	<summary>
 returns a Tableschema Object
 </summary>
	<param name="tableID"></param>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.RunSqlStatement(System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@,System.Boolean,System.Object)">
	<summary>
 runs a sql statement against the database
 </summary>
	<param name="sqlcmdstr"></param>
	<param name="parameters"></param>
	<param name="silent"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.HasSqlCommand(System.String)">
	<summary>
 checks if SqlCommand is in Store of the driver
 </summary>
	<param name="id">id of the command</param>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.StoreSqlCommand(OnTrack.Database.iormSqlCommand@)">
	<summary>
 Store the Command by its ID - replace if existing
 </summary>
	<param name="sqlCommand">a iOTDBSqlCommand</param>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.RetrieveSqlCommand(System.String)">
	<summary>
 Retrieve the Command from Store
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.AssignNativeDBParameter(System.String,OnTrack.Database.otFieldDataType,System.Int64,System.Object)">
	<summary>
 creates and assigns a native DB Paramter by otdb datatype
 </summary>
	<param name="parametername"></param>
	<param name="datatype"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.GetTargetTypeFor(OnTrack.Database.otFieldDataType)">
	<summary>
 returns the target type for a OTDB FieldType - MAPPING
 </summary>
	<param name="type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormDatabaseDriver">
	<summary>
 interface defines a wraper database definition class for ORM functions
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormDataStore.Connection">
	<summary>
 sets or gets the connection to the database
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormDataStore.TableSchema">
	<summary>
 sets or gets the schema class for this tablestore
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormDataStore.TableID">
	<summary>
 set or gets the ID (name) of the table
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormDataStore.IsLinqAvailable">
	<summary>
 returns true if the tablestore supports Linq
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.CreateUniquePkValue(System.Object[]@)">
	<summary>
 returns a new unique key value
 </summary>
	<param name="pkArray">sets or fills this array</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.Refresh(System.Boolean)">
	<summary>
 Refresh the data of the tablestore
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.GetRecordsBySqlCommand(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@)">
	<summary>
 retrieves a collection of records by retrieving or creating a sql command from the data store
 </summary>
	<param name="ID"></param>
	<param name="wherestr"></param>
	<param name="fullsqlstr"></param>
	<param name="innerjoin"></param>
	<param name="orderby"></param>
	<param name="silent"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.GetRecordsByIndex(System.String,System.Object[]@,System.Boolean)">
	<summary>
 returns a collection of clsotdbrecord by an named index / view and keys Array in the datastore
 </summary>
	<param name="indexname"></param>
	<param name="keyArray"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.InfuseRecord(OnTrack.Database.ormRecord@,System.Object@,System.Boolean)">
	<summary>
 infuses a clsotdbRecord from the datastore
 </summary>
	<param name="newRecord"></param>
	<param name="rowObject"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.PersistRecord(OnTrack.Database.ormRecord@,System.DateTime,System.Boolean)">
	<summary>
 persists a clsotdbRecord to the data store
 </summary>
	<param name="record"></param>
	<param name="timestamp"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.RunSqlStatement(System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@,System.Boolean)">
	<summary>
 runs a plain sql statement
 </summary>
	<param name="sqlcmdstr"></param>
	<param name="parameters"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.RunSqlCommand(OnTrack.Database.ormSqlCommand@,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
	<summary>
 runs a sql command 
 </summary>
	<param name="command"></param>
	<param name="parametervalues"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.HasProperty(System.String)">
	<summary>
 returns true if the tablestore has the named property
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.GetProperty(System.String)">
	<summary>
 returns the Property by name
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.SetProperty(System.String,System.Object)">
	<summary>
 sets the property by name for the tablestore
 </summary>
	<param name="name"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.HasSqlCommand(System.String)">
	<summary>
 checks if SqlCommand is in Store of the driver
 </summary>
	<param name="id">id of the command</param>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.StoreSqlCommand(OnTrack.Database.iormSqlCommand@)">
	<summary>
 Store the Command by its ID - replace if existing
 </summary>
	<param name="sqlCommand">a iOTDBSqlCommand</param>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.RetrieveSqlCommand(System.String)">
	<summary>
 Retrieve the Command from Store
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.CreateSqlCommand(System.String)">
	<summary>
 Retrieve the Command from Store or create new command
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.CreateSqlSelectCommand(System.String,System.Boolean,System.Boolean)">
	<summary>
 Retrieve the Command from Store or create a new Select Command
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormDataStore">
	<summary>
 defines an interface for persistency classes which are able to persist clsOTDBRecord 
 through an iotdbconnection object
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotDataSchema.TableID">
	<summary>
 associated table id of the schema
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotDataSchema.IsInitialized">
	<summary>
 True if Schema is read and initialized
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotDataSchema.Indices">
	<summary>
 all Indices's as list
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.Refresh(System.Boolean)">
	<summary>
 refresh loads the schema
 </summary>
	<param name="reloadForce"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotDataSchema.PrimaryKeyIndexName">
	<summary>
 gets the name of the primary key
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotDataSchema.Fieldnames">
	<summary>
 all fieldnames in the schema as List
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.Getfieldname(System.Int32)">
	<summary>
 return the fieldname by ordinal
 </summary>
	<param name="i"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.HasprimaryKeyfieldname(System.String@)">
	<summary>
 true if the fieldname exists in the primary key
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.Hasfieldname(System.String)">
	<summary>
 true if the fieldname exists in the schema
 </summary>
	<param name="Name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.GetDomainIDPKOrdinal">
	<summary>
 returns the ordinal number of the domainID in the primary key array - less zero if not in the primary key
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.GetPrimaryKeyfieldname(System.UInt16)">
	<summary>
 get the Primary Key fieldname by Index i.returns "" if there is none
 </summary>
	<param name="i"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.GetordinalOfPrimaryKeyField(System.UInt16)">
	<summary>
  get the Primary Key fieldname no by field index i.  returns -1 if there is none
 </summary>
	<param name="i"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.NoPrimaryKeyFields">
	<summary>
 the number of fields in the primary key
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotDataSchema.NoFields">
	<summary>
 the number of fields
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.GetIndex(System.String)">
	<summary>
 gets an Index by name
 </summary>
	<param name="indexname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.HasIndex(System.String)">
	<summary>
 True if index exists
 </summary>
	<param name="indexname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.AssignNativeDBParameter(System.String,System.String)">
	<summary>
 Assign a native DB parameters and return
 </summary>
	<param name="fieldname"></param>
	<param name="parametername"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iotDataSchema">
	<summary>
 interface for a native table schema for a table store
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormConnection.IsConnected">
	<summary>
 returns true if connected
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormConnection.IsInitialized">
	<summary>
 returns true if connection is initialized
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormConnection.Session">
	<summary>
 gets the Session of the Connection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormConnection.UILogin">
	<summary>
 Gets or sets the UI login.
 </summary>
	<value>The UI login.</value>
</member><member name="P:OnTrack.Database.iormConnection.Access">
	<summary>
 Gets or sets the access.
 </summary>
	<value>The access.</value>
</member><member name="P:OnTrack.Database.iormConnection.Dbpassword">
	<summary>
 Gets or sets the dbpassword.
 </summary>
	<value>The dbpassword.</value>
</member><member name="P:OnTrack.Database.iormConnection.Dbuser">
	<summary>
 Gets or sets the dbuser.
 </summary>
	<value>The dbuser.</value>
</member><member name="P:OnTrack.Database.iormConnection.DBName">
	<summary>
 Gets or sets the name of the database or file.
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.iormConnection.PathOrAddress">
	<summary>
 Gets or sets the path.
 </summary>
	<value>The path.</value>
</member><member name="P:OnTrack.Database.iormConnection.Connectionstring">
	<summary>
 Gets or sets the connectionstring.
 </summary>
	<value>The connectionstring.</value>
</member><member name="P:OnTrack.Database.iormConnection.Databasetype">
	<summary>
 Gets or sets the databasetype.
 </summary>
	<value>OnTrackDatabaseServer</value>
</member><member name="P:OnTrack.Database.iormConnection.DatabaseDriver">
	<summary>
 Gets or sets the DatabaseEnvirorment.
 </summary>
	<value>iOTDBDatabaseEnvirorment</value>
</member><member name="P:OnTrack.Database.iormConnection.NativeConnection">
	<summary>
 Gets the NativeConnection.
 </summary>
	<value>Object</value>
</member><member name="E:OnTrack.Database.iormValidatable.OnValidating">
	<summary>
 Event on Object Instance Level for Validation (before Validation)
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:OnTrack.Database.iormValidatable.OnValidated">
	<summary>
 Event on Object Instance Level for Validation (after Validation)
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormValidatable.Validate">
	<summary>
 validates the Business Object as total
 </summary>
	<returns>True if validated and OK</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormValidatable.Validate(System.String,System.Object)">
	<summary>
 validates a named object entry of the object
 </summary>
	<param name="enryname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormValidatable">
	<summary>
 Interface for Validation of objects
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.TableStore">
	<summary>
 Tablestore associated with this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.Record">
	<summary>
 TableID associated with this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.TableID">
	<summary>
 TableID associated with this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.IsLoaded">
	<summary>
 True if data object is loaded from data store
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.IsCreated">
	<summary>
 True if data object is created in the data store
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.IsInitialized">
	<summary>
 True if data object is initialized and working
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.ObjectID">
	<summary>
 returns the Object ID of the persistable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.RuntimeOnly">
	<summary>
 returns True if the persistable is only a runtime object and not persistable before not switched to runtimeOff
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.Initialize(System.Boolean)">
	<summary>
 Initialize the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.Inject(System.Object[]@,System.String,System.Boolean)">
	<summary>
 load and infuse the dataobject by primary key
 </summary>
	<param name="pkArray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.Create(System.Object[]@,System.String,System.Boolean,System.Boolean)">
	<summary>
 create a persistable dataobject
 </summary>
	<param name="pkArray"></param>
	<param name="checkUnique"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.Delete">
	<summary>
 deletes a persistable object in the datastore
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.Persist(System.DateTime,System.Boolean)">
	<summary>
 Perists the object in the datastore
 </summary>
	<param name="timestamp"></param>
	<param name="doFeedRecord"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.GetVersion(OnTrack.Database.iormPersistable,System.String)">
	<summary>
 returns the version by attribute of the persistance objects
 </summary>
	<param name="name"></param>
	<param name="dataobject"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormPersistable">
	<summary>
 interface describes a persistable OTDB Data Object
 </summary>
	<remarks></remarks>
</member><member name="E:OnTrack.Database.iormInfusable.OnInfusing">
	<summary>
 OnInfusing event triggers before infusing a data object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:OnTrack.Database.iormInfusable.OnInfused">
	<summary>
 OnInfused event triggers after infusing a data object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormInfusable.Infuse(OnTrack.Database.ormRecord@,System.Nullable{OnTrack.Database.otInfuseMode})">
	<summary>
 Infuse the object with data from the record
 </summary>
	<param name="record">record </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormInfusable">
	<summary>
 interface infusable if an Object can be infused by a record
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotCloneable`1.Clone(System.Object[])">
	<summary>
 clone the object with the new primary key
 </summary>
	<param name="pkarray">primary key array</param>
	<returns>the new cloned object or nothing</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iotCloneable`1">
	<summary>
 interface cloneable if an object can be cloned
 </summary>
	<typeparam name="T"></typeparam>
	<remarks></remarks>
</member><member name="E:OnTrack.Database.iormCloneable.OnCloning">
	<summary>
 OnCloning Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotHasCompounds.AddSlotCompounds(OnTrack.XChange.XEnvelope@)">
	<summary>
 adds compounds slots of an instance (out of the envelope) to the envelope
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iotHasCompounds">
	<summary>
 interface for having an Compound 
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.HasLowerRangeValue">
	<summary>
 True if ObjectEntry has a defined lower value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.LowerRangeValue">
	<summary>
 gets the lower range Value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.HasUpperRangeValue">
	<summary>
 True if ObjectEntry has a defined upper value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.UpperRangeValue">
	<summary>
 gets the upper range Value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.HasPossibleValues">
	<summary>
 gets the list of possible values
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.PossibleValues">
	<summary>
 gets the list of possible values
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.iObjectEntry.Objectname">
	<summary>
 sets or gets the object name of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.XID">
	<summary>
 sets or gets the XchangeManager ID for the field 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.Entryname">
	<summary>
 returns the name of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.Typeid">
	<summary>
 sets or gets the type otObjectEntryDefinitionType
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.SpareFieldTag">
	<summary>
 sets or gets true if this field is a spare field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.Version">
	<summary>
 returns version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.Aliases">
	<summary>
 returns a array of aliases
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.Title">
	<summary>
 returns Title (Column Header)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.DefaultValue">
	<summary>
 sets or gets the default value for the object entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.IsColumn">
	<summary>
 returns True if the Entry is a Column
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.IsCompound">
	<summary>
 returns true if the Entry is a Compound entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.LookupCondition">
	<summary>
 sets or gets the condition for dynamically looking up values
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iObjectEntry.HasLookupCondition">
	<summary>
 returns true if there is a dynamically lookup condition
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.iObjectEntry.OnswitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handler for the OnSwitchRuntimeOff event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.iObjectEntry">
	<summary>
 Interface for Object Entries
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.iotXChangeable.RunXChange(OnTrack.XChange.XEnvelope@)">
	<summary>
 runs the XChange 
 </summary>
	<param name="envelope"></param>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.iotXChangeable.RunXPreCheck(OnTrack.XChange.XEnvelope@)">
	<summary>
 runs the Precheck
 </summary>
	<param name="envelope"></param>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.otCoreMessageType">
	<summary>
 Message types of the On Track Database Core
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassRepository.EventArgs.Description">
	<summary>
 Gets the object class description.
 </summary>
	<value>The objectdefinition.</value>
</member><member name="P:OnTrack.ObjectClassRepository.EventArgs.Objectname">
	<summary>
 Gets the objectname.
 </summary>
	<value>The objectname.</value>
</member><member name="M:OnTrack.ObjectClassRepository.#ctor">
	<summary>
 constructor of the object class repository
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassRepository.Count">
	<summary>
 returns the count for the class description store (all classes in store)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassRepository.ObjectClassDescriptions">
	<summary>
 returns an IEnumerable of all ObjectClassDescriptions
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassRepository.BootstrapSchemaChecksum">
	<summary>
 gets the Checksum of the ObjectClassRepository for Bootstrapping classes 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.AlterTableAttribute(OnTrack.Database.ormSchemaTableAttribute@,System.Reflection.FieldInfo)">
	<summary>
 Add oder modify a table attribute 
 </summary>
	<param name="tableattribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetBootStrapObjectClassDescriptions">
	<summary>
 returns the names of the bootstrapping tables
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetBootStrapTableNames">
	<summary>
 returns the names of the bootstrapping tables
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetObjectClassDescription(System.Type)">
	<summary>
 returns the ObjectClass Description
 </summary>
	<param name="type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetTableAttribute(System.String)">
	<summary>
 returns the SchemaTableAttribute for a table name
 </summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetReferenceTableColumn(OnTrack.Database.ormSchemaTableColumnAttribute@)">
	<summary>
 substitute referenced properties in the reference
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetReferenceObject(OnTrack.Database.ormObjectEntryAttribute@)">
	<summary>
 substitute referenced properties in the reference
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetSchemaColumnAttribute(System.String,System.String)">
	<summary>
 returns the schemaColumnAttribute for a given columnname and tablename
 </summary>
	<param name="columnname"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetObjectClassDescriptionsByTable(System.String)">
	<summary>
 gets a list of ObjectClassDescriptions per tablename or empty if none
 </summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetObjectClassDescriptions(System.String)">
	<summary>
 returns a list of ObjectClassDescriptions per module name
 </summary>
	<param name="modulename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetModulenames">
	<summary>
 returns a list of all Modulenames
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetObjectClasses(System.String)">
	<summary>
 gets a list of object classes which are using a tablename for persistence
 </summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.RegisterCacheManager(OnTrack.database.iormObjectCacheManager)">
	<summary>
 register a CacheManager at the ObjectClassRepository
 </summary>
	<param name="cache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.Initialize(System.Boolean)">
	<summary>
 Initialize the Repository
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectClassRepository">
	<summary>
 store for attribute information in the dataobject classes - relies in the CORE
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.#ctor(System.Type,OnTrack.ObjectClassRepository)">
	<summary>
 constructor
 </summary>
	<param name="class"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.ObjectAttribute">
	<summary>
 Gets or sets the object attribute.
 </summary>
	<value>The object attribute.</value>
</member><member name="P:OnTrack.ObjectClassDescription.PrimaryKeyEntryNames">
	<summary>
 Gets or sets the object attribute.
 </summary>
	<value>The object attribute.</value>
</member><member name="P:OnTrack.ObjectClassDescription.ID">
	<summary>
 returns the ID of the ObjectClassDescription (the constObjectID)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.Type">
	<summary>
 Gets or sets the type.
 </summary>
	<value>The type.</value>
</member><member name="P:OnTrack.ObjectClassDescription.Name">
	<summary>
 Name of the Class
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.PrimaryTable">
	<summary>
 gets the primary table
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.Tables">
	<summary>
 gets a List of all table names
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.Entrynames">
	<summary>
 gets a List of all entry names
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.ColumnNames">
	<summary>
 gets a List of all column names
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.OperationAttributes">
	<summary>
 gets a List of all column attributes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.ObjectEntryAttributes">
	<summary>
 gets a List of all column attributes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.MappedColumnNames">
	<summary>
 gets a List of all column attributes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.IndexAttributes">
	<summary>
 gets a List of all index attributes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.RelationAttributes">
	<summary>
 gets a List of all relation Attributes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.TableAttributes">
	<summary>
 gets a List of all table Attributes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.GetSchemaTableAttribute(System.String)">
	<summary>
 returns the SchemaTableAttribute for a table name
 </summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.GetMethodInfoHook(System.String)">
	<summary>
 returns a MethodInfo for Dataoperation Hooks
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.ToString">
	<summary>
 ToString Function
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.GetMappedColumnFieldInfos(System.String,System.String)">
	<summary>
 returns the mapped FieldInfos for a given columnname and tablename
 </summary>
	<param name="columnname"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeTableAttribute(System.Attribute,System.String,System.Boolean)">
	<summary>
 initialize a table attribute to the Description
 </summary>
	<param name="attribute"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeObjectEntryAttribute(System.Attribute,System.String,System.String,System.String,System.Boolean)">
	<summary>
 Initialize a ObjectEntry Attribute
 </summary>
	<param name="attribute"></param>
	<param name="name"></param>
	<param name="tablename"></param>
	<param name="fieldvalue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeEntryMapping(System.Attribute,System.String,System.String,System.Reflection.FieldInfo,System.Boolean)">
	<summary>
 Initialize an ObjectEntry Mapping
 </summary>
	<param name="attribute"></param>
	<param name="tablename"></param>
	<param name="value"></param>
	<param name="fieldinfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeRelationAttribute(System.Attribute,System.String,System.String,System.String,System.Boolean)">
	<summary>
 Initialize a Relation Attribute to the Description
 </summary>
	<param name="attribute"></param>
	<param name="name"></param>
	<param name="tablename"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeForeignKeyAttribute(System.Attribute,System.String,System.String,System.String,System.Boolean)">
	<summary>
 Initialize a Relation Attribute to the Description
 </summary>
	<param name="attribute"></param>
	<param name="name"></param>
	<param name="tablename"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeIndexAttribute(System.Attribute,System.String,System.String,System.String,System.Boolean)">
	<summary>
 Initialize the index Attribute
 </summary>
	<param name="attribute"></param>
	<param name="name"></param>
	<param name="tablename"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeObjectAttributeByField(System.Attribute,System.Reflection.FieldInfo)">
	<summary>
 Initialize the ObjectAttribute by a const field member of the class
 </summary>
	<param name="attribute"></param>
	<param name="fieldinfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeMethodRetrieveHook(System.Reflection.MethodInfo)">
	<summary>
 set the hook for the generic Retrieve
 </summary>
	<param name="methodinfo"></param>
	<returns>True if the hook was set</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeMethodCreateHook(System.Reflection.MethodInfo)">
	<summary>
 Initialize the right CreateDataObject Function
 </summary>
	<param name="methodinfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.Initialize(System.Boolean)">
	<summary>
 refresh all the loaded information
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.CreateILGGetterDelegate``2(System.Type,System.Reflection.FieldInfo)">
	<summary>
 Creates a IL GET VALUE
 </summary>
	<typeparam name="T">Type of the class of the setter variable</typeparam>
	<typeparam name="TValue">Type of the value</typeparam>
	<param name="field">fieldinfo </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.CreateILGSetterDelegate``2(System.Type,System.Reflection.FieldInfo)">
	<summary>
 Creates a IL SET VALUE
 </summary>
	<typeparam name="T">Type of the class of the setter variable</typeparam>
	<typeparam name="TValue">Type of the value</typeparam>
	<param name="field">fieldinfo </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectClassDescription">
	<summary>
  class to hold per Class the orM Attributes and FieldInfo for Mapping and Relation
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>