<?xml version="1.0"?>
<doc>
<assembly>
<name>
otdbBackEnd
</name>
</assembly>
<members>
<member name="F:OnTrack.ot.ConstVersionCoreBackend">
	<summary>
 Version with Changelog
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstDepTypeIDIFC">
	<summary>
 Dependency Type Interfaces
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstDelimiter">
	<summary>
 Default Delimiter for String Expressions
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstStatusType_XEnvelope">
	<summary>
 StatusTypes
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.OTDBConst_StatusTypeid_FCLF">
	<summary>
 obsolete
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstDefaultCompoundIndexName">
	<summary>
 CompoundIndex
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstOTDBSchemaVersion">
	<summary>
 The Schema Version - increase here to trigger recreation of the database schema
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstGlobalConfigSetName">
	<summary>
 Config Property name
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstCPNUseConfigSetName">
	<summary>
  Parameters names for config parameters read from .ini or documents
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstCPVDBTypeSqlServer">
	<summary>
 config Property value
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstGlobalDomain">
	<summary>
 Global Domain Name
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstApplicationBackend">
	<summary>
 Application names
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot.ConstModuleCommons">
	<summary>
 Name of the different OnTrack Modules
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot._ApplicationName">
	<summary>
 Variables
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ot._changelog">
	<summary>
 global OnTrack ChangeLog
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.OnTrackChangeLog">
	<summary>
 returns the Changelog
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.AssemblyVersion">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.ot.ApplicationName">
	<summary>
 Gets or sets the name of the application.
 </summary>
	<value>The name of the application.</value>
</member><member name="P:OnTrack.ot.CurrentConfigSetName">
	<summary>
 returns the name of the standard Config set to be used - might be nothing if not set
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.CurrentConfigFileName">
	<summary>
 sets or gets the name of the current config file name
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.ConfigFileLocations">
	<summary>
 Gets the configfilelocations.
 </summary>
	<value>The configfilelocations.</value>
</member><member name="P:OnTrack.ot.ObjectClassRepository">
	<summary>
 gets the Object Class Repository
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.CurrentSession">
	<summary>
 Property CurrentSession 
 </summary>
	<value></value>
	<returns>the current session object</returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.CurrentDBDriver">
	<summary>
 Gets the primary DB env.
 </summary>
	<value>The primary DB env.</value>
</member><member name="P:OnTrack.ot.Errorlog">
	<summary>
 returns the otdb errorlog or nothing
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.IsInitialized">
	<summary>
 Gets or sets the OTD bis initialized.
 </summary>
	<value>The OTD bis initialized.</value>
</member><member name="P:OnTrack.ot.ObjectClassDescriptions">
	<summary>
 returns an IEnumerable of all Object Class Descriptions
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.CurrentConnection(System.Boolean,OnTrack.Database.otAccessRight,System.String,System.String)">
	<summary>
 Gets or sets the O TDB connection.
 </summary>
	<value>The O TDB connection.</value>
</member><member name="P:OnTrack.ot.IsConnected">
	<summary>
 return True if the Current Connection exists to the database
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.UsedConfigFileLocation">
	<summary>
 gets the used location for the config file location
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.Username">
	<summary>
 returns Current Username in the current connection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.InstalledModules">
	<summary>
 retuns a list of Installed OnTrack Modules
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.ConfigSetNamesToSelect">
	<summary>
 returns a list of selectable config set names without global
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ot.ConfigSetNames">
	<summary>
 returns a list of ConfigSetnames
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.ReadConfigFile(System.String,System.String)">
	<summary>
 reads the config parameters from the configfile
 </summary>
	<param name="configFilePath">path where to read config file</param>
	<param name="configFileName">name of the config file to read</param>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetConfigProperty(System.String,System.UInt16,System.String,OnTrack.Database.ComplexPropertyStore.Sequence)">
	<summary>
 Gets the Property of a config set. if configsetname is ommitted then check currentconfigset and the global one
 </summary>
	<param name="name">name of property</param>
	<returns>object of the property</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.HasConfigProperty(System.String,System.String,OnTrack.Database.ComplexPropertyStore.Sequence)">
	<summary>
 has the config set the named property
 </summary>
	<param name="name">name of property</param>
	<returns>return true</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.RetrieveConfigProperties(System.Boolean)">
	<summary>
 retrieve the Config parameters of OnTrack and write it to the PropertyBag
 </summary>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetObjectClassDescriptionByTable(System.String)">
	<summary>
 Retrieves a List of  ObjectClasses Descriptions referenced by a tableid
 </summary>
	<param name="tableid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetTableAttribute(System.String)">
	<summary>
 Retrieves the schema table attribute by name
 </summary>
	<param name="tableid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetObjectClassByTable(System.String)">
	<summary>
 Retrieves the ObjectClasses as system.type referenced by a tableid
 </summary>
	<param name="tableid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetBootStrapObjectClassDescriptions">
	<summary>
 returns the names of the bootstrapping tables
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetBootStrapObjectClassIDs">
	<summary>
 returns the names of the bootstrapping tables
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetBootStrapObjectClassnames">
	<summary>
 returns the names of the bootstrapping tables
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetObjectClassDescription(System.Type)">
	<summary>
 returns the object class description for a type
 </summary>
	<param name="type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetObjectClassDescriptionsForModule(System.String)">
	<summary>
 Returns a List of ObjectClassDescriptions per Modulename
 </summary>
	<param name="modulename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetBootStrapTableNames">
	<summary>
 returns a List of Boot strapping tables
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetObjectClassType(System.String)">
	<summary>
 returns the type of the business object class if any
 </summary>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetSchemaTableColumnAttribute(System.String,System.String)">
	<summary>
 returns a SchemaColumnAttribute for columnname and tablename from the core repisotory
 </summary>
	<param name="columnname"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.Initialize(System.Boolean)">
	<summary>
 Initialize the OTDB Envirormenent
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetDBParameter(System.String,System.Boolean)">
	<summary>
 retrieve a DB Parameter from Ontrack from the central core module
 </summary>
	<param name="name"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.SetDBParameter(System.String,System.Object,System.Boolean,System.Boolean)">
	<summary>
 sets a DB Parameter (in the DB) from the central core module
 </summary>
	<param name="name"></param>
	<param name="value"></param>
	<param name="updateOnly"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetTableStore(System.String,System.Boolean)">
	<summary>
 returns a TableStore for the id from the central OnTrack Core Module
 </summary>
	<param name="tableid"></param>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.RequireAccess(OnTrack.Database.otAccessRight,System.String,System.Boolean)">
	<summary>
 requires access to the OnTrack Database  - starts a session if not running otherwise just validates
 </summary>
	<param name="AccessRequest">otAccessRight</param>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.Startup(OnTrack.Database.otAccessRight,System.String,System.String)">
	<summary>
 requires access to the OnTrack Database  - starts a session if not running otherwise just validates
 </summary>
	<param name="AccessRequest">otAccessRight</param>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.AddErrorToLog(OnTrack.SessionMessage@)">
	<summary>
 Add Error Message to the ErrorLog of the Current Session
 </summary>
	<param name="otdberror">clsOTDBError object</param>
	<returns>true if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetLastError">
	<summary>
 returns the most recent error from error log or nothing
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetDefaultValue(OnTrack.Database.otDataType)">
	<summary>
 returns the Standard Default Values for a datatype of OnTrack Datatypes
 </summary>
	<param name="datatype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.GetDatatypeMappingOf(OnTrack.Database.otDataType)">
	<summary>
 Mapping of otdb Datatypes to native .NET Datatypes
 </summary>
	<param name="datatype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ot.CoreMessageHandler(System.String,System.Exception,System.Object,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,OnTrack.otCoreMessageType,OnTrack.ObjectMessageLog@,System.String,System.Object,System.String,OnTrack.Database.iormPersistable)">
	<summary>
 central error handler .. all messages and error conditions are fed here
 </summary>
	<param name="SHOWMSGBOX"></param>
	<param name="EXCEPTION"></param>
	<param name="ARG1"></param>
	<param name="SUBNAME"></param>
	<param name="TABLENAME"></param>
	<param name="ENTRYNAME"></param>
	<param name="message"></param>
	<param name="break"></param>
	<param name="NoOTDBAvailable"></param>
	<param name="messagetype"></param>
	<param name="MSGLOG"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.#ctor(System.String,OnTrack.Session@)">
	<summary>
 Constructor
 </summary>
	<param name="ID">an ID for this driver</param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.oleDBDriver.NativeConnection">
	<summary>
 NativeConnection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.BuildParameterAdapter">
	<summary>
 builds the adapter for the parameters table
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.Initialize(System.Boolean)">
	<summary>
 Initialize the driver
 </summary>
	<param name="Force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.oleDBDriver.Type">
	<summary>
 Gets the type.
 </summary>
	<value>The type.</value>
</member><member name="M:OnTrack.Database.oleDBDriver.CreateNativeTableStore(System.String,System.Boolean)">
	<summary>
 create a new TableStore for this Driver
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.CreateNativeTableSchema(System.String)">
	<summary>
 create a new TableSchema for this Driver
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.CreateNativeDBCommand(System.String,System.Data.IDbConnection)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.RaiseRequestBootstrapInstall(System.Object,System.EventArgs@)">
	<summary>
  raise the RequestBootStrapInstall Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.GetTargetTypeFor(OnTrack.Database.otDataType)">
	<summary>
 returns the target type for a OTDB FieldType - MAPPING
 </summary>
	<param name="type"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.oleDBDriver.AssignNativeDBParameter(System.String,OnTrack.Database.otDataType,System.Int64,System.Object)">
	<summary>
 create an assigned Native DBParameter to provided name and type
 </summary>
	<param name="parametername">name of parameter</param>
	<param name="datatype">otdb datatype</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.SetDBParameter(System.String,System.Object,System.Object@,System.Boolean,System.Boolean)">
	<summary>
 Sets the DB parameter.
 </summary>
	<param name="Parametername">The parametername.</param>
	<param name="Value">The value.</param>
	<param name="NativeConnection">The native connection.</param>
	<param name="UpdateOnly">The update only.</param>
	<param name="silent">The silent.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.oleDBDriver.RunSqlStatement(System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@,System.Boolean,System.Object)">
	<summary>
 Runs the SQL Command
 </summary>
	<param name="sqlcmdstr"></param>
	<param name="parameters"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.HasView(System.String,OnTrack.Database.iormConnection@,System.Object)">
	<summary>
 returns true if the datastore has the view by viewname
 </summary>
	<param name="name"></param>
	<param name="connection"></param>
	<param name="nativeConnection"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.oleDBDriver.Connection_onConnection(System.Object,OnTrack.Database.ormConnectionEventArgs)">
	<summary>
 EventHandler for onConnect
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oleDBDriver.Connection_onDisConnection(System.Object,OnTrack.Database.ormConnectionEventArgs)">
	<summary>
 EventHandler for onDisConnect
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.oleDBDriver">
	<summary>
 oleDBDriver is the database driver for ADO.NET OLEDB drivers
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oledbConnection.OLEDBConnection_OnConnected(System.Object,OnTrack.Database.ormConnectionEventArgs)">
	<summary>
 Propagate Connected Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oledbConnection.OLEDBConnection_DisConnected(System.Object,OnTrack.Database.ormConnectionEventArgs)">
	<summary>
 propagates the disconnected event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.oledbConnection.NativeConnection">
	<summary>
 gets the native connection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.oledbConnection.OledbConnection">
	<summary>
 Gets or sets the connection.
 </summary>
	<value>The connection.</value>
</member><member name="M:OnTrack.Database.oledbConnection.CreateNewNativeConnection">
	<summary>
 create a new SQLConnection
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.oledbConnection">
	<summary>
 OLE DB OnTrack Database Connection Class
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.oledbTableSchema">
	<summary>
 CLASS describes the schema per table of the database itself
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.oledbTableStore.IsLinqAvailable">
	<summary>
 is Linq Available
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oledbTableStore.createNativeDBCommand(System.String,System.Data.IDbConnection@)">
	<summary>
 create the specific native Command
 </summary>
	<param name="commandstr"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oledbTableStore.InitializeCache(System.Boolean)">
	<summary>
 Initialize Cache 
 </summary>
	<returns>true if successful </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.oledbTableStore.UpdateDBDataTable(System.Data.IDbDataAdapter@,System.Data.DataTable@)">
	<summary>
 update the cache Datatable
 </summary>
	<param name="datatable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.oledbTableStore">
	<summary>
 describes the ORM Mapping Function per Table for OLE DB
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectProperties.otLinkType">
	<summary>
 Enumeration and other definitions
 </summary>
	<remarks>
	</remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.ConstObjectID">
	<summary>
 constants
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.constTableID">
	<summary>
 Table Definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.constFNAliveUpdc">
	<summary>
 field members
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyCurrentSet._id">
	<summary>
 Mappings
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.ConstRProperties">
	<summary>
 Relations
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.ConstRWorkSet">
	<summary>
  Work Set
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.ConstRAliveSet">
	<summary>
  Alive Set
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.Ordinal">
	<summary>
 Gets or sets the ordinal.
 </summary>
	<value>The ordinal.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.AliveSet">
	<summary>
 Gets or sets the alive property set.
 </summary>
	<value>The workset.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.Workset">
	<summary>
 Gets or sets the work property set.
 </summary>
	<value>The workset.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.Workupdc">
	<summary>
 Gets or sets the workupdc.
 </summary>
	<value>The workupdc.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.AliveUpdc">
	<summary>
 Gets or sets the alive updc of the set.
 </summary>
	<value>The updc.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.ID">
	<summary>
 returns the ID of the set
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.Sets">
	<summary>
 returns the collection of Property sets
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.Retrieve(System.String,System.String)">
	<summary>
 retrieve  the current property set from store
 </summary>
	<param name="id"></param>
	<param name="domainid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.Create(System.String,System.String)">
	<summary>
 creates a persistable current property set
 </summary>
	<param name="id"></param>
	<param name="domainid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.Publish(System.ComponentModel.BackgroundWorker,OnTrack.ObjectMessageLog@,System.Nullable{System.DateTime})">
	<summary>
 Publish and persist the working PropertySet to the alive Set
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.CreatePropertyValueView(OnTrack.ObjectProperties.ObjectPropertySet)">
	<summary>
 Create an SQLView for the PropertyValueLot
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.SetCollection_OnAdded(System.Object,OnTrack.Database.ormRelationCollection{OnTrack.ObjectProperties.ObjectPropertySet}.EventArgs)">
	<summary>
 Handler for the OnAdded event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.CurrentPropertySet_OnPersistedProperty(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for ObjectProperty OnPersisted Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.CurrentPropertySet_OnCreatedProperty(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for ObjectProperty OnCreated Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.CurrentPropertySet_OnDeletedProperty(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for ObjectProperty OnDeleted Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.ObjectPropertySet_OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for OnCreated Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.SetCollection_OnRequestKeys(System.Object,OnTrack.Database.ormRelationNewableCollection{OnTrack.ObjectProperties.ObjectPropertySet}.EventArgs)">
	<summary>
 OnNew EventHandler of the PropertySet Key
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyCurrentSet.ObjectPropertyCurrentSet_OnEntryChanged(System.Object,OnTrack.Database.ormDataObjectEntryEventArgs)">
	<summary>
 OnEntryChanged Event to set the defaults for all the sets
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectProperties.ObjectPropertyCurrentSet">
	<summary>
 class to define an current or alive set of properties 
 </summary>
	<remarks>
 
 Design Principles:
 
 1. Property sets are stand-alone and must exist before a property can be created.
 
 2. Properties are added by creating themselves e.g. Property.Create(setid:= ...). It will be added automatically to the set
 
 3. On loading the set all the properties will be retrieved as well due to relation.
 
 </remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertySet.constTableID">
	<summary>
 Table Definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertySet._id">
	<summary>
 Mappings
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertySet.ConstRProperties">
	<summary>
 Relations
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertySet._propertiesChanged">
	<summary>
 Dynamic Members
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertySet.PropertiesChanged">
	<summary>
 Gets or sets the properties changed.
 </summary>
	<value>The properties changed.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertySet.PropertyCurrentSet">
	<summary>
 returns the PropertyCurrentSet of this PropertySet
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertySet.ValidUntil">
	<summary>
 Gets or sets the valid until timestamp.
 </summary>
	<value>The valid to.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertySet.ValidFrom">
	<summary>
 Gets or sets the valid from timestamp.
 </summary>
	<value>The valid from.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertySet.LastPropertyChangedOn">
	<summary>
 Gets or sets the last property changed on.
 </summary>
	<value>The last property changed on.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertySet.Updc">
	<summary>
 Gets or sets the updc.
 </summary>
	<value>The updc.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertySet.Ordinal">
	<summary>
 Gets or sets the ordinal.
 </summary>
	<value>The ordinal.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertySet.PropertyIDs">
	<summary>
 Gets or sets the properties ids.
 </summary>
	<value>The properties.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertySet.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertySet.ID">
	<summary>
 returns the ID of the configuration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertySet.Properties">
	<summary>
 returns the collection of Properties in this set
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertySet.UpdateLots(System.ComponentModel.BackgroundWorker,System.Nullable{System.DateTime})">
	<summary>
 Update and initialize the linked value lots of  former versions of the set to this one
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertySet.Retrieve(System.String,System.Int64,System.String)">
	<summary>
 retrieve  the property set from store
 </summary>
	<param name="id"></param>
	<param name="domainid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertySet.Create(System.String,System.Nullable{System.Int64},System.String)">
	<summary>
 creates a persistable property set
 </summary>
	<param name="id"></param>
	<param name="domainid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertySet.PropertiesCollection_OnAdded(System.Object,OnTrack.Database.ormRelationCollection{OnTrack.ObjectProperties.ObjectProperty}.EventArgs)">
	<summary>
 Handler for the OnAdded event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertySet.PropertySet_OnCreatedProperty(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for ObjectProperty OnCreated Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertySet.PropertySet_OnDeletedProperty(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for ObjectProperty OnDeleted Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertySet.ObjectPropertySet_OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreated Handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertySet.ObjectPropertySet_OnCreating(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for OnCreating Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertySet.ObjectPropertySet_OnFed(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnFed Handler for some updating
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectProperties.ObjectPropertySet">
	<summary>
 class to define a set of properties attachable to other business objects
 </summary>
	<remarks>
 
 Design Principles:
 
 1. Property sets are stand-alone and must exist before a property can be created.
 
 2. Properties are added by creating themselves e.g. Property.Create(setid:= ...). It will be added automatically to the set
 
 3. On loading the set all the properties will be retrieved as well due to relation.
 
 </remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyExtProperty.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="propertystring"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyExtProperty.Validate(OnTrack.ObjectProperties.ObjectPropertyExtProperty)">
	<summary>
 validates the property
 </summary>
	<param name="property"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyExtProperty.ToEnum">
	<summary>
 returns the enumeration value
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectProperties.ObjectPropertyExtProperty">
	<summary>
 class for ObjectProperty Extended properties (special settings for ObjectProperty)
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectProperties.otObjectPropertyExtProperty">
	<summary>
 Enumeration of the validation properties
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectProperty.ConstTableID">
	<summary>
 Table Definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectProperty.ConstINProperty">
	<summary>
 Index 
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectProperty.ConstFNSetID">
	<summary>
 primary keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectProperty.ConstFNExtProperties">
	<summary>
 other fields
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectProperty.ConstFNObjectName">
	<summary>
 disabled the inherited fields
 </summary>
	<remarks> 
 this is only disabled if the value is exactly the same as inherited, since
 the field value is taken as id/entryname of the entry and stored but the name of the constant is only used
 for inheritage
 </remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectProperty._setid">
	<summary>
 Mappings
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectProperty._relationpath">
	<summary>
  further dynamic 
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectProperty.ConstFNFinalObjectID">
	<summary>
 Disabled
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectProperty._extendedProperties">
	<summary>
 Dynamic members
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectProperty.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectProperty.Setupdc">
	<summary>
 Gets or sets the Updc of the set.
 </summary>
	<value>The setupdc.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectProperty.ID">
	<summary>
 Gets the entity ID.
 </summary>
	<value>The entity.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectProperty.SetID">
	<summary>
 returns the ID of the set
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectProperty.PropertySet">
	<summary>
 returns the property set
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectProperty.ExtendedPropertyStrings">
	<summary>
 Gets or sets the properties of the object property definition.
 </summary>
	<value>The properties.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectProperty.ExtendedProperties">
	<summary>
 gets or sets the validation properties
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectProperty.ObjectProperty_OnCreating(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handles OnCreating 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectProperty.ObjectProperty_OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handles OnCreated and Relation to ConfigSet
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectProperty.ObjectProperty_OnInfused(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handles OnCreating and Relation to Configset
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectProperty.ObjectProperty_OnCreateDefaultValuesNeeded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 set the default values for the create event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectProperty.DeleteCompoundStructure">
	<summary>
 Delete the compound structure of this Property
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectProperty.CreateCompoundStructure">
	<summary>
 Create the Compound on each layer of the property
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectProperty.ObjectProperty_OnPersisted(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnPersisted Handler to add the Properties as Compounds to the ObjectIDs
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectProperty.ObjectProperty_OnDeleted(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnDeleted Handler to add the Properties as Compounds to the ObjectIDs
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectProperty.ObjectProperty_OnDefaultValueNeeded(System.Object,OnTrack.Database.ormDataObjectEntryEventArgs)">
	<summary>
 set default value event for object entry
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectProperties.ObjectProperty">
	<summary>
 class to define a configuration entity as member of a configuration attachable to other business objects
 </summary>
	<remarks>
 
 Design principles:
 
 1. Properties can be created by Created -&gt; will be added to the set by the property itself. If set doesnot exist also the property will not create
 
 2. the Class Property PropertySet is the cached backlink to the Set ( will not be loaded on infuse -&gt; creates loops)
 
 </remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyLink.ConstFNFromObjectID">
	<summary>
 Primary key of the property link object
 FROM an ObjectID, UID, UPDC (KEY)
 TO   an OBJECTID, UID, UPDC
 
 links a  business objects (deliverable, pars, configcondition (for own use) ) with a property set
 also capable of linking schedules to schedules or milestones of schedules to schedules
 
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyLink.ConstFNToUid">
	<summary>
 Column Definitions
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyLink._FromObjectID">
	<summary>
 Mappings persistable members
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyLink.ConstRPropertyValueLot">
	<summary>
 Relation to PropertyValueLot - will be resolved by event handler on relation manager
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyLink.ConstOPGetCompoundValue">
	<summary>
 Define the constants for accessing the compounds
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyLink._prevVersionLots">
	<summary>
 dynamic data
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyLink.PropertyValueLot">
	<summary>
 Gets or sets the property value lot.
 </summary>
	<value>The property value lot.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyLink.Type">
	<summary>
 Gets or sets the type.
 </summary>
	<value>The type.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyLink.FromObjectID">
	<summary>
 gets the object id of the linking object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyLink.FromUID">
	<summary>
 gets the UID of the linking object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyLink.FromUPDC">
	<summary>
 gets the Updc of the linking object - returns zero if not applicable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyLink.ToUID">
	<summary>
 gets or sets the UID of the linked object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyLink.ToUpdc">
	<summary>
 gets or sets the Updc of the linked object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyLink.AllBySet(System.String)">
	<summary>
 return a list of all ValueLots having the setid
 </summary>
	<param name="setid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyLink.UpdateValueLot2Set(System.String,System.Int64,System.Nullable{System.DateTime},System.String)">
	<summary>
 Update the link to the setid and setupdc
 </summary>
	<param name="setid"></param>
	<param name="setupdc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyLink.SetPropertyValue(System.String,System.Object,System.String)">
	<summary>
 operation to set a PropertyValue - here we must change to next version (updc) of the 
 </summary>
	<param name="id">the property</param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyLink.ObjectPropertyLink_OnPersisted(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handles the onPersisted Event to save the previous versions
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyLink.ObjectPropertyLink_OnRelationRetrieveNeeded(System.Object,OnTrack.Database.ormDataObjectRelationEventArgs)">
	<summary>
 Event Handler for the RelationRetrieveNeeded event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyLink.ObjectPropertyLink_OnRelationCreateNeeded(System.Object,OnTrack.Database.ormDataObjectRelationEventArgs)">
	<summary>
 Event Handler for the RelationRetrieveNeeded event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectProperties.ObjectPropertyLink">
	<summary>
 the Property LINK class links a busines object to a value collection
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyValueLot.constTableID">
	<summary>
 Table Definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyValueLot.constFNUID">
	<summary>
 primary keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyValueLot.ConstFNDomainID">
	<summary>
 fields
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyValueLot._uid">
	<summary>
 Mappings
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyValueLot.ConstRValues">
	<summary>
 Relations of values
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyValueLot.ConstOPGetCompoundValue">
	<summary>
 Define the constants for accessing the compounds
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyValueLot._changedPropertyValues">
	<summary>
 dynamic members
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyValueLot.Setsupdc">
	<summary>
 Gets or sets the UPDC of the Sets as Array of Long.
 </summary>
	<value>The setsupdc.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyValueLot.ValidUntil">
	<summary>
 Gets or sets the validto date.
 </summary>
	<value>The validto.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyValueLot.Validfrom">
	<summary>
 Gets or sets the validfrom.
 </summary>
	<value>The validfrom.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyValueLot.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyValueLot.UID">
	<summary>
 returns the UID of the configuration set
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyValueLot.UPDC">
	<summary>
 returns the UID of the configuration set
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyValueLot.Values">
	<summary>
 returns the Entities of this set
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyValueLot.PropertySets">
	<summary>
 gets the property sets of this value lot
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyValueLot.AllBySet(System.String)">
	<summary>
 return a list of all ValueLots having the setid
 </summary>
	<param name="setid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyValueLot.GetPropertyValue(System.String,System.Object@,System.String)">
	<summary>
 operation to Access the Compound's Value
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyValueLot.SetPropertyValue(System.String,System.Object,System.String)">
	<summary>
 operation to set a PropertyValue
 </summary>
	<param name="id">the property</param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyValueLot.UpdateSet(System.String,System.Nullable{System.Int64},System.String)">
	<summary>
 Update the lot with the set
 </summary>
	<param name="setid"></param>
	<param name="setupdc"></param>
	<param name="domainid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyValueLot.AddPropertyValue(System.String,System.String,System.Nullable{System.Int64},System.Boolean,System.Object)">
	<summary>
 Add APropertyValue to the Lot
 </summary>
	<param name="setid"></param>
	<param name="propertyid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyValueLot.PropertySet_OnCreating(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handler for onCreating Event - generates unique primary key values
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyValueLot.ValuesCollection_OnAdded(System.Object,OnTrack.Database.ormRelationCollection{OnTrack.ObjectProperties.ObjectPropertyValue}.EventArgs)">
	<summary>
 Handler for added PropertyValues
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyValueLot.ValuesCollection_OnRemoved(System.Object,OnTrack.Database.ormRelationCollection{OnTrack.ObjectProperties.ObjectPropertyValue}.EventArgs)">
	<summary>
 Handler for added PropertyValues
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyValueLot.ObjectPropertyValueLot_PropertyValueChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
	<summary>
 Handler for ValueChange of PropertyValue
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyValueLot.ObjectPropertyValueLot_OnCloned(System.Object,OnTrack.Database.ormDataObjectCloneEventArgs)">
	<summary>
 Clone Handler to clone the related objects as well
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyValueLot.ObjectPropertyValueLot_OnRelationLoad(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for OnRelationLoad. Check if all Properties of the set are included - if not (added or deleted) than add or drop values
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyValueLot.LoadPropertySets">
	<summary>
 load the PropertySets into dynamic internal structure
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyValueLot.ObjectPropertyValueLot_OnInfused(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the OnInfused Event 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectProperties.ObjectPropertyValueLot">
	<summary>
 class for a lot or set of object properties values  attached to other business objects
 </summary>
	<remarks>
 Design Principles
 
 1. The Lot takes care of the values by the SetPropertyValue, GetPropertyValue Routine
 
 2. The Lot loads or creates with the AddSet Function all the Properties in its collection.
 
 3. setPropertyValue also issues an AddSet with new Sets to be assigned values to
 </remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyValue.constTableID">
	<summary>
 Table Definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyValue.constFNUID">
	<summary>
 Primary KEys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyValue.ConstFNValue">
	<summary>
  Fields
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyValue.constFKValues">
	<summary>
 Foreign Keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyValue._uid">
	<summary>
 Mappings
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectProperties.ObjectPropertyValue.ConstRProperty">
	<summary>
 Relations
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyValue.PropertySet(System.String)">
	<summary>
 returns the PropertySet this PropertyValue Belongs to
 </summary>
	<param name="domainid"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyValue.Setupdc">
	<summary>
 Gets or sets the setupdc.
 </summary>
	<value>The setupdc.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyValue.Datatype">
	<summary>
 Gets or sets the datatype of the property.
 </summary>
	<value>The datatype.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyValue.Property">
	<summary>
 Gets or sets the entity.
 </summary>
	<value>The entity.</value>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyValue.UID">
	<summary>
 returns the UID of the configuration set
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyValue.UPDC">
	<summary>
 returns the UPDC of the configuration set
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectProperties.ObjectPropertyValue.ValueString">
	<summary>
 Gets or sets the value in string presenation.
 </summary>
	<value>The description.</value>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyValue.ObjectPropertyValue_OnCreating(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 onCreating Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectProperties.ObjectPropertyValue.Clone(System.Object[],System.Nullable{System.Boolean})">
	<summary>
 clone the object with the new primary key
 </summary>
	<param name="pkarray">primary key array</param>
	<remarks></remarks>
	<returns>the new cloned object or nothing</returns>
</member><member name="T:OnTrack.ObjectProperties.ObjectPropertyValue">
	<summary>
 class for config properties of entities attached to other business objects
 </summary>
	<remarks>
 
 Design Principles:
 
 1. Values should be never created by Create - go over the Value Lot instead. Values are not added automatically to the Lot.
 
 2. Values should be never retrieved alone - go over the lot instead.
 
 </remarks>
</member><member name="T:OnTrack.Configurables.otConfigConditionRuleType">
	<summary>
 Enumeration and other definitions
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Configurables.Configuration.ConstTableID">
	<summary>
 Table Definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Configurables.Configuration.ConstFNConfigUID">
	<summary>
 primary keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Configurables.Configuration.constFNConfigID">
	<summary>
 fields
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Configurables.Configuration._uid">
	<summary>
 Mappings
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Configurables.Configuration.ConstREntities">
	<summary>
 Relations
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Configurables.Configuration.Properties">
	<summary>
 Gets or sets the properties.
 </summary>
	<value>The properties.</value>
</member><member name="P:OnTrack.Configurables.Configuration.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Configurables.Configuration.UID">
	<summary>
 gets the UID of the configuration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Configurables.Configuration.ID">
	<summary>
 gets or sets the ID of the configuration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Configurables.Configuration.Conditions">
	<summary>
 returns the Entities of this Section
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Configurables.Configuration.OnCreating(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handler for onCreating Event - generates unique primary key values
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Configurables.Configuration.Create(System.String,System.Int64,System.String)">
	<summary>
 creates a persistable configuration
 </summary>
	<param name="id"></param>
	<param name="domainid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Configurables.Configuration">
	<summary>
 class to define a configuration which is able to dynamically associated other business objects by conditions
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Configurables.ConfigItemSelector.ConstTableID">
	<summary>
 Table Definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Configurables.ConfigItemSelector.ConstFNConfiguID">
	<summary>
 primary keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Configurables.ConfigItemSelector.ConstFNRuletype">
	<summary>
 other fields
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Configurables.ConfigItemSelector._configID">
	<summary>
 Mappings
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Configurables.ConfigItemSelector.Ruletype">
	<summary>
 Gets or sets the ruletype.
 </summary>
	<value>The ruletype.</value>
</member><member name="P:OnTrack.Configurables.ConfigItemSelector.ID">
	<summary>
 Gets the entity ID.
 </summary>
	<value>The entity.</value>
</member><member name="P:OnTrack.Configurables.ConfigItemSelector.ConfigurationID">
	<summary>
 returns the ID of the section
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Configurables.ConfigItemSelector.Description">
	<summary>
 gets or sets the description (nothing)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Configurables.ConfigItemSelector.Properties">
	<summary>
 Gets or sets the properties.
 </summary>
	<value>The properties.</value>
</member><member name="M:OnTrack.Configurables.ConfigItemSelector.ConfigCondition_OnCreating(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handles OnCreating and Relation to ConfigSection
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Configurables.ConfigItemSelector.ConfigCondition_OnInfused(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handles OnCreating and Relation to ConfigSection
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Configurables.ConfigItemSelector">
	<summary>
 class to define a configuration condition which enables the configuration to retrieve associated business objects
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.TrackItem.Listid">
	<summary>
 gets the id of the tracking list
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.TrackItem.Posno">
	<summary>
 gets the position number in the list
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.TrackItem.PartID">
	<summary>
 gets or set the part id to be tracked - might be null / nothing
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.TrackItem.Comment">
	<summary>
 gets or sets some comments and textfield
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.TrackItem.Matchcode">
	<summary>
 gets or sets the matchcode
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.TrackItem.Ordinal">
	<summary>
 gets or sets the ordinal in the list
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.TrackItem.DlvUid">
	<summary>
 gets or sets the deliverable uid to be tracked - might be nothing / nullable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.TrackItem.Retrieve(System.String,System.Int64)">
	<summary>
 Retrieve a trackitem from the data store
 </summary>
	<param name="listid"></param>
	<param name="posno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.TrackItem.Create(System.String,System.Int64)">
	<summary>
 create a persistable track list item
 </summary>
	<param name="listid"></param>
	<param name="posno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.TrackItem.GetTrackItemsList(System.String)">
	<summary>
 get the items by list
 </summary>
	<param name="listid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.TrackItem.All">
	<summary>
 retrieve a collection of all Items
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.TrackItem">
	<summary>
 List of Tracking Items
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.#ctor(System.String,OnTrack.Session@)">
	<summary>
 
 
 Constructor
 </summary>
	<param name="ID">an ID for this driver</param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.mssqlDBDriver.NativeConnection">
	<summary>
 NativeConnection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.BuildParameterAdapter">
	<summary>
 build Adapter for parameter table
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.Initialize(System.Boolean)">
	<summary>
 initialize driver
 </summary>
	<param name="Force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.mssqlDBDriver.Type">
	<summary>
 Gets the type.
 </summary>
	<value>The type.</value>
</member><member name="M:OnTrack.Database.mssqlDBDriver.CreateNativeTableStore(System.String,System.Boolean)">
	<summary>
 create a new TableStore for this Driver
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.CreateNativeTableSchema(System.String)">
	<summary>
 create a new TableSchema for this Driver
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.CreateNativeDBCommand(System.String,System.Data.IDbConnection)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.RaiseRequestBootstrapInstall(System.Object,System.EventArgs@)">
	<summary>
  raise the RequestBootStrapInstall Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.Convert2ObjectData(System.Object,System.Object@,System.Int64,System.Nullable{System.Boolean},System.Object,System.Boolean@)">
	<summary>
 returns a object from sourcetype of the column to Host interpretation (.net)
 </summary>
	<param name="invalue"></param>
	<param name="outvalue"></param>
	<param name="sourceType"></param>
	<param name="isnullable"></param>
	<param name="defaultvalue"></param>
	<param name="abostrophNecessary"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.GetTargetTypeFor(OnTrack.Database.otDataType)">
	<summary>
 returns the target type for a OTDB FieldType - MAPPING
 </summary>
	<param name="type"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.mssqlDBDriver.AssignNativeDBParameter(System.String,OnTrack.Database.otDataType,System.Int64,System.Object)">
	<summary>
 create an assigned Native DBParameter to provided name and type
 </summary>
	<param name="parametername">name of parameter</param>
	<param name="datatype">otdb datatype</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.HasView(System.String,OnTrack.Database.iormConnection@,System.Object)">
	<summary>
 returns true if the datastore has the view by viewname
 </summary>
	<param name="name"></param>
	<param name="connection"></param>
	<param name="nativeConnection"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.mssqlDBDriver.GetView(System.String,System.String,System.Boolean,OnTrack.Database.iormConnection@)">
	<summary>
 returns or creates a view in the data store
 </summary>
	<param name="name"></param>
	<param name="sqlselect"></param>
	<param name="createOrAlter"></param>
	<param name="connection"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.mssqlDBDriver.RunSqlStatement(System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@,System.Boolean,System.Object)">
	<summary>
 Runs the SQL Command
 </summary>
	<param name="sqlcmdstr"></param>
	<param name="parameters"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.SetDBParameter(System.String,System.Object,System.Object@,System.Boolean,System.Boolean)">
	<summary>
 Sets the DB parameter.
 </summary>
	<param name="Parametername">The parametername.</param>
	<param name="Value">The value.</param>
	<param name="NativeConnection">The native connection.</param>
	<param name="UpdateOnly">The update only.</param>
	<param name="silent">The silent.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.mssqlDBDriver.GetDBParameter(System.String,System.Object@,System.Boolean)">
	<summary>
 Gets the DB parameter.
 </summary>
	<param name="PARAMETERNAME">The PARAMETERNAME.</param>
	<param name="nativeConnection">The native connection.</param>
	<param name="silent">The silent.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.mssqlDBDriver.Connection_onConnection(System.Object,OnTrack.Database.ormConnectionEventArgs)">
	<summary>
 EventHandler for onConnect
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlDBDriver.Connection_onDisConnection(System.Object,OnTrack.Database.ormConnectionEventArgs)">
	<summary>
 EventHandler for onDisConnect
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.mssqlDBDriver">
	<summary>
 SQL Server OnTrack Database Driver
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlConnection.#ctor(System.String,OnTrack.Database.iormDatabaseDriver@,OnTrack.Session@,OnTrack.Database.ComplexPropertyStore.Sequence)">
	<summary>
 constructor
 </summary>
	<param name="id"></param>
	<param name="databaseDriver"></param>
	<param name="session"></param>
	<param name="sequence"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.mssqlConnection.SMOConnection">
	<summary>
 Gets the SMO connection.
 </summary>
	<value>The SMO connection.</value>
</member><member name="P:OnTrack.Database.mssqlConnection.Server">
	<summary>
 Gets the server.
 </summary>
	<value>The server.</value>
</member><member name="P:OnTrack.Database.mssqlConnection.Database">
	<summary>
 Gets the database.
 </summary>
	<value>The database.</value>
</member><member name="M:OnTrack.Database.mssqlConnection.CanRequestNotifications">
	<summary>
 Returns True if we have sqlserver permission to receive notificcations
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlConnection.CreateSMOConnection(System.Data.IDbConnection)">
	<summary>
 create a smo server connection and returns it. Sets also the scripting optimization and the default fields to load
 </summary>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.mssqlConnection.SqlConnection">
	<summary>
 Gets or sets the connection.
 </summary>
	<value>The connection.</value>
</member><member name="M:OnTrack.Database.mssqlConnection.CreateNewNativeConnection">
	<summary>
 create a new SQLConnection
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.mssqlConnection">
	<summary>
 SQL Server OnTrack Database Connection Class
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.mssqlTableSchema">
	<summary>
 CLASS describes the schema per table of the database itself
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.mssqlTableStore.IsLinqAvailable">
	<summary>
 is Linq Available
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlTableStore.CreateNativeDBCommand(System.String,System.Data.IDbConnection@)">
	<summary>
 create the specific native Command
 </summary>
	<param name="commandstr"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlTableStore.mssqlTableStore_OnChangeNotification(System.Object,System.Data.SqlClient.SqlNotificationEventArgs)">
	<summary>
 handle the changes on the underlaying database model
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlTableStore.InitializeCache(System.Boolean)">
	<summary>
 Initialize Cache 
 </summary>
	<returns>true if successfull </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.mssqlTableStore.UpdateDBDataTable(System.Data.IDbDataAdapter@,System.Data.DataTable@)">
	<summary>
 update the cache Datatable
 </summary>
	<param name="datatable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Shuffle.SubstituteDomainIDinTablePrimaryKey(System.String,System.Object[]@,System.String,System.Boolean,System.Boolean)">
	<summary>
 substitutes in a primary key array (of a table) the domainid with the current domainid
 </summary>
	<param name="tablename"></param>
	<param name="pkarray"></param>
	<param name="domainid"></param>
	<param name="runtimeOnly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Shuffle.ChecknFixPimaryKey(System.String,System.Object[]@,System.String,System.Boolean,System.Boolean,OnTrack.ObjectMessageLog,OnTrack.Database.ormDataObject)">
	<summary>
 helper routine to check and fix the primary key on length, datatype and domain substitution
 </summary>
	<param name="pkarray"></param>
	<param name="runtimeOnly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Converter.Int2ARGB(System.Int64)">
	<summary>
 translates an hex integer to argb presentation integer RGB(FF,00,00) = FF but integer = FF0000
 </summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Converter.RGB2Color(System.Int64)">
	<summary>
 returns a color value in rgb to system.drawing.color
 </summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Converter.otString2Array(System.String)">
	<summary>
 Converts String to Array
 </summary>
	<param name="input"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Converter.Array2otString(System.Object[])">
	<summary>
 Converts Array to String in otdb Array representation
 </summary>
	<param name="input"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Converter.Array2StringList(System.Object[],System.Char)">
	<summary>
 Converts Array to String in list representation
 </summary>
	<param name="input"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Converter.Enumerable2otString(System.Collections.IEnumerable)">
	<summary>
 Converts iEnumerable to String in otdb Array representation
 </summary>
	<param name="input"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Converter.Enumerable2StringList(System.Collections.IEnumerable,System.Char)">
	<summary>
 Converts iEnumerable to String in list representation
 </summary>
	<param name="input"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Converter.Object2otObject(System.Object,OnTrack.Database.otDataType,System.Boolean,System.Boolean@)">
	<summary>
 converts a object  to an object of OnTrack DB Type.
 sets the flag failed if the output is an assumption
 </summary>
	<param name="input"></param>
	<param name="datatype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Converter.DateTime2LocaleDateTimeString(System.DateTime)">
	<summary>
 return a timestamp in the localTime
 </summary>
	<param name="datevalue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Converter.DateTime2UniversalDateTimeString(System.DateTime)">
	<summary>
 return a date in the date localTime
 </summary>
	<param name="datevalue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Converter.Date2LocaleShortDateString(System.DateTime)">
	<summary>
 return a date in the date localTime
 </summary>
	<param name="datevalue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.Converter">
	<summary>
 Converter Class for ORM Data
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Reflector.TypeImplementsGenericInterface(System.Type,System.Type)">
	<summary>
 returns true if the type implements a generic interface of interfacetype
 </summary>
	<param name="type"></param>
	<param name="interfacetype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Reflector.CreateInstanceOfIlist(System.Type)">
	<summary>
 create a IList from a Type
 </summary>
	<param name="type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Reflector.GetAttributes(System.Type)">
	<summary>
 returns ORM Attributes out of a Type
 </summary>
	<param name="ormType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Reflector.GetColumnAttribute(System.Type,System.String)">
	<summary>
 returns ORM Attributes out of a Type
 </summary>
	<param name="ormType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Reflector.GetIndexAttribute(System.Type,System.String)">
	<summary>
 returns ORM Attributes out of a Type
 </summary>
	<param name="ormType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Reflector.SetFieldValue(System.Reflection.FieldInfo,OnTrack.Database.iormPersistable,System.Object)">
	<summary>
 set the member field value with conversion of a dataobject
 </summary>
	<param name="field"></param>
	<param name="dataobject"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Reflector.GetFieldValue(System.Reflection.FieldInfo,OnTrack.Database.iormPersistable,System.Object@)">
	<summary>
 set the member field value with conversion of a dataobject
 </summary>
	<param name="field"></param>
	<param name="dataobject"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.Reflector">
	<summary>
 Reflector Class for reflecting ORM Attributes
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Xchange.MessageQueue.ConstObjectID">
	<summary>
 Object 
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Xchange.MessageQueue.ConstTableID">
	<summary>
 TableDefinition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Xchange.MessageQueue.ConstFNID">
	<summary>
 Primary Key
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Xchange.MessageQueue.ConstFNWorkspaceID">
	<summary>
 persistable column entries 
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Xchange.MessageQueue._id">
	<summary>
 Member Mapping
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Xchange.MessageQueue.ConstRXConfig">
	<summary>
 Relation to XCOnfig ID
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Xchange.MessageQueue.ConstRXMessages">
	<summary>
 Relation to Mesages
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.ApprovalDate">
	<summary>
 Gets or sets the approval date.
 </summary>
	<value>The approval date.</value>
</member><member name="P:OnTrack.Xchange.MessageQueue.ApprovedBy">
	<summary>
 Gets or sets the approver person.
 </summary>
	<value>The approverperson.</value>
</member><member name="P:OnTrack.Xchange.MessageQueue.Planrevision">
	<summary>
 Gets or sets the planrevision.
 </summary>
	<value>The planrevision.</value>
</member><member name="P:OnTrack.Xchange.MessageQueue.ProcessComment">
	<summary>
 Gets or sets the proc comment.
 </summary>
	<value>The proc comment.</value>
</member><member name="P:OnTrack.Xchange.MessageQueue.CreationDate">
	<summary>
 Gets or sets the creation date.
 </summary>
	<value>The creation date.</value>
</member><member name="P:OnTrack.Xchange.MessageQueue.CreatingOU">
	<summary>
 Gets or sets the creating OU.
 </summary>
	<value>The creating OU.</value>
</member><member name="P:OnTrack.Xchange.MessageQueue.Creator">
	<summary>
 Gets or sets the creating person.
 </summary>
	<value>The creating person.</value>
</member><member name="P:OnTrack.Xchange.MessageQueue.UsedSlotIDs">
	<summary>
 Gets or sets the actual used slot ids.
 </summary>
	<value>The mqfslots.</value>
</member><member name="P:OnTrack.Xchange.MessageQueue.ProcessLogordinal">
	<summary>
 Gets or sets the process logordinal.
 </summary>
	<value>The process logordinal.</value>
</member><member name="P:OnTrack.Xchange.MessageQueue.ProcessDateordinal">
	<summary>
 Gets or sets the process dateordinal.
 </summary>
	<value>The process dateordinal.</value>
</member><member name="P:OnTrack.Xchange.MessageQueue.UIDOrdinal">
	<summary>
 Gets or sets the process dateordinal.
 </summary>
	<value>The process dateordinal.</value>
</member><member name="P:OnTrack.Xchange.MessageQueue.ProcessStatusordinal">
	<summary>
 Gets or sets the process statusordinal.
 </summary>
	<value>The process statusordinal.</value>
</member><member name="P:OnTrack.Xchange.MessageQueue.ActionOrdinal">
	<summary>
 Gets or sets the  actionordinal.
 </summary>
	<value>The P actionordinal.</value>
</member><member name="P:OnTrack.Xchange.MessageQueue.ContextIdentifier">
	<summary>
 Gets or sets the context identifier.
 </summary>
	<value>The context identifier.</value>
</member><member name="P:OnTrack.Xchange.MessageQueue.TupleIdentifier">
	<summary>
 Gets or sets the tuple identifier.
 </summary>
	<value>The tuple identifier.</value>
</member><member name="P:OnTrack.Xchange.MessageQueue.EntityIdentifier">
	<summary>
 Gets or sets the entitity identifier.
 </summary>
	<value>The entitity identifier.</value>
</member><member name="P:OnTrack.Xchange.MessageQueue.ID">
	<summary>
 gets the ID of the message queue
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.Size">
	<summary>
 gets the size of the message queue
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.RequestedBy">
	<summary>
 gets or sets the requestedBy-Person
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.RequestedByOU">
	<summary>
 gets or sets the requesting organization unit id
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.WorkspaceID">
	<summary>
 gets or sets the default workspace id
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.Messages">
	<summary>
 returns the messages
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.XChangeConfigName">
	<summary>
 gets or sets the xchange configuration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.Statuscode">
	<summary>
 sets or gets the status code
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.Title">
	<summary>
 sets or gets the title of the message queue
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.ProcessedByUsername">
	<summary>
 sets or gets the processor username
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.Description">
	<summary>
 sets or gets the Comment
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.PrecheckDate">
	<summary>
 sets or gets the Process Time stamp
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.Processdate">
	<summary>
 sets or gets the Process Time stamp
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.RequestedOn">
	<summary>
 gets or sets the request date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.XChangeConfig">
	<summary>
 gets or sets the XChangeConfiguration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.Processable">
	<summary>
 returns true if the MessageQueue is processable - at least one message can be processed
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.Processed">
	<summary>
 returns true if the MessageQueue is processed - at least one message is processed with success
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MessageQueue.DomainID">
	<summary>
 set the domainid for all messages in which the message queue is run
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.MessageQueue.ProcessStatusCode">
	<summary>
 returns the status Code of the ProcessStatus
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.MessageQueue.ProcessStatus">
	<summary>
 returns the status Code of the ProcessStatus - nothing if not processed
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.MessageQueue.GetHighestStatusItem">
	<summary>
 returns the highest Status Item for the Messages for this MQMessage
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.MessageQueue.Create(System.String,System.Boolean)">
	<summary>
 create a persistable message queue object
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.MessageQueue.Retrieve(System.String)">
	<summary>
 retrieves a message queue object from store
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.MessageQueue.GetXBag">
	<summary>
 returns a XBAG out of this Message Queue
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.MessageQueue.Process(System.ComponentModel.BackgroundWorker@)">
	<summary>
 process -&gt; write the MQF to the Database through the XChangeManager
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.MessageQueue.Clear(System.ComponentModel.BackgroundWorker@)">
	<summary>
 process -&gt; write the MQF to the Database through the XChangeManager
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.MessageQueue.Precheck(System.ComponentModel.BackgroundWorker@,System.String)">
	<summary>
 precheck -&gt; check the MQF
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Xchange.MessageQueue">
	<summary>
 CLASS MessageQueue is a persistable transactional interface object for exchanging data with the
 OnTrack Database via Messages
 </summary>
	<remarks>
 Design principles
 
 1. Create a Message queue and assign a xconfiguration
 2. Add messages by the function .CreateMessage or the Property .messages.addnew. Both will return 
    a new message which is attached

 </remarks>
</member><member name="P:OnTrack.Xchange.MQMessage.EventArgs.Processsuccess">
	<summary>
 Gets the processsuccess.
 </summary>
	<value>The processsuccess.</value>
</member><member name="P:OnTrack.Xchange.MQMessage.EventArgs.Mqmessage">
	<summary>
 Gets or sets the mqmessage.
 </summary>
	<value>The mqmessage.</value>
</member><member name="T:OnTrack.Xchange.MQMessage.EventArgs">
	<summary>
 Class for Event Arguments
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Xchange.MQMessage.ConstObjectID">
	<summary>
 Object ID
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Xchange.MQMessage.ConstTableID">
	<summary>
 Table
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Xchange.MQMessage.ConstFNMQID">
	<summary>
 Primary Keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Xchange.MQMessage.ConstFNAction">
	<summary>
 Column Entries
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Xchange.MQMessage._messagequeueID">
	<summary>
 Mappings
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Xchange.MQMessage.ConstRSlots">
	<summary>
 Relation to the Slots
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Xchange.MQMessage._messagequeue">
	<summary>
 dynamic data
 </summary>
	<remarks></remarks>
</member><member name="E:OnTrack.Xchange.MQMessage.OnPreChecked">
	<summary>
 Events
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQMessage.Xenvelope">
	<summary>
 returns a XEnvelope associated with this MQMessage
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQMessage.Statusitem">
	<summary>
 Gets or sets the status item.
 </summary>
	<value>The status item.</value>
</member><member name="P:OnTrack.Xchange.MQMessage.MessageQueue">
	<summary>
 returns the  Message Queue
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQMessage.MessageQueueID">
	<summary>
 gets the ID of the messageQueue
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQMessage.IDNO">
	<summary>
 gets the IDNO of this message
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQMessage.Processable">
	<summary>
 returns true if processable, false if not, nothing not preprocessed
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQMessage.Prechecked">
	<summary>
 returns true if processed
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQMessage.Processed">
	<summary>
 returns true if processed
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQMessage.Action">
	<summary>
 gets or sets the transaction name
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQMessage.Statuscode">
	<summary>
 gets or sets the statuscode
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQMessage.ProcessedOn">
	<summary>
 sets or gets the processed timestamp
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQMessage.PrecheckedOn">
	<summary>
 sets or gets the processed timestamp
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQMessage.Size">
	<summary>
 returns the number of xslots
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQMessage.Slots">
	<summary>
 returns a List of Members
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.MQMessage.IsActionProcessable(System.String,OnTrack.ObjectMessageLog@)">
	<summary>
 Is Action Processable
 </summary>
	<param name="ActionCommand"></param>
	<param name="MSGLOG"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.MQMessage.Clear">
	<summary>
 Clear and reset the message if possible
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.MQMessage.Process(System.ComponentModel.BackgroundWorker@)">
	<summary>
 Process the Message
 </summary>
	<param name="workerthread"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQMessage.ContextIdentifier">
	<summary>
 sets or gets the context identifier
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQMessage.TupleIdentifier">
	<summary>
 sets or gets the tuple identifier
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQMessage.EntityIdentifier">
	<summary>
 sets or gets the entitiy identifier
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.MQMessage.MQMessage_OnEnvelopeObjectMessageAdded(System.Object,OnTrack.ObjectMessageLog.EventArgs)">
	<summary>
 Handler for the Envelope Message Added Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.MQMessage.MQMessage_OnSlotValueChanged(System.Object,OnTrack.XChange.XSlot.EventArgs)">
	<summary>
 Handler for the SlotValueChanged Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Xchange.MQMessage">
	<summary>
 MQMessage is a message object to the Database
 </summary>
	<remarks>
 design principles
 
 1) a message is created by the queue-function .createMessage
 
 2) the idno is the row no or any other ordinal number
 
 3) the message consists out of multiples slots - create them by the .CreateSlot method
 
 4) the message is been used to build an (XBag) XEnvelope at runtime
 
 5) the message has special commands which will be processed on the mqf level
 
 6) message processing is required in 2 steps:
    6.1 Prechecking
    6.2 Processing
 
 </remarks>
</member><member name="F:OnTrack.Xchange.MQXSlot.ConstTableID">
	<summary>
 Table
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Xchange.MQXSlot.ConstFNMQID">
	<summary>
 Primary keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Xchange.MQXSlot.ConstFNDatatype">
	<summary>
 Column entry
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Xchange.MQXSlot._mqid">
	<summary>
 Mapping
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQXSlot.IsEmpty">
	<summary>
 Gets or sets the isempty.
 </summary>
	<value>The isempty.</value>
</member><member name="P:OnTrack.Xchange.MQXSlot.IsNull">
	<summary>
 Gets or sets the isnull.
 </summary>
	<value>The isnull.</value>
</member><member name="P:OnTrack.Xchange.MQXSlot.ContextIdentifier">
	<summary>
 sets or gets the context identifier
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQXSlot.TupleIdentifier">
	<summary>
 sets or gets the tuple identifier
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQXSlot.EntityIdentifier">
	<summary>
 sets or gets the entitiy identifier
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQXSlot.XChangeConfiguration">
	<summary>
 returns the Message of the Message Queue
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQXSlot.XChangeConfigEntries">
	<summary>
 returns the Message of the Message Queue
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQXSlot.Message">
	<summary>
 returns the Message of the Message Queue
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQXSlot.MessageQueue">
	<summary>
 returns the  Message Queue
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQXSlot.MessageID">
	<summary>
 returns the Message ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQXSlot.ID">
	<summary>
 returns the slot ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQXSlot.Value">
	<summary>
 gets or sets the value object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQXSlot.ValueString">
	<summary>
 sets or gets the value text presentation
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQXSlot.Ordinal">
	<summary>
 gets the ordinal of the xchange config entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQXSlot.Datatype">
	<summary>
 sets or gets the datatype
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQXSlot.Statuscode">
	<summary>
 sets the status code
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQXSlot.ProcessedOn">
	<summary>
 gets or sets the processed timestamp
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQXSlot.IsProcessed">
	<summary>
 gets or sets the processed flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Xchange.MQXSlot.IsProcessable">
	<summary>
 gets the Is processable flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Xchange.MQXSlot.MQXSlot_OnDeleted(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 on Deleted Handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Xchange.MQXSlot">
	<summary>
 a data slot in the message
 
 </summary>
	<remarks>
 design principles
 
 1) IDNO of the slot is the IDNO of the XChangeEntry in the XCHangeConfiguration - therefore also the ordinals for the slot applies
 
 2) Create a Slot by the Message.CreateSlot function and not standalone
 </remarks>
</member><member name="M:OnTrack.XChange.iotXChangeable.RunXChange(OnTrack.XChange.XEnvelope@,OnTrack.ObjectMessageLog@)">
	<summary>
 runs the XChange 
 </summary>
	<param name="envelope"></param>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.iotXChangeable.RunXPreCheck(OnTrack.XChange.XEnvelope@,OnTrack.ObjectMessageLog@)">
	<summary>
 runs the Precheck
 </summary>
	<param name="envelope"></param>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.iotXChangeable">
	<summary>
 XChangeable Interface for exchangeable objects
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.otXChangeCommandType">
	<summary>
 XChange Commands
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.otXChangeConfigEntryType">
	<summary>
 otXChangeConfigEntryType
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.ObjectEntryname">
	<summary>
 returns the Object entryname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.XID">
	<summary>
 returns the ID of the ConfigMember
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.Objectname">
	<summary>
 returns the name of the Object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.Aliases">
	<summary>
 returns a List of Aliases
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.Configname">
	<summary>
 returns the configname of this Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.HasAlias(System.String)">
	<summary>
 Has Alias
 </summary>
	<param name="alias"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.XChangeCmd">
	<summary>
 gets or sets the Xchange Command
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.xobjectdefinition">
	<summary>
 gets the xchange object object definition
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.IDNO">
	<summary>
 Primary Key Indexno
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.IsXChanged">
	<summary>
 gets or sets the Xhanged Flag - value is not xchangend to and from Host Application
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.IsReadOnly">
	<summary>
 sets the Readonly Flag - value of the OTDB cannot be overwritten
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.IsObjectEntry">
	<summary>
 gets or sets the Attribute Entry Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.IsCompound">
	<summary>
 gets True if this is a Compound
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.IsColumn">
	<summary>
 gets True if the Attribute is a Field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.IsObject">
	<summary>
 gets True if this is an Object Entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.Ordinal">
	<summary>
 gets or sets the ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.IsOrderedBy">
	<summary>
 gets or sets the OrderedBy Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.Type">
	<summary>
 returns the type of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.IXChangeConfigEntry.ObjectEntryDefinition">
	<summary>
 returns the object entry definition 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.IXChangeConfigEntry">
	<summary>
 Interface for XConfigMembers
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeObject.IsObjectEntry">
	<summary>
 gets or sets the Attribute Entry Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeObject.IsColumn">
	<summary>
 gets True if the Attribute is a Field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeObject.IsObject">
	<summary>
 gets True if this is an Object Entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeObject.XChangeCmd">
	<summary>
 gets or sets the Xchange Command
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeObject.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeObject.Create(System.String,System.Int64,System.String,OnTrack.XChange.otXChangeCommandType,System.String,System.Boolean)">
	<summary>
 creates a persistable XChange member with primary Key
 </summary>
	<param name="configname"></param>
	<param name="indexno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeObject.Retrieve(System.String,System.Int64,System.String,System.Boolean)">
	<summary>
 retrieves a persistable XChange Object
 </summary>
	<param name="configname"></param>
	<param name="indexno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XChangeObject">
	<summary>
 describes an XChange XConfigMember Object
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeObjectEntry.IsObjectEntry">
	<summary>
 gets or sets the Attribute Entry Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeObjectEntry.IsObject">
	<summary>
 gets True if this is an Object Entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeObjectEntry.IsDynamicAttribute">
	<summary>
 gets or sets the Dynamic Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeObjectEntry.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeObjectEntry.Create(System.String,System.Int64,System.String,System.Boolean)">
	<summary>
 creates a persistable XChange Objectentry
 </summary>
	<param name="configname"></param>
	<param name="indexno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeObjectEntry.Retrieve(System.String,System.Int64,System.String,System.Boolean)">
	<summary>
 retrieves a persistable XChange Object Entry
 </summary>
	<param name="configname"></param>
	<param name="indexno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XChangeObjectEntry">
	<summary>
 describes object entry definition for X Change configuration entry
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XChangeConfigAbstractEntry.ConstTableID">
	<summary>
 Table
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XChangeConfigAbstractEntry.ConstFNXConfigID">
	<summary>
 keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XChangeConfigAbstractEntry.constFKXConfig">
	<summary>
 foreign key
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XChangeConfigAbstractEntry.ConstFNObjectID">
	<summary>
 fields
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XChangeConfigAbstractEntry._configname">
	<summary>
 Mappings
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.XID">
	<summary>
 gets or sets the XChange ID for the Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.ObjectEntryname">
	<summary>
 gets the entryname of the data object data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.Objectname">
	<summary>
 gets or sets the objectname to which the entry belongs
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.Type">
	<summary>
 gets or sets the objectname to which the entry belongs
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.Configname">
	<summary>
 gets the configname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.Aliases">
	<summary>
 gets the Aliases of the XChange Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.HasAlias(System.String)">
	<summary>
 gets true if the XChangeMember has the Alias
 </summary>
	<param name="alias"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.XChangeCmd">
	<summary>
 gets or sets the Xchange Command
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.Domainid">
	<summary>
 gets or sets the domain ID - set it to nothing alwyas the currentdomainId will apply
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.ObjectEntryDefinition">
	<summary>
 gets the ObjectEntry Definition for the XChange Member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.XObjectDefinition">
	<summary>
 return the ObjectDefinition of the associated XObject (not the XObjectEntry - nor the Objectdefinition of the XchangeConfig itself)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.Ordinal">
	<summary>
 gets or sets the ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.IDNO">
	<summary>
 Primary Key Indexno
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.IsXChanged">
	<summary>
 gets or sets the Xhanged Flag - value is not xchangend to and from Host Application
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.IsReadOnly">
	<summary>
 sets the Readonly Flag - value of the OTDB cannot be overwritten
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.IsObjectEntry">
	<summary>
 returns true if this entry is an object entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.IsCompound">
	<summary>
 gets True if this is a Compound
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.IsColumn">
	<summary>
 gets True if the Attribute is a Column
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.IsObject">
	<summary>
 gets True if this is entry is an Object 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.IsOrderedBy">
	<summary>
 gets or sets the OrderedBy Flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.Orderno">
	<summary>
 Gets or sets the Order ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfigAbstractEntry.XChangeConfig">
	<summary>
 returns the the xchange config of this entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfigAbstractEntry.Incordinal">
	<summary>
 Increment ordinal
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XChangeConfigAbstractEntry">
	<summary>
 abstract class to describe an XChangeConfiguration EntryMember - an individual item
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XChangeConfiguration.constTableID">
	<summary>
 Table
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XChangeConfiguration.constFNID">
	<summary>
 Keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XChangeConfiguration.constFNDesc">
	<summary>
 Fields
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XChangeConfiguration._configname">
	<summary>
 Mappings
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XChangeConfiguration.ConstROutline">
	<summary>
 Relation to Outline
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XChangeConfiguration._msglog">
	<summary>
  dynamic entries
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfiguration.OutlineID">
	<summary>
 Gets or sets the S outlineid.
 </summary>
	<value>The S outlineid.</value>
</member><member name="P:OnTrack.XChange.XChangeConfiguration.Outline">
	<summary>
 returns the outline object for this xchangeconfiguration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfiguration.AllowDynamicEntries">
	<summary>
 Gets or sets the dynamic attributes.
 </summary>
	<value>The S dynamic attributes.</value>
</member><member name="P:OnTrack.XChange.XChangeConfiguration.Configname">
	<summary>
 gets name of configuration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfiguration.Description">
	<summary>
 gets or sets the description
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfiguration.ProcessedDate">
	<summary>
 sets the dynamic processed date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfiguration.NoObjects">
	<summary>
 get the number of objects
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfiguration.NoObjectEntries">
	<summary>
 get the number of entries
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.GetMaxordinalNo">
	<summary>
  get the maximal ordinal of exchange object entry as long if it is numeric
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.GetMaxIDNO">
	<summary>
 returns the maximal index number of a xchange entry
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.GetHighestXCmd">
	<summary>
 gets the highest XCommand Ranking
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.SetObjectXCmd(System.String,OnTrack.XChange.otXChangeCommandType)">
	<summary>
 set the object xchange command
 </summary>
	<param name="name"></param>
	<param name="xchangecommand"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.RefreshObjects(System.String)">
	<summary>
 refresh all ObjectLoads
 </summary>
	<param name="domainid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.AddObjectByName(System.String,System.String,System.Int64,OnTrack.XChange.otXChangeCommandType)">
	<summary>
 Adds an object to exchange by name and orderno
 </summary>
	<param name="name"></param>
	<param name="orderno"></param>
	<param name="xcmd"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.AddEntryByObjectEntry(System.String@,System.String,System.Object,System.Boolean,OnTrack.XChange.otXChangeCommandType,System.Boolean,System.String)">
	<summary>
 Adds an xchange entry by object- and entryname
 </summary>
	<param name="entryname"></param>
	<param name="ordinal"></param>
	<param name="OBJECTNAME"></param>
	<param name="ISXCHANGED"></param>
	<param name="XCMD"></param>
	<param name="READONLY"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.AddEntryByObjectEntry(OnTrack.Database.iormObjectEntry@,System.Object,System.String,System.Boolean,OnTrack.XChange.otXChangeCommandType,System.Boolean,System.String)">
	<summary>
 adds an xchange entry by the objectentry from the repository
 </summary>
	<param name="objectentry"></param>
	<param name="ordinal"></param>
	<param name="objectname"></param>
	<param name="isxchanged"></param>
	<param name="xcmd"></param>
	<param name="readonly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.AddXIDReference(OnTrack.XChange.XChangeObjectEntry@)">
	<summary>
 Add an Entry by ID
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.AddObjectReference(OnTrack.XChange.XChangeObjectEntry@)">
	<summary>
 Add an Entry
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.AddAliasReference(OnTrack.XChange.XChangeObjectEntry@)">
	<summary>
 Add an Entry by ID
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.XChangeConfiguration_OnRemovedEntry(System.Object,OnTrack.Database.ormRelationCollection{OnTrack.XChange.XChangeObjectEntry}.EventArgs)">
	<summary>
 Event Handler for on Removed
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.XChangeConfiguration_OnAddEntry(System.Object,OnTrack.Database.ormRelationCollection{OnTrack.XChange.XChangeObjectEntry}.EventArgs)">
	<summary>
 Event handler for the Added Entry in the Entries Collection
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.XChangeConfiguration_OnAddEntry(System.Object,OnTrack.Database.ormRelationCollection{OnTrack.XChange.XChangeObject}.EventArgs)">
	<summary>
 Event handler for the Added Entry in the Entries Collection
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.XChangeConfiguration_OnRemovedEntry(System.Object,OnTrack.Database.ormRelationCollection{OnTrack.XChange.XChangeObject}.EventArgs)">
	<summary>
 Event Handler for on Removed
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.AddEntry(OnTrack.XChange.XChangeObjectEntry)">
	<summary>
 Add XChangeMember
 </summary>
	<param name="anEntry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.ClearEntries">
	<summary>
 reset all entry definitions
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.Reset(System.Boolean)">
	<summary>
 resets the object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.GetObjectByName(System.String)">
	<summary>
 retrieves an Object by its name or nothing
 </summary>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfiguration.ObjectEntryIDNos">
	<summary>
 returns the xchange object entry id's
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfiguration.ObjectIDNos">
	<summary>
 returns the xchange object id's
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfiguration.ObjectsByOrderNo">
	<summary>
 returns a list of xchangeobjects in ordinal order
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfiguration.ObjectnamesByOrderNo">
	<summary>
 returns a list of xchange object names in ordinal order
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.GetEntriesByObjectName(System.String)">
	<summary>
 retrieves a List of Attributes per Objectname
 </summary>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfiguration.OrderedXChangeObjectEntries">
	<summary>
 gets an list of ordered (by ordinal) XChange ObjectEntries
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfiguration.XChangeObjectEntries">
	<summary>
 gets an relational collection of xchange obejct entries
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XChangeConfiguration.XChangeobjects">
	<summary>
 gets an relational collection of the xchange objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.GetEntryByObjectEntryName(System.String,System.String)">
	<summary>
 returns an attribute by its entryname and objectname
 </summary>
	<param name="entryname"></param>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.GetEntry(System.Int64)">
	<summary>
 returns an XChange ConfigEnry by idno or nothing if not exists
 </summary>
	<param name="idno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.GetEntriesByMappingOrdinal(OnTrack.Database.Ordinal)">
	<summary>
 returns a List of XConfigMembers per ordinal
 </summary>
	<param name="ordinal"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.GetEntrybyAlias(System.String,System.String)">
	<summary>
 returns an Attribute by its XChange Alias ID
 </summary>
	<param name="alias"></param>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.GetObjectEntries(System.String)">
	<summary>
 Returns an ienumerable of all entries (optional just by an objectname)
 </summary>
	<param name="objectname">optional objectname</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Loads a XChange Configuration from Store
 </summary>
	<param name="configname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.Create(System.String,System.String,System.Boolean)">
	<summary>
 creates a persistable object with primary key
 </summary>
	<param name="configname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeConfiguration.All">
	<summary>
 retrieves a List of all XConfigs
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XChangeConfiguration">
	<summary>
 CLASS XConfig defines how data can be exchanged with the XChange Manager
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XOutline.ConstFNID">
	<summary>
 Keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XOutline.constFNdesc">
	<summary>
  Fields
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XOutline._id">
	<summary>
 Column Mappings
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XOutline.ConstRItems">
	<summary>
 Relations
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XOutline._dynamicCollection">
	<summary>
 runtime Elements
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XOutline.OrderByClause">
	<summary>
 Gets or sets the oder by clause.
 </summary>
	<value>The oder by clause.</value>
</member><member name="P:OnTrack.XChange.XOutline.DynamicBehaviour">
	<summary>
 Gets or sets the dynami behaviour.
 </summary>
	<value>The dynamic behaviour.</value>
</member><member name="P:OnTrack.XChange.XOutline.Objects">
	<summary>
 Gets or sets the objects.
 </summary>
	<value>The objects.</value>
</member><member name="P:OnTrack.XChange.XOutline.Items">
	<summary>
 Returns the Collection of OutlineItems in this
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XOutline.Description">
	<summary>
 Gets or sets the desc.
 </summary>
	<value>The desc.</value>
</member><member name="P:OnTrack.XChange.XOutline.DynamicAddRevisions">
	<summary>
 Gets or sets the dynamic add revisions.
 </summary>
	<value>The dynamic add revisions.</value>
</member><member name="P:OnTrack.XChange.XOutline.ID">
	<summary>
 gets the ID of the Outline
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XOutline.Count">
	<summary>
 gets the number outline items in the outline
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.Ordinals">
	<summary>
 ordinals of the components
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.Retrieve(System.String,System.String)">
	<summary>
 create an persistable outline
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.Create(System.String,System.String)">
	<summary>
 create an persistable outline
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.RunDynamic(System.String)">
	<summary>
 add the items dynamically
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.RunDynamicRevision">
	<summary>
 processes the dynamic collection with revisions
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutline.GetEnumerator">
	<summary>
 returns an enumerator
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XOutline">
	<summary>
 describes a XChange Outline data structure
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XOutlineItem.OutlineKey.Type">
	<summary>
 Gets the type.
 </summary>
	<value>The type.</value>
</member><member name="P:OnTrack.XChange.XOutlineItem.OutlineKey.ID">
	<summary>
 Gets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.XChange.XOutlineItem.OutlineKey.Value">
	<summary>
 Gets the value.
 </summary>
	<value>The value.</value>
</member><member name="T:OnTrack.XChange.XOutlineItem.OutlineKey">
	<summary>
 OutlineKey Class as subclass of outline item to make it flexible
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XOutlineItem.constFNID">
	<summary>
 keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XOutlineItem.constFKXOUTLINE">
	<summary>
 foreign key
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XOutlineItem.ConstFNordinall">
	<summary>
 fields
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XOutlineItem.DeliverableUid">
	<summary>
 Gets or sets the deliverable uid.
 </summary>
	<value>The deliverable uid.</value>
</member><member name="P:OnTrack.XChange.XOutlineItem.Text">
	<summary>
 Gets or sets the text.
 </summary>
	<value>The text.</value>
</member><member name="P:OnTrack.XChange.XOutlineItem.IsText">
	<summary>
 Gets or sets the is text.
 </summary>
	<value>The is text.</value>
</member><member name="P:OnTrack.XChange.XOutlineItem.IsGroup">
	<summary>
 Gets or sets the is group.
 </summary>
	<value>The is group.</value>
</member><member name="M:OnTrack.XChange.XOutlineItem.AllByID(System.String)">
	<summary>
 retrieves a sorted list of items by uid
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutlineItem.Retrieve(System.String,System.String)">
	<summary>
 retrieves the data object from the data store
 </summary>
	<param name="id"></param>
	<param name="ordinal"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XOutlineItem.Create(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.UInt16},System.Boolean)">
	<summary>
 create a new outline item in the persistable data store
 </summary>
	<param name="ID"></param>
	<param name="ordinal"></param>
	<param name="uid"></param>
	<param name="level"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XOutlineItem">
	<summary>
 OutlineItem of an Outline
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.InitializedCluster(System.Boolean)">
	<summary>
 Initialize a cluster
 </summary>
	<param name="FORCE"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.CreateClusterID(System.String,System.Boolean)">
	<summary>
 create a clusterID
 </summary>
	<param name="aDependTypeId"></param>
	<param name="isDynamic"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.MarkClusterID(System.String,System.String,System.String)">
	<summary>
 mark a clusterID in the tree
 </summary>
	<param name="aDependTypeId"></param>
	<param name="aClusterID"></param>
	<param name="aSameClusterID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.SaveClusterIDs(System.String,System.Boolean)">
	<summary>
 save the clusterID
 </summary>
	<param name="aDependTypeId"></param>
	<param name="isDynamic"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.UpdateSameClusterID(System.String,System.Boolean)">
	<summary>
 updates same clusterIDs
 </summary>
	<param name="aDependTypeId"></param>
	<param name="isDynamic"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.BuildDependencyNet(System.ComponentModel.BackgroundWorker)">
	<summary>
 Build Dependencies for all Parts
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.BuildDynamicDependencyCluster(System.String,System.ComponentModel.BackgroundWorker)">
	<summary>
 builds dynamic dependency clusters out of the dependencies net
 </summary>
	<param name="workspaceID"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.CheckAllDependencies(System.String,System.ComponentModel.BackgroundWorker)">
	<summary>
 check the dependiencies for all parts in a workspaceID if they are hold
 and create dependency check objects
 </summary>
	<param name="workspaceID"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.Dependency.CheckDependenciesFor(System.String,OnTrack.Scheduling.clsOTDBDependency@,System.String)">
	<summary>
 check dependencies for a part
 </summary>
	<param name="partID"></param>
	<param name="dependency"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.UserValidation">
	<summary>
 Structure to Use to Validate UserInformation
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otDBServerType">
	<summary>
 type of database server (OLEDB might be access or sql server)
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otDbDriverType">
	<summary>
 type of Database Driver
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otInfuseMode">
	<summary>
 Point of Lifecycle to infuse a relation
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otForeignKeyImplementation">
	<summary>
 the Foreign Key Implementation layer
 on Native Database layer or ORM (internal)
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otDataType">
	<summary>
 Data Types for OnTrack Database Fields
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.ValidateUser(System.String,System.String,OnTrack.Database.otAccessRight,System.String)">
	<summary>
 validates the User against the Database with a accessrequest
 </summary>
	<param name="username"></param>
	<param name="password"></param>
	<param name="accessRequest"></param>
	<param name="domainid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.GetIndex(System.Object@,OnTrack.Database.IndexDefinition@,System.Boolean,System.Boolean,OnTrack.Database.iormConnection@)">
	<summary>
 creates or retrieves an index out of a indexdefinition
 </summary>
	<param name="nativeTable"></param>
	<param name="indexdefinition"></param>
	<param name="forceCreation"></param>
	<param name="createOrAlter"></param>
	<param name="connection"></param>
	<returns>native index object</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.InstallOnTrackDatabase(System.Boolean,System.String[])">
	<summary>
 Install the OnTrackDatabase
 </summary>
	<param name="askBefore"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormDatabaseDriver.DatabaseType">
	<summary>
 the Type of the Server
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.PersistLog(OnTrack.SessionMessageLog@)">
	<summary>
 Persist the Session or ErrorLog
 </summary>
	<param name="log"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.VerifyOnTrackDatabase(System.String[],System.Boolean,System.Boolean)">
	<summary>
 verify OnTrack if Data Objects are there and up to date
 </summary>
	<returns>true if OnTrack is ok</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.CreateDBUserDefTable(System.Object@)">
	<summary>
 creates the UserDefinition Table
 </summary>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.CreateDBParameterTable(System.Object@)">
	<summary>
 creates the DB parameter table
 </summary>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.SetDBParameter(System.String,System.Object,System.Object@,System.Boolean,System.Boolean)">
	<summary>
 sets a db parameter
 </summary>
	<param name="parametername"></param>
	<param name="value"></param>
	<param name="nativeConnection"></param>
	<param name="updateOnly"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.GetDBParameter(System.String,System.Object@,System.Boolean)">
	<summary>
 returns a DB parameter value
 </summary>
	<param name="parametername"></param>
	<param name="nativeConnection"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.GetUserValidation(System.String,System.Boolean,System.Object@)">
	<summary>
 gets a user validation structure from the DB
 </summary>
	<param name="username"></param>
	<param name="selectAnonymous"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.GetTableStore(System.String,System.Boolean)">
	<summary>
 returns a Tablestore Object
 </summary>
	<param name="tableID"></param>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.GetTableSchema(System.String,System.Boolean)">
	<summary>
 returns a Tableschema Object
 </summary>
	<param name="tableID"></param>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.RunSqlStatement(System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@,System.Boolean,System.Object)">
	<summary>
 runs a sql statement against the database
 </summary>
	<param name="sqlcmdstr"></param>
	<param name="parameters"></param>
	<param name="silent"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.HasSqlCommand(System.String)">
	<summary>
 checks if SqlCommand is in Store of the driver
 </summary>
	<param name="id">id of the command</param>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.StoreSqlCommand(OnTrack.Database.iormSqlCommand@)">
	<summary>
 Store the Command by its ID - replace if existing
 </summary>
	<param name="sqlCommand">a iOTDBSqlCommand</param>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.RetrieveSqlCommand(System.String)">
	<summary>
 Retrieve the Command from Store
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.AssignNativeDBParameter(System.String,OnTrack.Database.otDataType,System.Int64,System.Object)">
	<summary>
 creates and assigns a native DB Paramter by otdb datatype
 </summary>
	<param name="parametername"></param>
	<param name="datatype"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDatabaseDriver.GetTargetTypeFor(OnTrack.Database.otDataType)">
	<summary>
 returns the target type for a OTDB FieldType - MAPPING
 </summary>
	<param name="type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormDatabaseDriver">
	<summary>
 interface defines a wraper database definition class for ORM functions
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.GetRecordsBySqlCommand(OnTrack.Database.ormSqlSelectCommand@,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
	<summary>
 get the records by a sqlcommand
 </summary>
	<param name="sqlcommand"></param>
	<param name="parametervalues"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormDataStore.Connection">
	<summary>
 sets or gets the connection to the database
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormDataStore.TableSchema">
	<summary>
 sets or gets the schema class for this tablestore
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormDataStore.TableID">
	<summary>
 set or gets the ID (name) of the table
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormDataStore.IsLinqAvailable">
	<summary>
 returns true if the tablestore supports Linq
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.CreateUniquePkValue(System.Object[]@,System.String)">
	<summary>
 returns a new unique key value
 </summary>
	<param name="pkArray">sets or fills this array</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.Refresh(System.Boolean)">
	<summary>
 Refresh the data of the tablestore
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.GetRecordsBySqlCommand(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@)">
	<summary>
 retrieves a collection of records by retrieving or creating a sql command from the data store
 </summary>
	<param name="ID"></param>
	<param name="wherestr"></param>
	<param name="fullsqlstr"></param>
	<param name="innerjoin"></param>
	<param name="orderby"></param>
	<param name="silent"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.GetRecordsByIndex(System.String,System.Object[]@,System.Boolean)">
	<summary>
 returns a collection of clsotdbrecord by an named index / view and keys Array in the datastore
 </summary>
	<param name="indexname"></param>
	<param name="keyArray"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.InfuseRecord(OnTrack.Database.ormRecord@,System.Object@,System.Boolean,System.Boolean)">
	<summary>
 infuses a clsotdbRecord from the datastore
 </summary>
	<param name="newRecord"></param>
	<param name="rowObject"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.PersistRecord(OnTrack.Database.ormRecord@,System.DateTime,System.Boolean)">
	<summary>
 persists a clsotdbRecord to the data store
 </summary>
	<param name="record"></param>
	<param name="timestamp"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.RunSqlStatement(System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@,System.Boolean)">
	<summary>
 runs a plain sql statement
 </summary>
	<param name="sqlcmdstr"></param>
	<param name="parameters"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.RunSqlCommand(OnTrack.Database.ormSqlCommand@,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
	<summary>
 runs a sql command 
 </summary>
	<param name="command"></param>
	<param name="parametervalues"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.HasProperty(System.String)">
	<summary>
 returns true if the tablestore has the named property
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.GetProperty(System.String)">
	<summary>
 returns the Property by name
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.SetProperty(System.String,System.Object)">
	<summary>
 sets the property by name for the tablestore
 </summary>
	<param name="name"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.HasSqlCommand(System.String)">
	<summary>
 checks if SqlCommand is in Store of the driver
 </summary>
	<param name="id">id of the command</param>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.StoreSqlCommand(OnTrack.Database.iormSqlCommand@)">
	<summary>
 Store the Command by its ID - replace if existing
 </summary>
	<param name="sqlCommand">a iOTDBSqlCommand</param>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.RetrieveSqlCommand(System.String)">
	<summary>
 Retrieve the Command from Store
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.CreateSqlCommand(System.String)">
	<summary>
 Retrieve the Command from Store or create new command
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormDataStore.CreateSqlSelectCommand(System.String,System.Boolean,System.Boolean)">
	<summary>
 Retrieve the Command from Store or create a new Select Command
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormDataStore">
	<summary>
 defines an interface for persistency classes which are able to persist clsOTDBRecord 
 through an iotdbconnection object
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotDataSchema.TableID">
	<summary>
 associated table id of the schema
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotDataSchema.IsInitialized">
	<summary>
 True if Schema is read and initialized
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotDataSchema.Indices">
	<summary>
 all Indices's as list
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.Refresh(System.Boolean)">
	<summary>
 refresh loads the schema
 </summary>
	<param name="reloadForce"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotDataSchema.PrimaryKeyIndexName">
	<summary>
 gets the name of the primary key
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotDataSchema.Fieldnames">
	<summary>
 all fieldnames in the schema as List
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.Getfieldname(System.Int32)">
	<summary>
 return the fieldname by ordinal
 </summary>
	<param name="i"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.HasprimaryKeyfieldname(System.String@)">
	<summary>
 true if the fieldname exists in the primary key
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.Hasfieldname(System.String)">
	<summary>
 true if the fieldname exists in the schema
 </summary>
	<param name="Name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.GetDomainIDPKOrdinal">
	<summary>
 returns the ordinal number of the domainID in the primary key array - less zero if not in the primary key
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.GetPrimaryKeyfieldname(System.UInt16)">
	<summary>
 get the Primary Key fieldname by Index i.returns "" if there is none
 </summary>
	<param name="i"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.GetordinalOfPrimaryKeyField(System.UInt16)">
	<summary>
  get the Primary Key fieldname no by field index i.  returns -1 if there is none
 </summary>
	<param name="i"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.NoPrimaryKeyFields">
	<summary>
 the number of fields in the primary key
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iotDataSchema.NoFields">
	<summary>
 the number of fields
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.GetIndex(System.String)">
	<summary>
 gets an Index by name
 </summary>
	<param name="indexname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.HasIndex(System.String)">
	<summary>
 True if index exists
 </summary>
	<param name="indexname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotDataSchema.AssignNativeDBParameter(System.String,System.String)">
	<summary>
 Assign a native DB parameters and return
 </summary>
	<param name="fieldname"></param>
	<param name="parametername"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iotDataSchema">
	<summary>
 interface for a native table schema for a table store
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormConnection.IsConnected">
	<summary>
 returns true if connected
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormConnection.IsInitialized">
	<summary>
 returns true if connection is initialized
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormConnection.Session">
	<summary>
 gets the Session of the Connection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormConnection.UILogin">
	<summary>
 Gets or sets the UI login.
 </summary>
	<value>The UI login.</value>
</member><member name="P:OnTrack.Database.iormConnection.Access">
	<summary>
 Gets or sets the access.
 </summary>
	<value>The access.</value>
</member><member name="P:OnTrack.Database.iormConnection.Dbpassword">
	<summary>
 Gets or sets the dbpassword.
 </summary>
	<value>The dbpassword.</value>
</member><member name="P:OnTrack.Database.iormConnection.Dbuser">
	<summary>
 Gets or sets the dbuser.
 </summary>
	<value>The dbuser.</value>
</member><member name="P:OnTrack.Database.iormConnection.DBName">
	<summary>
 Gets or sets the name of the database or file.
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.iormConnection.PathOrAddress">
	<summary>
 Gets or sets the path.
 </summary>
	<value>The path.</value>
</member><member name="P:OnTrack.Database.iormConnection.Connectionstring">
	<summary>
 Gets or sets the connectionstring.
 </summary>
	<value>The connectionstring.</value>
</member><member name="P:OnTrack.Database.iormConnection.Databasetype">
	<summary>
 Gets or sets the databasetype.
 </summary>
	<value>OnTrackDatabaseServer</value>
</member><member name="P:OnTrack.Database.iormConnection.DatabaseDriver">
	<summary>
 Gets or sets the DatabaseEnvirorment.
 </summary>
	<value>iOTDBDatabaseEnvirorment</value>
</member><member name="P:OnTrack.Database.iormConnection.NativeConnection">
	<summary>
 Gets the NativeConnection.
 </summary>
	<value>Object</value>
</member><member name="E:OnTrack.Database.iormValidatable.OnValidating">
	<summary>
 Event on Object Instance Level for Validation (before Validation)
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:OnTrack.Database.iormValidatable.OnValidated">
	<summary>
 Event on Object Instance Level for Validation (after Validation)
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormValidatable.Validate(OnTrack.ObjectMessageLog)">
	<summary>
 validates the Business Object as total
 </summary>
	<returns>True if validated and OK</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormValidatable.RaiseOnValidatingEvent(OnTrack.ObjectMessageLog)">
	<summary>
 raise the validating event and returns the result 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormValidatable">
	<summary>
 Interface for Validation of objects
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormQueriedEnumeration">
	<summary>
 interface for all queried Enumeration
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormQueriable.GetQuery(System.String)">
	<summary>
 returns a queried Enumeration by name
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormQueriable">
	<summary>
 interface describes a queriable object class
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.ObjectDefinition">
	<summary>
 get the persistable object definition
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.IsAlive(System.String,System.Boolean)">
	<summary>
 retruns true or throws error if the dataobject is alive (created, retrieved, infused)
 </summary>
	<param name="subname"></param>
	<param name="throwError"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.Create(OnTrack.Database.ormRecord@,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
	<summary>
 create the dataobject as persistable object in the data store
 </summary>
	<param name="record"></param>
	<param name="domainID"></param>
	<param name="checkUnique"></param>
	<param name="runtimeOnly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.PrimaryTableStore">
	<summary>
 Tablestore associated with this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.Record">
	<summary>
 TableID associated with this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.primaryTableID">
	<summary>
 TableID associated with this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.IsLoaded">
	<summary>
 True if data object is loaded from data store
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.IsCreated">
	<summary>
 True if data object is created in the data store
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.IsInitialized">
	<summary>
 True if data object is initialized and working
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.IsDeleted">
	<summary>
 returns true if the object is deleted
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.ObjectID">
	<summary>
 returns the Object ID of the persistable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormPersistable.RuntimeOnly">
	<summary>
 returns True if the persistable is only a runtime object and not persistable before not switched to runtimeOff
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.Initialize(System.Boolean)">
	<summary>
 Initialize the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.Inject(System.Object[]@,System.String,OnTrack.Database.iormDatabaseDriver,System.Boolean)">
	<summary>
 load and infuse the dataobject by primary key
 </summary>
	<param name="pkArray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.Create(System.Object[]@,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
	<summary>
 create a persistable dataobject
 </summary>
	<param name="pkArray"></param>
	<param name="checkUnique"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.Delete(System.Nullable{System.DateTime})">
	<summary>
 deletes a persistable object in the datastore
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.Persist(System.Nullable{System.DateTime},System.Boolean)">
	<summary>
 Perists the object in the datastore
 </summary>
	<param name="timestamp"></param>
	<param name="doFeedRecord"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormPersistable.GetObjectClassVersion(OnTrack.Database.iormPersistable,System.String)">
	<summary>
 returns the version by attribute of the persistance objects
 </summary>
	<param name="name"></param>
	<param name="dataobject"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormPersistable">
	<summary>
 interface describes a persistable OTDB Data Object
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormInfusable.InfuseRelation(System.String,System.Boolean)">
	<summary>
 requests a relation by id to be infused, force if it was loaded and infused before
 </summary>
	<param name="id"></param>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="E:OnTrack.Database.iormInfusable.OnInfusing">
	<summary>
 OnInfusing event triggers before infusing a data object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:OnTrack.Database.iormInfusable.OnInfused">
	<summary>
 OnInfused event triggers after infusing a data object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormInfusable.Infuse(OnTrack.Database.ormRecord@,System.Nullable{OnTrack.Database.otInfuseMode})">
	<summary>
 Infuse the object with data from the record
 </summary>
	<param name="record">record </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormInfusable">
	<summary>
 interface infusable if an Object can be infused by a record
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormCloneable`1.Clone(System.Object[],System.Nullable{System.Boolean})">
	<summary>
 clone the object with the new primary key
 </summary>
	<param name="pkarray">primary key array</param>
	<returns>the new cloned object or nothing</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormCloneable`1">
	<summary>
 interface cloneable if an object can be cloned
 </summary>
	<typeparam name="T"></typeparam>
	<remarks></remarks>
</member><member name="E:OnTrack.Database.iormCloneable.OnCloning">
	<summary>
 OnCloning Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iotHasCompounds.AddSlotCompounds(OnTrack.XChange.XEnvelope@)">
	<summary>
 adds compounds slots of an instance (out of the envelope) to the envelope
 </summary>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iotHasCompounds">
	<summary>
 interface for having an Compound 
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.IsMapped">
	<summary>
 returns true if the Entry is mapped to a class member field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.HasLowerRangeValue">
	<summary>
 True if ObjectEntry has a defined lower value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.LowerRangeValue">
	<summary>
 gets the lower range Value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.HasUpperRangeValue">
	<summary>
 True if ObjectEntry has a defined upper value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.UpperRangeValue">
	<summary>
 gets the upper range Value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.HasPossibleValues">
	<summary>
 gets the list of possible values
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.PossibleValues">
	<summary>
 gets the list of possible values
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.iormObjectEntry.Objectname">
	<summary>
 sets or gets the object name of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.XID">
	<summary>
 sets or gets the XchangeManager ID for the field 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.Entryname">
	<summary>
 returns the name of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.Typeid">
	<summary>
 sets or gets the type otObjectEntryDefinitionType
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.IsSpareField">
	<summary>
 sets or gets true if this field is a spare field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.Version">
	<summary>
 returns version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.Aliases">
	<summary>
 returns a array of aliases
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.Title">
	<summary>
 returns Title (Column Header)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.DefaultValue">
	<summary>
 sets or gets the default value for the object entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.IsColumn">
	<summary>
 returns True if the Entry is a Column
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.IsCompound">
	<summary>
 returns true if the Entry is a Compound entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.LookupCondition">
	<summary>
 sets or gets the condition for dynamically looking up values
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.iormObjectEntry.HasLookupCondition">
	<summary>
 returns true if there is a dynamically lookup condition
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormObjectEntry.OnswitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handler for the OnSwitchRuntimeOff event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormObjectEntry">
	<summary>
 Interface for Object Entries
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.iormLoggable.ContextIdentifier">
	<summary>
 sets or gets the context identifier for the message in the context
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iormLoggable.TupleIdentifier">
	<summary>
 sets or gets the tuple identifier for the message in the context
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iormLoggable.EntityIdentifier">
	<summary>
 sets or gets the entity identifier for the message in the context
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.iormLoggable.ObjectMessageLog">
	<summary>
 returns the ObjectMessageLog
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.iormLoggable">
	<summary>
 Interface for objects which are loggable - have a object message log
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.otCoreMessageType">
	<summary>
 Message types of the On Track Database Core
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.iUINativeForm.OtdbShadow">
	<summary>
 Connect with OTDB counterpart
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.iUINativeForm.ShowOTDBForm">
	<summary>
 show the native Form
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.iUINativeForm.CloseOTDBForm">
	<summary>
 Close the Form
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.iUINativeForm.RefreshOTDBForm">
	<summary>
 Refresh the Form
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.iUINativeForm">
	<summary>
 base interface of the native Forms to fullfill
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.iUINativeFormMessageBox">
	<summary>
 Interface of the MessageBox Form the mapped UI class has to fullfill
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.iUINativeFormLogin">
	<summary>
 Interface of the LoginForm the mapped UI class has to fullfill
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.CoreAbstractForm">
	<summary>
 Abstract Base Class for the OTDB UI Forms
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.CoreMessageBox.ButtonType">
	<summary>
 Button Types
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.CoreMessageBox.ResultType">
	<summary>
 Result
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.CoreMessageBox.MessageType">
	<summary>
 Type of Messagebox
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.UI.CoreMessageBox._form">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.CoreMessageBox.buttons">
	<summary>
 set the Buttons
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.CoreMessageBox.type">
	<summary>
 MessageType
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.CoreMessageBox.result">
	<summary>
 result
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.CoreMessageBox.Message">
	<summary>
 Message of the Message Box
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.CoreMessageBox.Title">
	<summary>
 Title of the Messagebox
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.CoreMessageBox">
	<summary>
 class is a wrapper abstract class for the Messagebox to OTDB
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.CoreLoginForm.#ctor">
	<summary>
 Constructor with initial database driver
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.CoreLoginForm.PossibleConfigSets">
	<summary>
 Gets or sets the possible config sets.
 </summary>
	<value>The possible config sets.</value>
</member><member name="P:OnTrack.UI.CoreLoginForm.PossibleDomains">
	<summary>
 Gets or sets the possible domains.
 </summary>
	<value>The possible domains.</value>
</member><member name="P:OnTrack.UI.CoreLoginForm.PossibleRights">
	<summary>
 Gets or sets the possible rights.
 </summary>
	<value>The possible rights.</value>
</member><member name="P:OnTrack.UI.CoreLoginForm.EnableDomain">
	<summary>
 Gets or sets the enable domain.
 </summary>
	<value>The enable domain.</value>
</member><member name="P:OnTrack.UI.CoreLoginForm.EnableChangeConfigSet">
	<summary>
 Gets or sets the enable config set.
 </summary>
	<value>The enable config set.</value>
</member><member name="P:OnTrack.UI.CoreLoginForm.enableAccess">
	<summary>
 Gets or sets the enable acces.
 </summary>
	<value>The enable acces.</value>
</member><member name="P:OnTrack.UI.CoreLoginForm.Configset">
	<summary>
 Gets or sets the configset.
 </summary>
	<value>The configset.</value>
</member><member name="P:OnTrack.UI.CoreLoginForm.Domain">
	<summary>
 Gets or sets the domain.
 </summary>
	<value>The domain.</value>
</member><member name="P:OnTrack.UI.CoreLoginForm.Messagetext">
	<summary>
 Gets or sets the messagetext.
 </summary>
	<value>The messagetext.</value>
</member><member name="P:OnTrack.UI.CoreLoginForm.EnableUsername">
	<summary>
 Gets or sets the enable username.
 </summary>
	<value>The enable username.</value>
</member><member name="P:OnTrack.UI.CoreLoginForm.Statustext">
	<summary>
 Gets or sets the statustext.
 </summary>
	<value>The statustext.</value>
</member><member name="T:OnTrack.UI.CoreLoginForm">
	<summary>
 class is a wrapper abstract class for the Login to OTDB
 </summary>
	<remarks></remarks>
</member><member name="P:clsLEGACYCartypes.printout">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:modHelperVBA.IsEmpty(System.Object@)">
	<summary>
 returns True if the object is empty - nothing or "" or Whitespace
 </summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="E:OnTrack.Database.ormDataObject.PropertyChanged">
	<summary>
 Events
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.ormDataObject_OnObjectMessageAdded(System.Object,OnTrack.ObjectMessageLog.EventArgs)">
	<summary>
 Handler cascaded the OnObjectMessageAdded Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.ormDataObject_RaiseOnRelationLoadNeeded(System.Object,OnTrack.Database.DataObjectRelationMgr.EventArgs)">
	<summary>
 cascade the OnRelationLoadNeeded from RelationManager
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.ormDataObject_RaiseOnRelationCreateNeeded(System.Object,OnTrack.Database.DataObjectRelationMgr.EventArgs)">
	<summary>
 cascade the OnRelationLoadNeeded from RelationManager
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.RaiseOnRelationLoading(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Raise the Instance OnRelationLoading
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.RaiseOnRelationLoaded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Raise the Instance OnRelationLoaded
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.ormDataObject_OnDefaultValuesNeeded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for defaultValues
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObjectOverloadedEventArgs.#ctor(System.Object[],System.Object[],OnTrack.Database.ormDataObject,System.Boolean,OnTrack.ObjectMessageLog@,System.Nullable{System.DateTime})">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObjectOverloadedEventArgs.GlobalPKArray">
	<summary>
 Gets or sets the old object.
 </summary>
	<value>The old object.</value>
</member><member name="P:OnTrack.Database.ormDataObjectOverloadedEventArgs.DomainPKArray">
	<summary>
 Gets or sets the old object.
 </summary>
	<value>The old object.</value>
</member><member name="T:OnTrack.Database.ormDataObjectOverloadedEventArgs">
	<summary>
 Event Class for the substitute event
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObjectCloneEventArgs.#ctor(OnTrack.Database.ormDataObject,OnTrack.Database.ormDataObject,OnTrack.ObjectMessageLog@,System.Nullable{System.DateTime})">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObjectCloneEventArgs.OldObject">
	<summary>
 Gets or sets the old object.
 </summary>
	<value>The old object.</value>
</member><member name="P:OnTrack.Database.ormDataObjectCloneEventArgs.NewObject">
	<summary>
 Gets or sets the old object.
 </summary>
	<value>The old object.</value>
</member><member name="T:OnTrack.Database.ormDataObjectCloneEventArgs">
	<summary>
 Event Class for the clone event
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObjectEventArgs.#ctor(OnTrack.Database.ormDataObject,OnTrack.Database.ormRecord,System.Boolean,System.Collections.Generic.List{System.String},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object[],System.Boolean,System.Nullable{OnTrack.Database.otInfuseMode},OnTrack.ObjectMessageLog@,System.Nullable{System.DateTime})">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.Msglog">
	<summary>
 Gets or sets the msglog.
 </summary>
	<value>The msglog.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.Timestamp">
	<summary>
 Gets the timestamp.
 </summary>
	<value>The timestamp.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.Infusemode">
	<summary>
 Gets the infusemode.
 </summary>
	<value>The infusemode.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.HasDomainBehavior">
	<summary>
 Gets the has domain behavior.
 </summary>
	<value>The has domain behavior.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.DomainID">
	<summary>
 Gets or sets the domain ID.
 </summary>
	<value>The domain ID.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.RelationIDs">
	<summary>
 Gets or sets the relation ID.
 </summary>
	<value>The relation ID.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.Result">
	<summary>
 Gets or sets the result.
 </summary>
	<value>The result.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.Pkarray">
	<summary>
 Gets or sets the pkarray.
 </summary>
	<value>The pkarray.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.UseCache">
	<summary>
 Gets or sets the use cache.
 </summary>
	<value>The use cache.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.AbortOperation">
	<summary>
 Gets or sets the abort.
 </summary>
	<value>The abort.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.Proceed">
	<summary>
 Gets or sets if to proceed.
 </summary>
	<value>The abort.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.DescribedByAttributes">
	<summary>
 Gets the described by attributes.
 </summary>
	<value>The described by attributes.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.Record">
	<summary>
 Gets the record.
 </summary>
	<value>The record.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEventArgs.DataObject">
	<summary>
 Gets the object.
 </summary>
	<value>The object.</value>
</member><member name="T:OnTrack.Database.ormDataObjectEventArgs">
	<summary>
 Event Arguments for Data Object Events
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObjectEntryValidationEventArgs.#ctor(OnTrack.Database.ormDataObject,System.String,System.Object,System.String,OnTrack.ObjectMessageLog@,System.Nullable{System.DateTime})">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObjectEntryValidationEventArgs.ValidationResult">
	<summary>
 Gets or sets the validation result.
 </summary>
	<value>The validation result.</value>
</member><member name="T:OnTrack.Database.ormDataObjectEntryValidationEventArgs">
	<summary>
 Event Arguments for the Object Entry Validation Event
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObjectValidationEventArgs.#ctor(OnTrack.Database.ormDataObject,System.String,OnTrack.ObjectMessageLog@,System.Nullable{System.DateTime})">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObjectValidationEventArgs.ValidationResult">
	<summary>
 Gets or sets the validation result.
 </summary>
	<value>The validation result.</value>
</member><member name="T:OnTrack.Database.ormDataObjectValidationEventArgs">
	<summary>
 Event Arguments for the Object Validation Event
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObjectEntryEventArgs.#ctor(OnTrack.Database.ormDataObject,System.String,System.Object,System.String,OnTrack.ObjectMessageLog@,System.Nullable{System.DateTime})">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObjectEntryEventArgs.Msglog">
	<summary>
 Gets or sets the msglog.
 </summary>
	<value>The msglog.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEntryEventArgs.ObjectEntryName">
	<summary>
 Gets or sets the name of the object entry.
 </summary>
	<value>The name of the object entry.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEntryEventArgs.Value">
	<summary>
 Gets or sets the value.
 </summary>
	<value>The value.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEntryEventArgs.Timestamp">
	<summary>
 Gets the timestamp.
 </summary>
	<value>The timestamp.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEntryEventArgs.DomainID">
	<summary>
 Gets or sets the domain ID.
 </summary>
	<value>The domain ID.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEntryEventArgs.Result">
	<summary>
 Gets or sets the result.
 </summary>
	<value>The result.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEntryEventArgs.AbortOperation">
	<summary>
 Gets or sets the abort.
 </summary>
	<value>The abort.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEntryEventArgs.Proceed">
	<summary>
 Gets or sets if to proceed.
 </summary>
	<value>The abort.</value>
</member><member name="P:OnTrack.Database.ormDataObjectEntryEventArgs.DataObject">
	<summary>
 Gets the object.
 </summary>
	<value>The object.</value>
</member><member name="T:OnTrack.Database.ormDataObjectEntryEventArgs">
	<summary>
 Event Args for ObjectEntry Events
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObjectRelationEventArgs.#ctor(OnTrack.Database.DataObjectRelationMgr.EventArgs@,System.Nullable{System.DateTime})">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObjectRelationEventArgs.RelationAttribute">
	<summary>
 Gets or sets the relation attribute.
 </summary>
	<value>The relation attribute.</value>
</member><member name="P:OnTrack.Database.ormDataObjectRelationEventArgs.Timestamp">
	<summary>
 Gets the timestamp.
 </summary>
	<value>The timestamp.</value>
</member><member name="P:OnTrack.Database.ormDataObjectRelationEventArgs.Infusemode">
	<summary>
 Gets the infusemode.
 </summary>
	<value>The infusemode.</value>
</member><member name="P:OnTrack.Database.ormDataObjectRelationEventArgs.RelationObjects">
	<summary>
 Gets or sets the relation ID.
 </summary>
	<value>The relation ID.</value>
</member><member name="P:OnTrack.Database.ormDataObjectRelationEventArgs.RelationID">
	<summary>
 Gets or sets the relation ID.
 </summary>
	<value>The relation ID.</value>
</member><member name="P:OnTrack.Database.ormDataObjectRelationEventArgs.Finished">
	<summary>
 Gets or sets if to proceed.
 </summary>
	<value>The abort.</value>
</member><member name="P:OnTrack.Database.ormDataObjectRelationEventArgs.DataObject">
	<summary>
 Gets the object.
 </summary>
	<value>The object.</value>
</member><member name="T:OnTrack.Database.ormDataObjectRelationEventArgs">
	<summary>
 Event Arguments for Data Object Events
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.Finalize">
	<summary>
 Finalize
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Session.DeliverableOnCloningResetEntries">
	<summary>
 Gets or sets an array of entry names of the deliverable object which should be reseted on cloning
 </summary>
	<value>The deliverable on clone reset entries.</value>
</member><member name="P:OnTrack.Session.DeliverableOnCloningCloneAlso">
	<summary>
 Gets or sets an array of object ids which should be cloned also if clonening the deliverable object
 </summary>
	<value>The deliverable on cloning clone also objects.</value>
</member><member name="P:OnTrack.Session.DeliverableUniqueEntries">
	<summary>
 Gets or sets the unique entries per deliverables as array of strings. These Entries will be checked if
 creating or cloneing deliverables
 </summary>
	<value>The deliverable unique entires.</value>
</member><member name="P:OnTrack.Session.CurrentDomainID">
	<summary>
 Gets or sets the domain ID (if setting then the domains will be switched).
 </summary>
	<value>The domain.</value>
</member><member name="P:OnTrack.Session.CurrentDomain">
	<summary>
 Gets  the domain.
 </summary>
	<value>The domain.</value>
</member><member name="P:OnTrack.Session.DefaultDeliverableTypeID">
	<summary>
 Gets or sets the default deliverable type ID.
 </summary>
	<value>The default deliverable type ID.</value>
</member><member name="P:OnTrack.Session.AutoPublishTarget">
	<summary>
 Gets or sets the auto publish target.
 </summary>
	<value>The auto publish target.</value>
</member><member name="P:OnTrack.Session.AccessLevel">
	<summary>
 Gets or sets the access level.
 </summary>
	<value>The access level.</value>
</member><member name="P:OnTrack.Session.Objects(System.String)">
	<summary>
 Gets or sets the Objects for an optional domainid
 </summary>
	<value>The Objects.</value>
</member><member name="P:OnTrack.Session.ValueListIDs">
	<summary>
 returns a list of all cached Valuelists names
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Session.ValueLists">
	<summary>
 returns a list of all cached Valuelists
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Session.ValueList(System.String)">
	<summary>
 returns a list of all cached Valuelists
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Session.ValueListValues(System.String)">
	<summary>
 returns the Values of a ValueList
 </summary>
	<param name="name"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Session.Username">
	<summary>
 Gets the user name.
 </summary>
	<value>The user name.</value>
</member><member name="P:OnTrack.Session.IsRunning">
	<summary>
  returns if session is running
 </summary>
	<value>The is running.</value>
</member><member name="P:OnTrack.Session.Configurations">
	<summary>
 Gets the configurations ComplexPropertyStore.
 </summary>
	<value>The configurations.</value>
</member><member name="P:OnTrack.Session.ConfigSetname">
	<summary>
 returns the setname to be used to connect to the databased
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Session.TodayLatency">
	<summary>
 Gets or sets the today latency.
 </summary>
	<value>The today latency.</value>
</member><member name="P:OnTrack.Session.DefaultScheduleTypeID">
	<summary>
 set or gets the DefaultScheduleTypeID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Session.DefaultCalendarName">
	<summary>
 Gets or sets the default name of the calendar.
 </summary>
	<value>The default name of the calendar.</value>
</member><member name="P:OnTrack.Session.DefaultWorkspaceID">
	<summary>
 Gets or sets the default workspaceID.
 </summary>
	<value>The default workspaceID.</value>
</member><member name="P:OnTrack.Session.IsBootstrappingInstallationRequested">
	<summary>
 Gets or sets the is bootstrapping mode.
 </summary>
	<value>The is bootstrapping installation.</value>
</member><member name="P:OnTrack.Session.IsInstallationRunning">
	<summary>
 Gets or sets the is installation Mode
 </summary>
	<value>The is bootstrapping installation.</value>
</member><member name="P:OnTrack.Session.IsStartingUp">
	<summary>
 Gets or sets the is statup Mode
 </summary>
	<value></value>
</member><member name="P:OnTrack.Session.IsDomainSwitching">
	<summary>
 Gets or sets the is statup Mode
 </summary>
	<value></value>
</member><member name="P:OnTrack.Session.CurrentWorkspaceID">
	<summary>
 Gets or sets the default workspaceID.
 </summary>
	<value>The default workspaceID.</value>
</member><member name="P:OnTrack.Session.Errorlog">
	<summary>
 the errorlog of the session
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Session.DependencySynchroMinOverlap">
	<summary>
 Gets or sets the dependency synchro min overlap.
 </summary>
	<value>The dependency synchro min overlap.</value>
</member><member name="P:OnTrack.Session.UILogin">
	<summary>
 Gets or sets the UI login.
 </summary>
	<value>The UI login.</value>
</member><member name="P:OnTrack.Session.IsInitialized">
	<summary>
 Gets or sets the is initialized.
 </summary>
	<value>The is initialized.</value>
</member><member name="P:OnTrack.Session.CurrentDBDriver">
	<summary>
 Gets the primary DB driver.
 </summary>
	<value>The primary DB driver.</value>
</member><member name="P:OnTrack.Session.SessionID">
	<summary>
 Gets the session ID.
 </summary>
	<value>The session ID.</value>
</member><member name="M:OnTrack.Session.OnCurrentConfigSetChanged(System.Object,OnTrack.Database.ComplexPropertyStore.EventArgs)">
	<summary>
 Event Handler for the Current ConfigurationSet Changed Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.OnConfigPropertyChanged(System.Object,OnTrack.Database.ComplexPropertyStore.EventArgs)">
	<summary>
 Event Handler for the Configuration Property Changed Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.OnRequestBootstrapInstall(System.Object,OnTrack.SessionBootstrapEventArgs)">
	<summary>
 EventHandler for BootstrapInstall requested by primaryDBDriver
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.InstallOnTrackDatabase(OnTrack.Database.ComplexPropertyStore.Sequence)">
	<summary>
 Install the Ontrack database
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.RequestToAbortStartingUp">
	<summary>
 Abort the Starting up if possible
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.RequestEndofBootstrap">
	<summary>
 requests and checks if an end of bootstrap is possible 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.RequireAccessRight(OnTrack.Database.otAccessRight,System.String,System.Boolean)">
	<summary>
 requires from OTDB the Access Rights - starts a session if not running otherwise just validates
 </summary>
	<param name="AccessRequest">otAccessRight</param>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.RaiseObjectChangedDefinitionEvent(System.Object,OnTrack.Database.ObjectDefinition.EventArgs)">
	<summary>
 Raises the Event ObjectChagedDefinition
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.ValidateUser(System.String,System.String,OnTrack.Database.otAccessRight,System.String,OnTrack.Database.iormDatabaseDriver,OnTrack.UserValidation,System.String)">
	<summary>
 Validate the User against the Database with the accessRight
 </summary>
	<param name="username"></param>
	<param name="password"></param>
	<param name="accessRequest"></param>
	<param name="domainID"></param>
	<param name="databasedriver"></param>
	<param name="uservalidation"></param>
	<param name="messagetext"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.ShutDown(System.Boolean)">
	<summary>
 Initiate closeDown this Session and the Connection to OnTrack Database
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.SwitchToDomain(System.String)">
	<summary>
 sets the current Domain
 </summary>
	<param name="newDomainID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.StartUpSessionEnviorment(System.Boolean,System.String)">
	<summary>
 Initialize and set all Parameters
 </summary>
	<param name="FORCE"></param>
	<returns>true if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.ShutDownSessionEnviorment(System.Boolean)">
	<summary>
 reset the Session or close it down
 </summary>
	<param name="FORCE">true if to do it even not initialized</param>
	<returns>True if successfully reseted</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Session.Session_OnDomainChanged(System.Object,OnTrack.SessionEventArgs)">
	<summary>
 handler for domain switched
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Session">
	<summary>
 Session Class holds all the Session based Data for On Track Database
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.SessionEventArgs.AbortOperation">
	<summary>
 Gets the abort operation.
 </summary>
	<value>The abort operation.</value>
</member><member name="P:OnTrack.SessionEventArgs.NewDomain">
	<summary>
 Gets or sets the new domain ID.
 </summary>
	<value>The new domain ID.</value>
</member><member name="P:OnTrack.SessionEventArgs.Session">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="T:OnTrack.SessionEventArgs">
	<summary>
 Session Event Arguments
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.DomainEventArgs.Domain">
	<summary>
 Gets or sets the new domain ID.
 </summary>
	<value>The new domain ID.</value>
</member><member name="P:OnTrack.DomainEventArgs.Session">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="T:OnTrack.DomainEventArgs">
	<summary>
 Domain Event Arguments
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionAgent.Worker(System.Object)">
	<summary>
 Worker Sub 
 </summary>
	<param name="stateInfo"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionAgent.Start">
	<summary>
 Start the Agent
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionAgent.Stop">
	<summary>
 Stop the the Agent
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.SessionAgent">
	<summary>
  Session Agent Class
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.SessionMessage.ConstFNTag">
	<summary>
 primary keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.SessionMessage.ConstFNID">
	<summary>
 column definitions
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionMessage.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.SessionMessage.Domainid">
	<summary>
 Gets or sets the domainid.
 </summary>
	<value>The domainid.</value>
</member><member name="P:OnTrack.SessionMessage.Objecttag">
	<summary>
 Gets or sets the objecttag.
 </summary>
	<value>The objecttag.</value>
</member><member name="P:OnTrack.SessionMessage.StackTrace">
	<summary>
 Gets or sets the stack trace.
 </summary>
	<value>The stack trace.</value>
</member><member name="P:OnTrack.SessionMessage.ID">
	<summary>
 Gets or sets the username.
 </summary>
	<value>The username.</value>
</member><member name="P:OnTrack.SessionMessage.Username">
	<summary>
 Gets or sets the username.
 </summary>
	<value>The username.</value>
</member><member name="P:OnTrack.SessionMessage.Tag">
	<summary>
 Gets or sets the tag.
 </summary>
	<value>The tag.</value>
</member><member name="P:OnTrack.SessionMessage.Processed">
	<summary>
 Gets or sets the processed.
 </summary>
	<value>The processed.</value>
</member><member name="P:OnTrack.SessionMessage.Entryno">
	<summary>
 Gets or sets the entryno.
 </summary>
	<value>The entryno.</value>
</member><member name="P:OnTrack.SessionMessage.Columnname">
	<summary>
 Gets or sets the name of the entry.
 </summary>
	<value>The name of the entry.</value>
</member><member name="P:OnTrack.SessionMessage.messagetype">
	<summary>
 Gets or sets the type of the error.
 </summary>
	<value>The type of the error.</value>
</member><member name="P:OnTrack.SessionMessage.Tablename">
	<summary>
 Gets or sets the tablename.
 </summary>
	<value>The tablename.</value>
</member><member name="P:OnTrack.SessionMessage.Objectname">
	<summary>
 Gets or sets the name of the object.
 </summary>
	<value>The name of the entry.</value>
</member><member name="P:OnTrack.SessionMessage.ObjectEntry">
	<summary>
 Gets or sets the name of the object entry.
 </summary>
	<value>The name of the entry.</value>
</member><member name="P:OnTrack.SessionMessage.Timestamp">
	<summary>
 Gets or sets the timestamp.
 </summary>
	<value>The timestamp.</value>
</member><member name="P:OnTrack.SessionMessage.Subname">
	<summary>
 Gets or sets the subname.
 </summary>
	<value>The subname.</value>
</member><member name="P:OnTrack.SessionMessage.Arguments">
	<summary>
 Gets or sets the arguments.
 </summary>
	<value>The arguments.</value>
</member><member name="P:OnTrack.SessionMessage.Exception">
	<summary>
 Gets or sets the exception.
 </summary>
	<value>The exception.</value>
</member><member name="P:OnTrack.SessionMessage.Message">
	<summary>
 Gets or sets the message.
 </summary>
	<value>The message.</value>
</member><member name="M:OnTrack.SessionMessage.CreateDataObject(System.String,System.Int64)">
	<summary>
 create a persistable Error
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionMessage.Create(System.String,System.Int64)">
	<summary>
 create an object after it was used
 </summary>
	<param name="sessiontag"></param>
	<param name="entryno"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionMessage.Clone">
	<summary>
 clone the error
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.SessionMessage">
	<summary>
 describes a persistable Session Log Message
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.SessionBootstrapEventArgs">
	<summary>
 Event Arguments for Request Bootstrapping Installation
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.SessionMessageLog.Tag">
	<summary>
 Gets the tag.
 </summary>
	<value>The tag.</value>
</member><member name="M:OnTrack.SessionMessageLog.GetEnumerator">
	<summary>
 Returns an enumerator that iterates through a collection.
 </summary>
	<returns>
 An <see cref="T:System.Collections.IEnumerator"/> object that can be
 used to iterate through the collection.
 </returns>
</member><member name="M:OnTrack.SessionMessageLog.Clear">
	<summary>
 Clears the error log from all messages
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionMessageLog.Persist(System.DateTime)">
	<summary>
 Persist the Messages
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionMessageLog.Enqueue(OnTrack.SessionMessage)">
	<summary>
 Add an otdb error object to the log
 </summary>
	<param name="otdberror"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionMessageLog.Size">
	<summary>
 returns the size of the log
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionMessageLog.PeekFirst">
	<summary>
 try to get the first Error from log
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionMessageLog.PeekLast">
	<summary>
 try to get the most recent error from log without removing
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.SessionMessageLog.Retain">
	<summary>
 remove and returns the first error in the error log 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.SessionMessageLog">
	<summary>
 Describes an not persistable Log of Messages. Can be persisted by SessionLogMessages
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectMessageLog.EventArgs.Log">
	<summary>
 Gets  the objectmessage log.
 </summary>
	<value>The objectmessage.</value>
</member><member name="P:OnTrack.ObjectMessageLog.EventArgs.Message">
	<summary>
 Gets  the objectmessage.
 </summary>
	<value>The objectmessage.</value>
</member><member name="T:OnTrack.ObjectMessageLog.EventArgs">
	<summary>
 Event Args
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectMessageLog._tag">
	<summary>
 Variables
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectMessageLog._MessagesPerStatusType">
</member><member name="E:OnTrack.ObjectMessageLog.OnObjectMessageAdded">
	<summary>
 Events 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectMessageLog.#ctor(OnTrack.Database.ormDataObject,System.String,System.String,System.String)">
	<summary>
 constructor
 </summary>
	<param name="container"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectMessageLog.Tag">
	<summary>
 gets the Tag of the Log
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectMessageLog.MaxMessageNo">
	<summary>
 returns the greatest message no in the log
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectMessageLog.ObjectMessageLog">
	<summary>
 Returns myself ?!
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectMessageLog.Clear">
	<summary>
 Clear the ObjectMessagelog from all Messages
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectMessageLog.ObjectMessageLog_OnInfused(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 event handler for tag
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectMessageLog.ObjectMessageLog_OnAdding(System.Object,OnTrack.Database.ormRelationCollection{OnTrack.ObjectMessage}.EventArgs)">
	<summary>
 event handler for adding a message to the log to set the idno
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectMessageLog.Retrieve(System.String)">
	<summary>
 retrieves the log and loads all messages for the container object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectMessageLog.Add(OnTrack.ObjectMessage)">
	<summary>
 Add an existing message (basically copy it and add it)
 </summary>
	<param name="message"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectMessageLog.ObjectMessageLog_OnAdded(System.Object,OnTrack.Database.ormRelationCollection{OnTrack.ObjectMessage}.EventArgs)">
	<summary>
 Handler for the  internal OnAdded Event - raises the Object Added event of the Log
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectMessageLog.MessageTexts">
	<summary>
 returns a list of messagetexts
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectMessageLog.MessageText">
	<summary>
 returns a one string with all messagetextes
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectMessageLog.GetHighesStatusItem(System.String)">
	<summary>
 Returns the Highest StatusItem - returns nothing if the statusItem is not there
 </summary>
	<param name="statustype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectMessageLog.GetHighestMessageHighestStatusItem(System.String)">
	<summary>
 Returns the Highest StatusItem - returns nothing if the statusItem is not there
 </summary>
	<param name="statustype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectMessageLog.ObjectMessageLog_OnRemoved(System.Object,OnTrack.Database.ormRelationCollection{OnTrack.ObjectMessage}.EventArgs)">
	<summary>
 OnRemoved Handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectMessageLog">
	<summary>
 ObjectLog for Messages for Business Objects 
 </summary>
	<remarks>
 
 The ObjectMessageLog is not an Data Object on its own. it is derived from the RelationCollection and
 embedded as relation Member in a data object class
 </remarks>
</member><member name="M:OnTrack.OnTrackChangeLog.Versioning.#ctor(System.Int64,System.Int64,System.Int64)">
	<summary>
 constructor
 </summary>
	<param name="version"></param>
	<param name="release"></param>
	<param name="patch"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.OnTrackChangeLog.Versioning.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.OnTrackChangeLog.Versioning.Release">
	<summary>
 Gets or sets the release.
 </summary>
	<value>The release.</value>
</member><member name="P:OnTrack.OnTrackChangeLog.Versioning.Patch">
	<summary>
 Gets or sets the patch.
 </summary>
	<value>The patch.</value>
</member><member name="M:OnTrack.OnTrackChangeLog.Versioning.CompareTo(System.Object)">
	<summary>
 Comparer
 </summary>
	<param name="obj"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.OnTrackChangeLog.Versioning.GetHascode">
	<summary>
 returns hashcode
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.OnTrackChangeLog.Versioning.ToString">
	<summary>
 Returns the Versioning String
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.OnTrackChangeLog.Versioning">
	<summary>
 Version presentation class
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.OnTrackChangeLog.Version(System.Object)">
	<summary>
 Returns the Maximal Version or with optional application the version of the application (or nothing)
 </summary>
	<param name="application"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.OnTrackChangeLog.Refresh(System.Type)">
	<summary>
 Initialize the Changelog by searching the assembly
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.OnTrackChangeLog.Clear">
	<summary>
 Clear the OnTrackChangeLog from all Entries
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.OnTrackChangeLog.Add(OnTrack.Commons.OnTrackChangeLogEntry)">
	<summary>
 Add an ChangeLogEntry
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.OnTrackChangeLog.Add(OnTrack.Database.ormChangeLogEntry)">
	<summary>
 Add ormAttribute ormChangeLogEntry
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.OnTrackChangeLog.Retrieve">
	<summary>
 retrieves the log and loads all messages for the container object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.OnTrackChangeLog">
	<summary>
 OntrackChangeLog for Changes in the OnTrack Modules and Classes 
 </summary>
	<remarks>
 
 The OntrackChangeLog is not an Data Object on its own. it is derived from the RelationCollection and
 embedded as relation Member in a data object class
 </remarks>
</member><member name="F:OnTrack.ObjectMessage.ConstTableID">
	<summary>
 Table
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectMessage.ConstFNTag">
	<summary>
 Primary Key Entries
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectMessage.ConstFNMessageTypeUID">
	<summary>
 ColumnEntries
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectMessage._tag">
	<summary>
 Mappings
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectMessage.ConstRMessageType">
	<summary>
 Relation to ScheduleDefinition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectMessage._lock">
	<summary>
 runtime dynamic members
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectMessage.IsPersisted">
	<summary>
 Gets or sets the persistflag.
 </summary>
	<value>The persistflag.</value>
</member><member name="P:OnTrack.ObjectMessage.Sender">
	<summary>
 Gets or sets the sender.
 </summary>
	<value>The sender.</value>
</member><member name="P:OnTrack.ObjectMessage.Username">
	<summary>
 Gets or sets the username.
 </summary>
	<value>The username.</value>
</member><member name="P:OnTrack.ObjectMessage.LoggableKeyValues">
	<summary>
 Gets or sets the primary key values of the loggable sender object .
 </summary>
	<value>The objpkvalues.</value>
</member><member name="P:OnTrack.ObjectMessage.Entryname">
	<summary>
 Gets or sets the entryname.
 </summary>
	<value>The entryname.</value>
</member><member name="P:OnTrack.ObjectMessage.Objectname">
	<summary>
 Gets or sets the objectname.
 </summary>
	<value>The objectname.</value>
</member><member name="P:OnTrack.ObjectMessage.IsDataObject">
	<summary>
 returns true if data object has primary keys and is alive
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectMessage.WorkspaceID">
	<summary>
 Gets or sets the workspace ID.
 </summary>
	<value>The workspace ID.</value>
</member><member name="P:OnTrack.ObjectMessage.Sessionid">
	<summary>
 Gets or sets the sessionid.
 </summary>
	<value>The sessionid.</value>
</member><member name="P:OnTrack.ObjectMessage.SessionMessageNo">
	<summary>
 Gets or sets the sessionmsgno.
 </summary>
	<value>The sessionmsgno.</value>
</member><member name="P:OnTrack.ObjectMessage.Weight">
	<summary>
 Gets or sets the weight.
 </summary>
	<value>The weight.</value>
</member><member name="P:OnTrack.ObjectMessage.Area">
	<summary>
 Gets or sets the area.
 </summary>
	<value>The area.</value>
</member><member name="P:OnTrack.ObjectMessage.Parameters">
	<summary>
 Gets or sets the parameters.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.ObjectMessage.Tag">
	<summary>
 gets or sets the tag of the log message
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectMessage.No">
	<summary>
 gets the index number
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectMessage.MessageTypeID">
	<summary>
 gets or sets the message type uid
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectMessage.Message">
	<summary>
 sets or gets the messagetext
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectMessage.MessageType">
	<summary>
 gets the Message type object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectMessage.HighestStatusItems(System.String,System.String)">
	<summary>
 returns the highest Status Item
 </summary>
	<param name="domainid"></param>
	<param name="statustype"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectMessage.StatusItems(System.String,System.String)">
	<summary>
 returns the status items associated with this message
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectMessage.ContextIdentifier">
	<summary>
 gets or sets the context identifier
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectMessage.TupleIdentifier">
	<summary>
 sets or gets the data tupple identifier
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectMessage.EntityIdentifier">
	<summary>
 gets or sets the entitity identifier
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectMessage.Retrieve(System.String,System.Int64)">
	<summary>
 loads and infuses a message log member
 </summary>
	<param name="msglogtag"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectMessage.ObjectMessage_OnDefaultValuesNeeded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handles the default value needed event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectMessage.ObjectMessage_OnInfused(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Infused Handler to set some stuff
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectMessage.ObjectMessage_OnRelationRetrieveNeeded(System.Object,OnTrack.Database.ormDataObjectRelationEventArgs)">
	<summary>
 On deleted Handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectMessage">
	<summary>
 Message Entries of a Object Log 
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.GetQuery(System.String)">
	<summary>
 Returns a Query Enumeration
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.AllDataObject``1(System.String,System.String,System.String,System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter},System.Boolean)">
	<summary>
 Static Function ALL returns a Collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormQueryEnumerator">
	<summary>
 Enumerator for QueryEnumeration
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormQueriedEnumeration._steps">
	<summary>
  Parameters
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormQueriedEnumeration.#ctor(System.Type,System.String,System.String,System.String,System.String,System.String[],System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter},System.Nullable{System.Boolean})">
	<summary>
 constructors
 </summary>
	<remarks>
 set domainid if bound to a domain otherwise currentdomain
 </remarks>
</member><member name="P:OnTrack.Database.ormQueriedEnumeration.QryElapsedMilliseconds">
	<summary>
 returns the elapsed timespan in milliseconds for the query to fetch all records
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormQueriedEnumeration.Qrycount">
	<summary>
 Gets the qrycount.
 </summary>
	<value>The qrycount.</value>
</member><member name="P:OnTrack.Database.ormQueriedEnumeration.QryEnd">
	<summary>
 Gets the qry end.
 </summary>
	<value>The qry end.</value>
</member><member name="P:OnTrack.Database.ormQueriedEnumeration.QryStart">
	<summary>
 Gets the qry start.
 </summary>
	<value>The qry start.</value>
</member><member name="P:OnTrack.Database.ormQueriedEnumeration.AreObjectsEnumerated">
	<summary>
 Gets or sets the is object enumerated.
 </summary>
	<value>The is object enumerated.</value>
</member><member name="P:OnTrack.Database.ormQueriedEnumeration.Count">
	<summary>
 returns the size of the records list
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormQueriedEnumeration.Steps">
	<summary>
 Gets or sets the steps.
 </summary>
	<value>The steps.</value>
</member><member name="P:OnTrack.Database.ormQueriedEnumeration.Deleted">
	<summary>
 Gets or sets the deleted.
 </summary>
	<value>The deleted.</value>
</member><member name="P:OnTrack.Database.ormQueriedEnumeration.Parameters">
	<summary>
 Gets or sets the parameters.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.Database.ormQueriedEnumeration.Tablenames">
	<summary>
 Gets or sets the parameters.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.Database.ormQueriedEnumeration.Orderby">
	<summary>
 Gets or sets the orderby.
 </summary>
	<value>The orderby.</value>
</member><member name="P:OnTrack.Database.ormQueriedEnumeration.Where">
	<summary>
 Gets or sets the where.
 </summary>
	<value>The where.</value>
</member><member name="P:OnTrack.Database.ormQueriedEnumeration.Domainid">
	<summary>
 Gets or sets the static domainid in this query.
 </summary>
	<value>The domainid.</value>
</member><member name="P:OnTrack.Database.ormQueriedEnumeration.Id">
	<summary>
 Gets the id.
 </summary>
	<value>The id.</value>
</member><member name="P:OnTrack.Database.ormQueriedEnumeration.HasRun">
	<summary>
 true if the query was run
 </summary>
	<value></value>
</member><member name="P:OnTrack.Database.ormQueriedEnumeration.RunTimestamp">
	<summary>
 Gets the run timestamp.
 </summary>
	<value>The run timestamp.</value>
</member><member name="M:OnTrack.Database.ormQueriedEnumeration.CheckTablenames(System.Collections.Generic.IEnumerable{System.String})">
	<summary>
 check the tablenames
 </summary>
	<param name="tablenames"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormQueriedEnumeration.SetObjectType(System.Type)">
	<summary>
 set the Object Type
 </summary>
	<param name="type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormQueriedEnumeration.GetObjectClassDescription">
	<summary>
 returns the primary ClassDescription
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormQueriedEnumeration.GetObjectDefinition">
	<summary>
 returns the primary Object Definition
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormQueriedEnumeration.GetObjectEntries">
	<summary>
 returns a list of iobject entries returned by this Queried Enumeration
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormQueriedEnumeration.GetObjectEntry(System.String)">
	<summary>
 returns a list of iobject entries returned by this Queried Enumeration
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormQueriedEnumeration.SetValue(System.String,System.Object)">
	<summary>
 sets the value of parameter
 </summary>
	<param name="name"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormQueriedEnumeration.GetValue(System.String,System.Object@)">
	<summary>
 sets the value of parameter
 </summary>
	<param name="name"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormQueriedEnumeration.Reset">
	<summary>
 resets the result but not the query itself
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormQueriedEnumeration.GetObject(System.UInt64)">
	<summary>
 returns an infused object out of the zero-based number or results
 </summary>
	<param name="no"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormQueriedEnumeration.AddObject(OnTrack.Database.iormPersistable,System.Nullable{System.UInt64}@)">
	<summary>
 adds object out of the zero-based number or results
 </summary>
	<param name="no"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormQueriedEnumeration.DeleteObject(System.UInt64)">
	<summary>
 adds object out of the zero-based number or results
 </summary>
	<param name="no"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormQueriedEnumeration.GetRecord(System.UInt64)">
	<summary>
 returns the zero-based number of records
 </summary>
	<param name="no"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormQueriedEnumeration.Run(System.String)">
	<summary>
 run the query
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormQueriedEnumeration.GetEnumerator">
	<summary>
 returns a Enumerator over the QueriedEnumeration
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormQueriedEnumeration">
	<summary>
 a queried enumeration object runs a query and build a enumeration of iormpersistable objects
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.DatabaseDriver">
	<summary>
 Gets or sets the database driver.
 </summary>
	<value>The database driver.</value>
</member><member name="P:OnTrack.Database.ormSqlCommand.BuildVersion">
	<summary>
 returns the build version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.Parameters">
	<summary>
 returns a copy of the parameters list
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.NativeCommand">
	<summary>
 set the Native Command
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.SqlText">
	<summary>
 returns the build SQL Statement
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.TableIDs">
	<summary>
 returns a copy of the table list
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.Type">
	<summary>
 Type of the Sql Command -&gt; Select, Delete etc.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.BuildTextRequired">
	<summary>
 True if the SQL Statement has to be build, false if it has been build
 </summary>
	<value>True</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommand.Prepared">
	<summary>
 True if the Native sql command is prepared
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlCommand.AddParameter(OnTrack.Database.ormSqlCommandParameter)">
	<summary>
 add a Parameter for the command
 </summary>
	<param name="parameter">a new Parameter</param>
	<returns>true if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlCommand.AddTable(System.String)">
	<summary>
 Add Table 
 </summary>
	<param name="tableid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlCommand.HasParameter(System.String)">
	<summary>
 returns True if the Command has the parameter
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlCommand.BuildSqlText">
	<summary>
 builds the SQL text for the Command
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlCommand.Prepare">
	<summary>
 prepares the command
 </summary>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlCommand.IncBuildVersion">
	<summary>
 increase the buildVersion
 </summary>
	<returns>the new build version</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormSqlCommand">
	<summary>
 an neutral SQL Command
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.NotColumn">
	<summary>
 Gets or sets the not column.
 </summary>
	<value>The not column.</value>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.Value">
	<summary>
 Gets or sets the value.
 </summary>
	<value>The value.</value>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.Datatype">
	<summary>
 Gets or sets the datatype.
 </summary>
	<value>The datatype.</value>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.Fieldname">
	<summary>
 Gets or sets the fieldname.
 </summary>
	<value>The fieldname.</value>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.Tablename">
	<summary>
 Gets or sets the fieldname.
 </summary>
	<value>The fieldname.</value>
</member><member name="P:OnTrack.Database.ormSqlCommandParameter.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The name.</value>
</member><member name="T:OnTrack.Database.ormSqlCommandParameter">
	<summary>
 Parameter definition for a SQL Command
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.ormResultField.Name">
	<summary>
 Gets or sets the name.
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.ormResultField.Type">
	<summary>
 Gets or sets the name.
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.ormResultField.Tablestore">
	<summary>
 Gets or sets the Tablestore used
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.ormResultField.Tablename">
	<summary>
 Gets or sets the Tablestore / Tablename.
 </summary>
	<value>The name.</value>
</member><member name="M:OnTrack.Database.ormSqlSelectCommand.ormResultField.GetHashCode(System.Object)">
	<summary>
 Returns a hash code for the specified object.
 </summary>
	<param name="obj">The <see cref="T:System.Object"/> for which a hash code is
 to be returned.</param>
	<exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/>
 is a reference type and <paramref name="obj"/> is null. </exception>
	<returns>A hash code for the specified object.</returns>
</member><member name="T:OnTrack.Database.ormSqlSelectCommand.ormResultField">
	<summary>
 Class for Storing the select result fields per Table(store)
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlSelectCommand.#ctor(System.String)">
	<summary>
 Constructor of the OTDB Select command
 </summary>
	<param name="ID">the unique ID to store it</param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.AllFieldsAdded">
	<summary>
 Gets the completefor object.
 </summary>
	<value>The completefor object.</value>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.InnerJoin">
	<summary>
 sets or gets the innerjoin 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.select">
	<summary>
  sets the select part of an Sql Select without SELECT Keyword
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.OrderBy">
	<summary>
 set or gets the orderby string
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSqlSelectCommand.Where">
	<summary>
 sets or gets the wherestr
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlSelectCommand.AddTable(System.String,System.Boolean,System.Collections.Generic.List{System.String})">
	<summary>
 Add Table with fields to the Resultfields
 </summary>
	<param name="tableid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSqlSelectCommand.BuildSqlText">
	<summary>
 builds the SQL text for the Command
 </summary>
	<returns>True if successfull </returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormSqlSelectCommand">
	<summary>
  a flexible Select Command
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDatabaseDriver.Session">
	<summary>
 Gets the session.
 </summary>
	<value>The session.</value>
</member><member name="P:OnTrack.Database.ormDatabaseDriver.DatabaseType">
	<summary>
 returns the OTDBServertype
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDatabaseDriver.ID">
	<summary>
 Gets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormDatabaseDriver.TableSchemaDirectory">
	<summary>
 Gets or sets the table schema directory.
 </summary>
	<value>The table schema directory.</value>
</member><member name="P:OnTrack.Database.ormDatabaseDriver.TableDirectory">
	<summary>
 Gets or sets the table directory.
 </summary>
	<value>The table directory.</value>
</member><member name="P:OnTrack.Database.ormDatabaseDriver.CurrentConnection">
	<summary>
 Gets or sets the connection.
 </summary>
	<value>The connection.</value>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.#ctor(System.String,OnTrack.Session@)">
	<summary>
 constructor
 </summary>
	<param name="session"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.HasSqlCommand(System.String)">
	<summary>
 checks if SqlCommand is in Store of the driver
 </summary>
	<param name="id">id of the command</param>
	<remarks></remarks>
	<returns>True if successful</returns>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.StoreSqlCommand(OnTrack.Database.iormSqlCommand@)">
	<summary>
 Store the Command by its ID - replace if existing
 </summary>
	<param name="sqlCommand">a iOTDBSqlCommand</param>
	<remarks></remarks>
	<returns>true if successful</returns>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.RetrieveSqlCommand(System.String)">
	<summary>
 Retrieve the Command from Store
 </summary>
	<param name="id">id of the command</param>
	<remarks></remarks>
	<returns>a iOTDBSqlCommand</returns>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.CreateSqlCommand(System.String)">
	<summary>
 Creates a Command and store it or gets the current Command
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.CreateSqlSelectCommand(System.String)">
	<summary>
 Creates a Command and store it or gets the current Command
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.RegisterConnection(OnTrack.Database.iormConnection@)">
	<summary>
 Register a connection at the Driver to be used
 </summary>
	<param name="connection">a iOTDBConnection</param>
	<returns>true if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.OnDisconnect">
	<summary>
 Handles the onDisconnect Event of the Driver
 </summary>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.CreateGlobalDomain(System.Object@)">
	<summary>
 Creates the global domain.
 </summary>
	<param name="nativeConnection">The native connection.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.VerifyOnTrackDatabase(System.String[],System.Boolean,System.Boolean)">
	<summary>
 verifyOnTrack
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.AssignNativeDBParameter(System.String,OnTrack.Database.otDataType,System.Int64,System.Object)">
	<summary>
 create an assigned Native DBParameter to provided name and type
 </summary>
	<param name="parametername"></param>
	<param name="datatype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.GetTargetTypeFor(OnTrack.Database.otDataType)">
	<summary>
 returns the target type for a OTDB FieldType - MAPPING
 </summary>
	<param name="type"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.RunSqlCommand(OnTrack.Database.ormSqlCommand@,System.Collections.Generic.Dictionary{System.String,System.Object}@,System.Object)">
	<summary>
 Runs the SQL select command.
 </summary>
	<param name="sqlcommand">The sqlcommand.</param>
	<param name="parametervalues">The parametervalues.</param>
	<param name="nativeConnection">The native connection.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.Convert2ObjectData(System.Object,System.Object@,System.Int64,System.Nullable{System.Boolean},System.Object,System.Boolean@)">
	<summary>
 Convert2s the object data.
 </summary>
	<param name="invalue">The invalue.</param>
	<param name="outvalue">The outvalue.</param>
	<param name="sourceType">Type of the source.</param>
	<param name="isnullable">The isnullable.</param>
	<param name="defaultvalue">The defaultvalue.</param>
	<param name="abostrophNecessary">The abostroph necessary.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.HasTable(System.String,OnTrack.Database.iormConnection@,System.Object)">
	<summary>
 returns True if data store has the table
 </summary>
	<param name="tablename"></param>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.HasView(System.String,OnTrack.Database.iormConnection@,System.Object)">
	<summary>
 returns true if the datastore has the view by viewname
 </summary>
	<param name="name"></param>
	<param name="connection"></param>
	<param name="nativeConnection"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.GetView(System.String,System.String,System.Boolean,OnTrack.Database.iormConnection@)">
	<summary>
 returns or creates a Table in the data store
 </summary>
	<param name="name"></param>
	<param name="sqlselect"></param>
	<param name="createOrAlter"></param>
	<param name="connection"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.HasColumn(System.String,System.String,OnTrack.Database.iormConnection@)">
	<summary>
 returns True if the column exists in the table 
 </summary>
	<param name="tablename"></param>
	<param name="columnname"></param>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.CreateNativeTableStore(System.String,System.Boolean)">
	<summary>
 create a tablestore 
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.CreateNativeTableSchema(System.String)">
	<summary>
 create a tableschema
 </summary>
	<param name="TableID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.GetTableStore(System.String,System.Boolean)">
	<summary>
 Gets the table store.
 </summary>
	<param name="tableID">The tablename.</param>
	<param name="Force">The force.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.RunSqlStatement(System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@,System.Boolean,System.Object)">
	<summary>
 Runs the SQL Command
 </summary>
	<param name="sqlcmdstr"></param>
	<param name="parameters"></param>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDatabaseDriver.CreateNativeDBCommand(System.String,System.Data.IDbConnection)">
	<summary>
 Create a Native IDBCommand (Sql Command)
 </summary>
	<param name="cmd"></param>
	<param name="aNativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormDatabaseDriver">
	<summary>
 abstract ORM Driver class for Database Drivers
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormConnection.#ctor(System.String,OnTrack.Database.iormDatabaseDriver,OnTrack.Session@,OnTrack.Database.ComplexPropertyStore.Sequence)">
	<summary>
 constructor of Connection
 </summary>
	<param name="id"></param>
	<param name="databasedriver"></param>
	<param name="session"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormConnection.ID">
	<summary>
 Gets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormConnection.Useseek">
	<summary>
 Gets the use seek.
 </summary>
	<value>The use seek.</value>
</member><member name="P:OnTrack.Database.ormConnection.Sequence">
	<summary>
 returns the Sequence of the Database Configuration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormConnection.Session">
	<summary>
 Gets the session.
 </summary>
	<value>The session.</value>
</member><member name="P:OnTrack.Database.ormConnection.DatabaseDriver">
	<summary>
 Gets or sets the DatabaseEnvirorment.
 </summary>
	<value>iOTDBDatabaseEnvirorment</value>
</member><member name="P:OnTrack.Database.ormConnection.ErrorLog">
	<summary>
 Gets the error log.
 </summary>
	<value>The error log.</value>
</member><member name="P:OnTrack.Database.ormConnection.UILogin">
	<summary>
 Gets or sets the UI login.
 </summary>
	<value>The UI login.</value>
</member><member name="P:OnTrack.Database.ormConnection.Access">
	<summary>
 Gets or sets the access.
 </summary>
	<value>The access.</value>
</member><member name="P:OnTrack.Database.ormConnection.Dbpassword">
	<summary>
 Gets or sets the dbpassword.
 </summary>
	<value>The dbpassword.</value>
</member><member name="P:OnTrack.Database.ormConnection.Dbuser">
	<summary>
 Gets or sets the dbuser.
 </summary>
	<value>The dbuser.</value>
</member><member name="P:OnTrack.Database.ormConnection.DBName">
	<summary>
 Gets or sets the name.
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.ormConnection.PathOrAddress">
	<summary>
 Gets or sets the path.
 </summary>
	<value>The path.</value>
</member><member name="P:OnTrack.Database.ormConnection.Connectionstring">
	<summary>
 Gets or sets the connectionstring.
 </summary>
	<value>The connectionstring.</value>
</member><member name="P:OnTrack.Database.ormConnection.Databasetype">
	<summary>
 Gets or sets the databasetype.
 </summary>
	<value>The databasetype.</value>
</member><member name="M:OnTrack.Database.ormConnection.OnConfigPropertyChanged(System.Object,OnTrack.Database.ComplexPropertyStore.EventArgs)">
	<summary>
 Event Handler for the Configuration Property Changed Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormConnectionEventArgs.DomainID">
	<summary>
 Gets or sets the domain.
 </summary>
	<value>The domain.</value>
</member><member name="P:OnTrack.Database.ormConnectionEventArgs.Connection">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="T:OnTrack.Database.ormConnectionEventArgs">
	<summary>
 defines the Connection Event Arguments
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormTableStore.ConstTPNCacheProperty">
	<summary>
 Table Property Name "Cache Property"
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormTableStore.ConstTPNCacheUpdateInstant">
	<summary>
 Table Property Name "Cache Update Instant"
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormTableStore.ConstTPNFullCaching">
	<summary>
 Table Property Name for FULL CACHING
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.#ctor(OnTrack.Database.iormConnection,System.String,System.Boolean)">
	<summary>
 constuctor
 </summary>
	<param name="connection"></param>
	<param name="tableID"></param>
	<param name="force"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.CreateUniquePkValue(System.Object[]@,System.String)">
	<summary>
 creates an unique key value. provide primary key array in the form {field1, field2, nothing}. "Nothing" will be increased.
 </summary>
	<param name="pkArray"></param>
	<remarks></remarks>
	<returns>True if successfull new value</returns>
</member><member name="M:OnTrack.Database.ormTableStore.Refresh(System.Boolean)">
	<summary>
 Refresh
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableStore.TableID">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="P:OnTrack.Database.ormTableStore.Connection">
	<summary>
 Gets or sets the connection.
 </summary>
	<value>The connection.</value>
</member><member name="P:OnTrack.Database.ormTableStore.TableSchema">
	<summary>
 Gets or sets the DB table schema.
 </summary>
	<value>The DB table schema.</value>
</member><member name="M:OnTrack.Database.ormTableStore.GetProperty(System.String)">
	<summary>
 Gets the Property of a Tablestore
 </summary>
	<param name="name">name of property</param>
	<returns>object of the property</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.HasProperty(System.String)">
	<summary>
 has Tablestore the named property
 </summary>
	<param name="name">name of property</param>
	<returns>return true</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.GetRecordsBySql(System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@)">
	<summary>
 Gets the records by SQL.
 </summary>
	<param name="wherestr">The wherestr.</param>
	<param name="fullsqlstr">The fullsqlstr.</param>
	<param name="innerjoin">The innerjoin.</param>
	<param name="orderby">The orderby.</param>
	<param name="silent">The silent.</param>
	<returns></returns>
</member><member name="P:OnTrack.Database.ormTableStore.IsLinqAvailable">
	<summary>
 Is Linq in this TableStore available
 </summary>
	<value>True if available</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.GetRecordsbySQlCommand(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@)">
	<summary>
 gets a List of ormRecords by SQLCommand
 </summary>
	<param name="id">ID of the Command to store</param>
	<param name="wherestr"></param>
	<param name="fullsqlstr"></param>
	<param name="innerjoin"></param>
	<param name="orderby"></param>
	<param name="silent"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.RunSQLStatement(System.String,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@,System.Boolean)">
	<summary>
 Runs the SQL command.
 </summary>
	<param name="sqlcmdstr">The SQLCMDSTR.</param>
	<param name="silent">The silent.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormTableStore.Convert2ColumnData(System.Object,System.Object@,System.Int64,System.Int64,System.Boolean@,System.String,System.Nullable{System.Boolean},System.Object)">
	<summary>
 converts an object value to column data
 </summary>
	<param name="invalue"></param>
	<param name="outvalue"></param>
	<param name="targetType"></param>
	<param name="maxsize"></param>
	<param name="abostrophNecessary"></param>
	<param name="fieldname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.HasSqlCommand(System.String)">
	<summary>
 checks if SqlCommand is in Store of the driver
 </summary>
	<param name="id">id of the command</param>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.StoreSqlCommand(OnTrack.Database.iormSqlCommand@)">
	<summary>
 Store the Command by its ID - replace if existing
 </summary>
	<param name="sqlCommand">a iOTDBSqlCommand</param>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.RetrieveSqlCommand(System.String)">
	<summary>
 Retrieve the Command from Store
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.CreateSqlCommand(System.String)">
	<summary>
 Creates a Command and store it or gets the current Command
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.CreateSqlSelectCommand(System.String,System.Boolean,System.Boolean)">
	<summary>
 Creates a Command and store it or gets the current Command
 </summary>
	<param name="id">id of the command</param>
	<returns>a iOTDBSqlCommand</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableStore.GetSqlCommandID(System.String)">
	<summary>
 returns a ID for this Tablestore. Add the name of the table in front of the ID
 </summary>
	<param name="id">SqlcommandID</param>
	<returns>the id</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormTableStore">
	<summary>
 TopLevel OTDB Tablestore implementation base class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableSchema.IsInitialized">
	<summary>
 Gets or sets the is initialized. Should be True if the tableschema has a tableid 
 </summary>
	<value>The is initialized.</value>
</member><member name="M:OnTrack.Database.ormTableSchema.Reset">
	<summary>
 resets the TableSchema to hold nothing
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableSchema.Indices">
	<summary>
 Names of the Indices of the table
 </summary>
	<value>List(of String)</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.GetDomainIDPKOrdinal">
	<summary>
 returns the primary Key ordinal (1..n) for the domain ID or less zero if not in primary key
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.GetNullable(System.Object)">
	<summary>
 Gets the nullable property.
 </summary>
	<param name="index">The index.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormTableSchema.GetDefaultValue(System.Object)">
	<summary>
 returns the default Value
 </summary>
	<param name="index"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.HasDefaultValue(System.Object)">
	<summary>
 returns if there is a default Value
 </summary>
	<param name="index"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.GetIndex(System.String)">
	<summary>
  returns the ArrayList of Fieldnames for the Index or empty array list if not found
 </summary>
	<param name="indexname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.HasIndex(System.String)">
	<summary>
 returns true if index by Name exists
 </summary>
	<param name="indexname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableSchema.PrimaryKeyIndexName">
	<summary>
 gets the primarykey name
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableSchema.NoFields">
	<summary>
 gets the number of fields
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableSchema.Fieldnames">
	<summary>
 List of Fieldnames
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormTableSchema.Primarykeys">
	<summary>
 List of primary key field names
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.GetFieldname(System.Int32)">
	<summary>
 get the fieldname by index i - nothing if not in range
 </summary>
	<param name="i"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.HasFieldname(System.String)">
	<summary>
 check if fieldname exists
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.GetordinalOfPrimaryKeyField(System.UInt16)">
	<summary>
 gets the field ordinal of the primary Key field by number i. (e.g.returns the ordinal of the primarykey field #2)
 </summary>
	<param name="i">number of primary key field 1..n </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormTableSchema.NoPrimaryKeyFields">
	<summary>
 get the number of primary key fields
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractPropertyFunction`1.#ctor(`0)">
	<summary>
 Constructor
 </summary>
	<param name="property"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractPropertyFunction`1.#ctor(`0,System.Object[])">
	<summary>
 Constructor with arguments
 </summary>
	<param name="property"></param>
	<param name="arguments"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractPropertyFunction`1.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="propertystring"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractPropertyFunction`1.Enum">
	<summary>
 set the enumeration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractPropertyFunction`1.Arguments">
	<summary>
 set or gets the arguments
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractPropertyFunction`1.ToString">
	<summary>
 String representation of this Property
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractPropertyFunction`1.ToEnum(System.String)">
	<summary>
 retuns the enumeration of a string presentation
 </summary>
	<param name="property"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractPropertyFunction`1.Validate``1(System.String)">
	<summary>
 validates the property string against the enumeration T
 </summary>
	<param name="property"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractPropertyFunction`1.ToString(`0)">
	<summary>
 returns the string presentation of the enum 
 </summary>
	<param name="enumconstant"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.AbstractPropertyFunction`1">
	<summary>
 PropertyFunction base Property Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectPermissionRuleProperty.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="propertystring"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectPermissionRuleProperty.ExitOnTrue">
	<summary>
 returns True if ExitOnTrue Flag is set
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectPermissionRuleProperty.ExitOnFalse">
	<summary>
 returns True if ExitOnTrue Flag is set
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectPermissionRuleProperty.Validate">
	<summary>
 validates the property
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectPermissionRuleProperty.Validate(OnTrack.Database.ObjectPermissionRuleProperty)">
	<summary>
 validates the property
 </summary>
	<param name="property"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectPermissionRuleProperty.ToEnum">
	<summary>
 returns the enumeration value
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ObjectPermissionRuleProperty">
	<summary>
 ObjectPermission Rule Property
 
 </summary>
	<remarks> 
 Validation Rules like 
 1) OTDBACCESS( DBACCESSRIGHT, FALSE|TRUE, FALSE|TRUE) which checks if the user has the DB Access right, then return ARG2 
 and end the permission checking if third argument is true
 2) GROUP( [GROUPNAME] FALSE|TRUE, FALSE|TRUE) which checks if the user is in the group by name, then return ARG2 
 and end the permission checking if third argument is true
 3) USER ( [USERNAME], FALSE|TRUE, FALSE|TRUE) which checks if the user is the username, then return ARG2 
 and end the permission checking if third argument is true
 </remarks>
</member><member name="T:OnTrack.Database.otObjectPermissionRuleProperty">
	<summary>
 Enumeration of the validation properties
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ForeignKeyProperty.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="propertystring"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ForeignKeyProperty.ActionProperty">
	<summary>
 returns the ForeignKey Action Property
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ForeignKeyProperty.Action">
	<summary>
 returns the Foreign Key Action enumeration
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ForeignKeyProperty.Validate">
	<summary>
 validates the property
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ForeignKeyProperty.Validate(OnTrack.Database.ForeignKeyProperty)">
	<summary>
 validates the property
 </summary>
	<param name="property"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ForeignKeyProperty.ToEnum">
	<summary>
 returns the enumeration value
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ForeignKeyProperty">
	<summary>
 ForeignKey Property
 
 </summary>
	<remarks> 
 Validation Rules like 
 1) ONDELETE( CASCADE | RESTRICT | DEFAULT | NULL | NOOP ) which checks if the user has the DB Access right, then return ARG2 
 and end the permission checking if third argument is true
 2) ONUPDATE (CASCADE | RESTRICT | DEFAULT | NULL | NOOP ) which checks if the user is in the group by name, then return ARG2 
 and end the permission checking if third argument is true
 </remarks>
</member><member name="T:OnTrack.Database.otForeignKeyProperty">
	<summary>
 Enumeration of the validation properties
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ForeignKeyActionProperty.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="propertystring"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ForeignKeyActionProperty.Validate(System.String)">
	<summary>
 Validate the string before a Property is created
 </summary>
	<param name="propertystring"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ForeignKeyActionProperty.ToEnum">
	<summary>
 returns the enumeration value
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ForeignKeyActionProperty">
	<summary>
 ObjectPermission Rule Property
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otForeignKeyAction">
	<summary>
 Enumeration for Access Rights to the database
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectEntryProperty.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="propertystring"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectEntryProperty.Apply(System.String[],System.String[]@)">
	<summary>
 Apply the Property function to a value
 </summary>
	<param name="in"></param>
	<param name="out"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectEntryProperty.Apply(System.Object,System.Object@)">
	<summary>
 Apply the Property function to a value
 </summary>
	<param name="in"></param>
	<param name="out"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectEntryProperty.ToEnum">
	<summary>
 returns the enumeration value
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ObjectEntryProperty">
	<summary>
 ObjectEntry (Field) Property Class
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otObjectEntryProperty">
	<summary>
 Enumeration of the validation properties
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.LookupProperty.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="propertystring"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.LookupProperty.Validate">
	<summary>
 validates the property
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.LookupProperty.Validate(OnTrack.Database.LookupProperty)">
	<summary>
 validates the property
 </summary>
	<param name="property"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.LookupProperty.ToEnum">
	<summary>
 returns the enumeration value
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.LookupProperty">
	<summary>
 ObjectEntry Validation Property Class
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otLookupProperty">
	<summary>
 Enumeration of the validation properties
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.RenderProperty.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="propertystring"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.RenderProperty.ToEnum">
	<summary>
 returns the enumeration value
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.RenderProperty">
	<summary>
 Render Property Class
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otRenderProperty">
	<summary>
 Enumeration of the validation properties
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AccessRightProperty.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="propertystring"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AccessRightProperty.ToEnum">
	<summary>
 returns the enumeration value
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AccessRightProperty.CoverRights(OnTrack.Database.AccessRightProperty,OnTrack.Database.AccessRightProperty)">
	<summary>
 shared version of coverrights of who to cover
 </summary>
	<param name="who"></param>
	<param name="covers"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AccessRightProperty.CoverRights(OnTrack.Database.AccessRightProperty)">
	<summary>
 returns true if the accessrightproperty (as request) is covered by this access right
 </summary>
	<param name="accessrightpropery"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AccessRightProperty.CoverRights(OnTrack.Database.otAccessRight,OnTrack.Database.otAccessRight)">
	<summary>
 cover rights and what to cover
 </summary>
	<param name="rights"></param>
	<param name="covers"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.AccessRightProperty">
	<summary>
 ObjectPermission Rule Property
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otAccessRight">
	<summary>
 Enumeration for Access Rights to the database
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.ormModelTable.EventArgs.Msglog">
	<summary>
 Gets or sets the msglog.
 </summary>
	<value>The msglog.</value>
</member><member name="P:OnTrack.UI.ormModelTable.EventArgs.Message">
	<summary>
 Gets the message.
 </summary>
	<value>The message.</value>
</member><member name="P:OnTrack.UI.ormModelTable.EventArgs.Exception">
	<summary>
 Gets the exception.
 </summary>
	<value>The exception.</value>
</member><member name="P:OnTrack.UI.ormModelTable.EventArgs.Object">
	<summary>
 Gets the object.
 </summary>
	<value>The object.</value>
</member><member name="P:OnTrack.UI.ormModelTable.EventArgs.Row">
	<summary>
 Gets or sets the row.
 </summary>
	<value>The row.</value>
</member><member name="T:OnTrack.UI.ormModelTable.EventArgs">
	<summary>
  Event Args
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.UI.ormModelTable._id">
	<summary>
  internal variables
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.UI.ormModelTable.constQRYRowReference">
	<summary>
 public constants
 </summary>
	<remarks></remarks>
</member><member name="E:OnTrack.UI.ormModelTable.ObjectPersistFailed">
	<summary>
 public events
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.ormModelTable.#ctor(OnTrack.Database.iormQueriedEnumeration)">
	<summary>
 constructor
 </summary>
	<param name="queriedenumeration"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.ormModelTable.trackMessageLog">
	<summary>
 sets an interim Messagelog to track 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.ormModelTable.Id">
	<summary>
 Gets the id.
 </summary>
	<value>The id.</value>
</member><member name="P:OnTrack.UI.ormModelTable.ObjectID">
	<summary>
 gets the object id of the qry enumeration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.ormModelTable.IsLoaded">
	<summary>
 Gets or sets the is loaded.
 </summary>
	<value>The is loaded.</value>
</member><member name="P:OnTrack.UI.ormModelTable.IsLoading">
	<summary>
 Gets or sets the isLoading Flag
 </summary>
	<value>The is loaded.</value>
</member><member name="P:OnTrack.UI.ormModelTable.IsInitialized">
	<summary>
 Gets or sets the is initialized.
 </summary>
	<value>The is initialized.</value>
</member><member name="M:OnTrack.UI.ormModelTable.GetObjectEntries">
	<summary>
 returns the ObjectEntries handled in this ormModelTable
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.ormModelTable.Initialize">
	<summary>
 Initialize the Table with the columns from the query
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.ormModelTable.GetObjectEntry(System.String)">
	<summary>
 returns the ObjectEntry Definition of a column
 </summary>
	<param name="columnname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.ormModelTable.Load(System.Boolean)">
	<summary>
 loads data from the QryEnumeration in the table
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.ormModelTable.OnDeleting(System.Object,System.Data.DataRowChangeEventArgs)">
	<summary>
 Event handler for the Delete Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.ormModelTable.OnRowChanged(System.Object,System.Data.DataRowChangeEventArgs)">
	<summary>
 Event handler for the RowChanged Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.ormModelTable.OnColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Event handler for the ColumnChanged Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.ormModelTable.OnObjectMessageAdded(System.Object,OnTrack.ObjectMessageLog.EventArgs)">
	<summary>
 Event Handler for ObjectMessageLogs propagate
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.ormModelTable.UpdateObject(System.Data.DataRow)">
	<summary>
 update an object from a row
 </summary>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.UI.ormModelTable.AddNewObject(System.Data.DataRow)">
	<summary>
 Add a new Object out of the row
 </summary>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.UI.ormModelTable">
	<summary>
 a model class for multiple data rows from different sources for User Interfaces
 </summary>
	<remarks></remarks>
</member><member name="P:UIWinFormLogin.UsernameEnabled">
	<summary>
 Gets or sets the username enabled.
 </summary>
	<value>The username enabled.</value>
</member><member name="P:UIWinFormLogin.Domain">
	<summary>
 Gets or sets the message.
 </summary>
	<value>The message.</value>
</member><member name="P:UIWinFormLogin.DomainList">
	<summary>
 Gets or sets the domain list.
 </summary>
	<value>The domain list.</value>
</member><member name="P:UIWinFormLogin.DomainChangeEnables">
	<summary>
 Gets or sets the domain change enables.
 </summary>
	<value>The domain change enables.</value>
</member><member name="P:UIWinFormLogin.Message">
	<summary>
 Gets or sets the message.
 </summary>
	<value>The message.</value>
</member><member name="M:UIWinFormLogin.CloseOTDBForm">
	<summary>
 Close the Form
 </summary>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:UIWinFormLogin.RefreshOTDBForm">
	<summary>
 Refresh the Form
 </summary>
	<remarks></remarks>
	<returns></returns>
</member><member name="P:UIWinFormLogin.ConfigSet">
	<summary>
 Gets or sets the config set.
 </summary>
	<value>The config set.</value>
</member><member name="P:UIWinFormLogin.ConfigSetList">
	<summary>
 Gets or sets the config set list.
 </summary>
	<value>The config set list.</value>
</member><member name="P:UIWinFormLogin.ConfigSetEnabled">
	<summary>
 Gets or sets the config set enabled.
 </summary>
	<value>The config set enabled.</value>
</member><member name="P:UIWinFormLogin.Username">
	<summary>
 Gets or sets the username.
 </summary>
	<value>The username.</value>
</member><member name="P:UIWinFormLogin.Password">
	<summary>
 Gets or sets the password.
 </summary>
	<value>The password.</value>
</member><member name="P:UIWinFormLogin.RightsList">
	<summary>
 Gets or sets the rights list.
 </summary>
	<value>The rights list.</value>
</member><member name="P:UIWinFormLogin.StatusText">
	<summary>
 Gets or sets the status text.
 </summary>
	<value>The status text.</value>
</member><member name="M:OnTrack.Database.ObjectValidationProperty.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="propertystring"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectValidationProperty.ToEnum">
	<summary>
 returns the enumeration value
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ObjectValidationProperty">
	<summary>
 ObjectEntry Validation Property Class
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otObjectValidationProperty">
	<summary>
 Enumeration of the validation properties
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.otValidationResultType">
	<summary>
 type of validation results
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.RaiseOnEntryValidatingEvent(System.String,OnTrack.ObjectMessageLog)">
	<summary>
 Raise the Validating Event for this object
 </summary>
	<param name="msglog"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.RaiseOnEntryValidatedEvent(System.String,OnTrack.ObjectMessageLog)">
	<summary>
 Raise the Validated Event for this object
 </summary>
	<param name="msglog"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.RaiseOnValidatingEvent(OnTrack.ObjectMessageLog)">
	<summary>
 Raise the Validating Event for this object
 </summary>
	<param name="msglog"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.RaiseOnValidatedEvent(OnTrack.ObjectMessageLog)">
	<summary>
 Raise the Validated Event for this object
 </summary>
	<param name="msglog"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Validate(OnTrack.ObjectMessageLog)">
	<summary>
 validates the Business Object as total
 </summary>
	<remarks></remarks>
	<returns>True if validated and OK</returns>
</member><member name="M:OnTrack.Database.ormDataObject.ValidateCompoundValue(System.String,System.Object,OnTrack.ObjectMessageLog)">
	<summary>
 Validates a Compound
 </summary>
	<param name="entryname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ObjectValidator.EventArgs">
	<summary>
 Event Argument Class
 </summary>
	<remarks></remarks>
</member><member name="E:OnTrack.Database.ObjectValidator.OnValidationEntyFailed">
	<summary>
 Events
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ObjectValidator">
	<summary>
 Class for Object (Entry) Validation
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.EntryProperties.Apply(OnTrack.Database.ObjectDefinition,System.String,System.Object,System.Object@)">
	<summary>
 apply the object entry properties
 </summary>
	<param name="objectDefinition"></param>
	<param name="entryname"></param>
	<param name="in"></param>
	<param name="out"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.EntryProperties.Apply(System.String,System.String,System.Object,System.Object@)">
	<summary>
 Apply the ObjectEntryProperties to a value
 </summary>
	<param name="entryname"></param>
	<param name="in"></param>
	<param name="out"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.EntryProperties.Apply(System.Collections.Generic.IEnumerable{OnTrack.Database.ObjectEntryProperty},System.Object,System.Object@)">
	<summary>
 apply the object entry properties to an in value and retrieve a out value
 </summary>
	<param name="properties"></param>
	<param name="in"></param>
	<param name="out"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.EntryProperties">
	<summary>
 Class for Object Entry Properties
 </summary>
	<remarks></remarks>
</member><member name="P:My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:My.Resources.Resources.OnTrackLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="T:My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="T:OnTrack.Database.OrdinalType">
	<summary>
 OrdinalType identifies the data type of the ordinal
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Ordinal.Equals(OnTrack.Database.Ordinal,OnTrack.Database.Ordinal)">
	<summary>
 Equalses the specified x.
 </summary>
	<param name="x">The x.</param>
	<param name="y">The y.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.Ordinal.Compare(OnTrack.Database.Ordinal,OnTrack.Database.Ordinal)">
	<summary>
 Compares two objects and returns a value indicating whether one is less
 than, equal to, or greater than the other.
 </summary>
	<param name="x">The first object to compare.</param>
	<param name="y">The second object to compare.</param>
	<exception cref="T:System.ArgumentException">Neither <paramref name="x"/> nor
 <paramref name="y"/> implements the <see cref="T:System.IComparable"/> interface.-or-
 <paramref name="x"/> and <paramref name="y"/> are of different types and neither
 one can handle comparisons with the other. </exception>
	<returns>
 A signed integer that indicates the relative values of <paramref name="x"/>
 and <paramref name="y"/>, as shown in the following table.Value Meaning Less
 than zero <paramref name="x"/> is less than <paramref name="y"/>. Zero <paramref name="x"/>
 equals <paramref name="y"/>. Greater than zero <paramref name="x"/> is greater
 than <paramref name="y"/>.
 </returns>
</member><member name="M:OnTrack.Database.Ordinal.CompareTo(OnTrack.Database.Ordinal)">
	<summary>
 Compares to.
 </summary>
	<param name="other">The other.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.Ordinal.GetHashCode(OnTrack.Database.Ordinal)">
	<summary>
 Gets the hash code.
 </summary>
	<param name="obj">The obj.</param>
	<returns></returns>
</member><member name="P:OnTrack.Database.Ordinal.Value">
	<summary>
 Value of the ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.Ordinal.Type">
	<summary>
 Datatype of the ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Ordinal.GetTypeCode">
	<summary>
 gets the Typecode of the ordinal
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Ordinal.Equals(OnTrack.Database.Ordinal)">
	<summary>
 compares this to an ordinal
 </summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.Ordinal">
	<summary>
 ordinal class describes values as ordinal values (ordering)
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRelationCollectionEnumerator`1.CurrentE">
	<summary>
 Gets the current element in the collection.
 </summary>
	<returns>The current element in the collection.</returns>
	<value></value>
</member><member name="M:OnTrack.Database.ormRelationCollectionEnumerator`1.Dispose">
	<summary>
 Performs application-defined tasks associated with freeing, releasing,
 or resetting unmanaged resources.
 </summary>
</member><member name="T:OnTrack.Database.ormRelationCollectionEnumerator`1">
	<summary>
 Enumerator for QueryEnumeration
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormRelationalCollection`1">
	<summary>
  Interface
 </summary>
	<typeparam name="T"></typeparam>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRelationNewableCollection`1.EventArgs.Keys">
	<summary>
 Gets or sets the keys.
 </summary>
	<value>The keys.</value>
</member><member name="T:OnTrack.Database.ormRelationNewableCollection`1.EventArgs">
	<summary>
 Event Args 
 </summary>
	<remarks></remarks>
</member><member name="E:OnTrack.Database.ormRelationNewableCollection`1.RequestKeys">
	<summary>
 Events
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRelationNewableCollection`1.AddCreate(System.Object[],System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
	<summary>
 create a new item already stored in this collection
 </summary>
	<param name="keys"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormRelationNewableCollection`1">
	<summary>
 describes an RelationCollection which can add new iormpersistables by key
 </summary>
	<typeparam name="T"></typeparam>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRelationCollection`1.EventArgs.Dataobject">
	<summary>
 Gets or sets the dataobject.
 </summary>
	<value>The dataobject.</value>
</member><member name="T:OnTrack.Database.ormRelationCollection`1.EventArgs">
	<summary>
 Event Arguments
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRelationCollection`1.Size">
	<summary>
 get the size of the collection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRelationCollection`1.Keys">
	<summary>
 gets the list of keys in the collection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRelationCollection`1.KeyNames">
	<summary>
 returns the entry names for the keys in the collection
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRelationCollection`1.GetKeyValues(`0)">
	<summary>
 extract the key values of the item (keyentries)
 </summary>
	<param name="item"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRelationCollection`1.Add(`0)">
	<summary>
 add an item to the collection - notifies container
 </summary>
	<param name="item"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRelationCollection`1.IormPersistable_OnDelete(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handler for the OnDeleting Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRelationCollection`1.Clear">
	<summary>
 clear the Collection - is not a remove with handler
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRelationCollection`1.ContainsKey(System.Object[])">
	<summary>
 returns true if the key is in the collection
 </summary>
	<param name="keys"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRelationCollection`1.ContainsKey(OnTrack.Database.DataKeyTuple)">
	<summary>
 returns true if the key is in the collection
 </summary>
	<param name="keys"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRelationCollection`1.Contains(`0)">
	<summary>
 returns true if the item is in the collection. based on same keys
 </summary>
	<param name="item"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRelationCollection`1.CopyTo(`0[],System.Int32)">
	<summary>
 copy out to an array
 </summary>
	<param name="array"></param>
	<param name="arrayIndex"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRelationCollection`1.Count">
	<summary>
 count the number of items in the collection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRelationCollection`1.IsReadOnly">
	<summary>
 return true if readonly
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRelationCollection`1.Remove(`0)">
	<summary>
 remove an item from the collection - the delete handler of the container will be called 
 which might lead to an delete of the item itself
 </summary>
	<param name="item"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRelationCollection`1.Item(System.Object[])">
	<summary>
 gets an item by keys
 </summary>
	<param name="keys"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRelationCollection`1.GetEnumerator">
	<summary>
 returns an enumerator
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormRelationCollection`1">
	<summary>
 Implementation of an Relational Collection
 </summary>
	<typeparam name="T"></typeparam>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ComplexPropertyStore.EventArgs.Value">
	<summary>
 Gets the value.
 </summary>
	<value>The value.</value>
</member><member name="P:OnTrack.Database.ComplexPropertyStore.EventArgs.Weight">
	<summary>
 Gets the weight.
 </summary>
	<value>The weight.</value>
</member><member name="P:OnTrack.Database.ComplexPropertyStore.EventArgs.Setname">
	<summary>
 Gets the setname.
 </summary>
	<value>The setname.</value>
</member><member name="P:OnTrack.Database.ComplexPropertyStore.EventArgs.Propertyname">
	<summary>
 Gets the propertyname.
 </summary>
	<value>The propertyname.</value>
</member><member name="T:OnTrack.Database.ComplexPropertyStore.EventArgs">
	<summary>
 Event Arguments
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ComplexPropertyStore.Sequence">
	<summary>
  Sequenze of sets
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ComplexPropertyStore._sets">
	<summary>
 main data structure a set by name consists of different properties with weights for the values
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ComplexPropertyStore.#ctor(System.String)">
	<summary>
 constructor
 </summary>
	<param name="defaultsetname"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ComplexPropertyStore.CurrentSet">
	<summary>
 Gets or sets the currentset.
 </summary>
	<value>The currentset.</value>
</member><member name="E:OnTrack.Database.ComplexPropertyStore.OnPropertyChanged">
	<summary>
 Event OnPropertyChange
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ComplexPropertyStore.GetProperty(System.String,System.UInt16,System.String,OnTrack.Database.ComplexPropertyStore.Sequence)">
	<summary>
 Gets the Property of a config set. if setname is ommitted then check currentconfigset and the global one
 </summary>
	<param name="name">name of property</param>
	<returns>object of the property</returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ComplexPropertyStore.ConfigSetNamesToSelect">
	<summary>
 returns a list of selectable config set names without global
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ComplexPropertyStore.SetNames">
	<summary>
 returns a list of ConfigSetnames
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ComplexPropertyStore">
	<summary>
 class for a Property Store with weighted properties for multiple property sets
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataTupleMetaClass`1.#ctor(System.Type)">
	<summary>
 constructor with an ormDataObject Class Type
 </summary>
	<param name="type"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataTupleMetaClass`1.Objecttype">
	<summary>
 Gets the objecttype.
 </summary>
	<value>The objecttype.</value>
</member><member name="P:OnTrack.Database.ormDataTupleMetaClass`1.Objecttypename">
	<summary>
 Gets the objecttypename.
 </summary>
	<value>The objecttypename.</value>
</member><member name="P:OnTrack.Database.ormDataTupleMetaClass`1.NoKeys">
	<summary>
 Gets the no keys.
 </summary>
	<value>The no keys.</value>
</member><member name="T:OnTrack.Database.ormDataTupleMetaClass`1">
	<summary>
 Registery with some meta information
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.DataKeyTuple.Size">
	<summary>
 returns the size of the ObjectKey Array
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.DataKeyTuple.Values">
	<summary>
 Gets or sets the keys.
 </summary>
	<value>The keys.</value>
</member><member name="M:OnTrack.Database.DataKeyTuple.Equals(System.Object)">
	<summary>
 Equal routine of 2 keys
 </summary>
	<param name="obj"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.DataKeyTuple.Item(System.UInt16)">
	<summary>
 gets or sets the item in an key
 </summary>
	<param name="index"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.DataKeyTuple.GetEnumerator">
	<summary>
 get an enumerator
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.DataKeyTuple.ToString">
	<summary>
 toString
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.DataKeyTuple">
	<summary>
 the generic object unique key class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormPrimaryKey`1.#ctor(OnTrack.Database.ormDataTupleMetaClass{`0})">
	<summary>
 constructor of an keyentry
 </summary>
	<param name="registeryentry"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormPrimaryKey`1.Values">
	<summary>
 Gets or sets the keys.
 </summary>
	<value>The keys.</value>
</member><member name="T:OnTrack.Database.ormPrimaryKey`1">
	<summary>
 the generic object unique key class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
	<summary>
 dynamic getValue Property
 </summary>
	<param name="binder"></param>
	<param name="result"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
	<summary>
 Dynamic setValue Property
 </summary>
	<param name="binder"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRecord.IsBound">
	<summary>
 Gets the is table set.
 </summary>
	<value>The is table set.</value>
</member><member name="P:OnTrack.Database.ormRecord.IsCreated">
	<summary>
 set if this record is a new Record in the databse
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRecord.IsUnknown">
	<summary>
 set if the record state is unkown if new or load
 </summary>
	<value>The is unknown.</value>
</member><member name="P:OnTrack.Database.ormRecord.IsChanged">
	<summary>
 Gets or sets the is changed.
 </summary>
	<value>The is changed.</value>
</member><member name="P:OnTrack.Database.ormRecord.IsLoaded">
	<summary>
 set if record is loaded
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRecord.Alive">
	<summary>
 returns true if record is alive
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRecord.Length">
	<summary>
 returns Length of Record
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRecord.TableIDs">
	<summary>
  the TableID to the Record
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.GetTablestore(System.String)">
	<summary>
 returns the tablestore for the tableid if bound
 </summary>
	<param name="tableid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRecord.TableStores">
	<summary>
 returns the tablestores or nothing
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRecord.Values">
	<summary>
 returns the values
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.LoadFrom(System.Data.IDataReader@,System.Boolean)">
	<summary>
 load a record into this record from the datareader
 </summary>
	<param name="datareader"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.CheckStatus(System.Boolean[]@)">
	<summary>
 checkStatus if loaded or created by checking if Record exists in Table. Sets the isChanged / isLoaded Property
 </summary>
	<returns>true if successfully checked</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.SetTable(System.String,OnTrack.Database.iormDatabaseDriver,OnTrack.Database.iormDataStore,System.Boolean,System.Boolean)">
	<summary>
 set the table of this records and bind it to it
 </summary>
	<param name="tableID"></param>
	<param name="dbdriver"></param>
	<param name="tablestore"></param>
	<param name="forceReload"></param>
	<param name="fillDefaultValues"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.Delete">
	<summary>
 Deletes the Record in all tablestores
 </summary>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.Keys">
	<summary>
 retus a list of the primaryKeys
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.Set(System.Object[]@,System.Object[]@)">
	<summary>
 sets the record to an array
 </summary>
	<param name="array"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormRecord.IsNull(System.Object)">
	<summary>
 returns True if the indexed entry in the record is null or doesnot exist
 </summary>
	<param name="index"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormRecord">
	<summary>
 represents a record data tuple for to be stored and retrieved in a data store
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormObjectCacheManager.OnObjectDefinitionLoaded(System.Object,OnTrack.Database.ObjectRepository.EventArgs)">
	<summary>
 Handler for the OnObjectDefinitionLoaded event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormObjectCacheManager.OnObjectClassDescriptionLoaded(System.Object,OnTrack.ObjectClassRepository.EventArgs)">
	<summary>
 Handler for the ObjectClassDescriptionLoaded Event of the ORM Object Repository
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormObjectCacheManager.OnCreatingDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreating Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormObjectCacheManager.OnCreatedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreated Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormObjectCacheManager.OnCloningDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCloning Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormObjectCacheManager.OnClonedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCloned Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormObjectCacheManager.OnDeletedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnDeleted Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormObjectCacheManager.OnUnDeletedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnDeleted Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormObjectCacheManager.OnPersistedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnPersisted Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormObjectCacheManager.OnRetrievingDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnRetrieving Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormObjectCacheManager.OnRetrievedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnRetrieved Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormObjectCacheManager.OnCheckingUniquenessDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnDeleted Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormObjectCacheManager.OnInfusedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 after infusion of dataobject
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormObjectCacheManager.OnInfusingDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 starting infusion of dataobject
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.iormObjectCacheManager.OnOverloadedDataObject(System.Object,OnTrack.Database.ormDataObjectOverloadedEventArgs)">
	<summary>
 after Overloaded a domain specific dataobject with a global domain event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.iormObjectCacheManager">
	<summary>
 Interface for Cache Manager
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormObjectCacheManager.PersistenceStatus">
	<summary>
 persistence status of the cached object
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.CachedObject`1.#ctor(`0@)">
	<summary>
 Constructor
 </summary>
	<param name="object"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormObjectCacheManager.CachedObject`1.ComeToAlive">
	<summary>
 Gets the come to alive.
 </summary>
	<value>The come to alive.</value>
</member><member name="P:OnTrack.Database.ormObjectCacheManager.CachedObject`1.Guid">
	<summary>
 Gets the GUID.
 </summary>
	<value>The GUID.</value>
</member><member name="P:OnTrack.Database.ormObjectCacheManager.CachedObject`1.IsDeleted">
	<summary>
 Gets or sets the deleted flag
 </summary>
	<value>The is deleted.</value>
</member><member name="P:OnTrack.Database.ormObjectCacheManager.CachedObject`1.IsCreated">
	<summary>
 Gets or sets the deleted flag
 </summary>
	<value>The is deleted.</value>
</member><member name="P:OnTrack.Database.ormObjectCacheManager.CachedObject`1.IsPersisted">
	<summary>
 Gets or sets the is persisted.
 </summary>
	<value>The is persisted.</value>
</member><member name="P:OnTrack.Database.ormObjectCacheManager.CachedObject`1.IsRetrieved">
	<summary>
 Gets or sets the is retrieved.
 </summary>
	<value>The is retrieved.</value>
</member><member name="P:OnTrack.Database.ormObjectCacheManager.CachedObject`1.RetrieveData">
	<summary>
 Gets or sets the retrieve data.
 </summary>
	<value>The retrieve data.</value>
</member><member name="P:OnTrack.Database.ormObjectCacheManager.CachedObject`1.PersistedDate">
	<summary>
 Gets or sets the persisted date.
 </summary>
	<value>The persisted date.</value>
</member><member name="P:OnTrack.Database.ormObjectCacheManager.CachedObject`1.LastAccessStamp">
	<summary>
 Gets or sets the last access stamp.
 </summary>
	<value>The last access stamp.</value>
</member><member name="P:OnTrack.Database.ormObjectCacheManager.CachedObject`1.CreationDate">
	<summary>
 Gets or sets the creation date.
 </summary>
	<value>The creation date.</value>
</member><member name="P:OnTrack.Database.ormObjectCacheManager.CachedObject`1.Object">
	<summary>
 Gets or sets the object.
 </summary>
	<value>The object.</value>
</member><member name="T:OnTrack.Database.ormObjectCacheManager.CachedObject`1">
	<summary>
 generic cached object instance (tuppel with some additional data)
 </summary>
	<typeparam name="T"></typeparam>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormObjectCacheManager._registeredObjects">
	<summary>
 registered object classes
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormObjectCacheManager._cachedOverloadedObjects">
	<summary>
 the Object Cache of overloaded objects per object id  
 and the primary key of the domain specific object but the object of the overload
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormObjectCacheManager._cachedLoadedObjects">
	<summary>
 the Object Cache per objectid and then the primary key of the objects of loaded objects
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormObjectCacheManager._isInitialized">
	<summary>
 dynamic
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormObjectCacheManager._assignments">
 Define the Assignments of shared iorm persistable Events to the Cache Methods
 IMPORTANT !

</member><member name="M:OnTrack.Database.ormObjectCacheManager.#ctor(OnTrack.Session,System.String)">
	<summary>
 constructor
 </summary>
	<param name="session"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager._session_OnDomainChanged(System.Object,OnTrack.SessionEventArgs)">
	<summary>
 DomainHandler for DomainChanging
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.Start(System.Boolean)">
	<summary>
 starts the cache
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.Halt(System.Boolean)">
	<summary>
 halts the cache
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.Shutdown(System.Boolean)">
	<summary>
 shutdowns the cache
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.FlushCache">
	<summary>
 flush the cache
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.Initialize(System.Boolean)">
	<summary>
 Initialize the Cache
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.OnObjectDefinitionLoaded(System.Object,OnTrack.Database.ObjectRepository.EventArgs)">
	<summary>
 Handler for the ObjectDefinitionLoaded Event of the ORM Object Repository
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.OnObjectClassDescriptionLoaded(System.Object,OnTrack.ObjectClassRepository.EventArgs)">
	<summary>
 Handler for the OnObjectClassDescriptionLoaded Event of the ORM Object Class Repository
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.OnCreatingDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreating Event Handler for the ORM Data Object - check if the object exists in cache
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.OnCreatedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreated Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.OnCloningDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCloning Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.OnClonedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCloned Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.OnDeletedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnDeleted Event Handler for the ORM Data Object - mark object as deleted
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.OnUnDeletedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnDeleted Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.OnPersistedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnPersisted Event Handler for the ORM Data Object - check if object needs to be added and set persistance timestamp
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.EndOverloading(OnTrack.Database.ormPrimaryKey{OnTrack.Database.iormPersistable},OnTrack.Database.ormDataObject)">
	<summary>
 checks and deletes an overloading object
 </summary>
	<param name="searchkeys"></param>
	<param name="dataobject"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.OnOverloadedDataObject(System.Object,OnTrack.Database.ormDataObjectOverloadedEventArgs)">
	<summary>
 OnRetrieving Event Handler for the ORM Data Object - add to cache the overloading of domain specific
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.OnRetrievingDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnRetrieving Event Handler for the ORM Data Object - check if object exists in cache and use it from there
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.OnRetrievedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnRetrieved Event Handler for the ORM Data Object - add retrieved object to cache
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.OnInfusingDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreating Event Handler for the ORM Data Object - check if the object exists in cache
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.OnInfusedDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnRetrieved Event Handler for the ORM Data Object - add retrieved object to cache
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectCacheManager.OnCheckinqUniquenessDataObject(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnDeleted Event Handler for the ORM Data Object
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormObjectCacheManager">
	<summary>
 Object Cache Manager Implementation
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Installation.Scheduling">
	<summary>
 creates or updates all schematas for scheduling objects
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Installation.CreateAndPersist(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
	<summary>
 creates the schema and persist for a list of objects
 </summary>
	<param name="objects"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Installation.CreateDatabase(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
	<summary>
 Creates or updates all the Database Schema for all objects or a subset
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Installation.DropDatabase">
	<summary>
 Drop Database
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Installation.InitializeTestData">
	<summary>
 Initialize Test Data
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Installation.InitializeCalendar(System.DateTime,System.DateTime)">
	<summary>
 Initialize the Calendar
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Installation.SaveChangeLog">
	<summary>
 save the ontrack change log to the database
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Installation.FeedInInitialData(System.String)">
	<summary>
 feeds the initial data from a path
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.Installation.InitialCoreData">
	<summary>
  Initial Core Data
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.Constants">
	<summary>
 static class for Database Constants
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectRepository.EventArgs.Objectdefinition">
	<summary>
 Gets the objectdefinition.
 </summary>
	<value>The objectdefinition.</value>
</member><member name="P:OnTrack.Database.ObjectRepository.EventArgs.Objectname">
	<summary>
 Gets the objectname.
 </summary>
	<value>The objectname.</value>
</member><member name="P:OnTrack.Database.ObjectRepository.IsInitialized">
	<summary>
 Gets or sets the is initialiazed.
 </summary>
	<value>The is initialiazed.</value>
</member><member name="P:OnTrack.Database.ObjectRepository.ObjectDefinitions">
	<summary>
 gets a list of all ObjectDefinitions in the repository
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectRepository.ObjectEntryDefinitions">
	<summary>
 gets a list of all ObjectEntry in the repository
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectRepository.XIDs">
	<summary>
 gets a list of all Xchange IDs in the repository
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectRepository.Aliases">
	<summary>
 gets a list of all Xchange Aliases in the repository
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectRepository.TableDefinitions">
	<summary>
 gets a list of all ObjectDefinitions in the repository
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectRepository.RegisterCache(OnTrack.Database.iormObjectCacheManager)">
	<summary>
 registers a cache manager for this repository
 </summary>
	<param name="cache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectRepository.AddXID(OnTrack.Database.iormObjectEntry@)">
	<summary>
 Add an Entry by XID
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectRepository.AddAlias(OnTrack.Database.iormObjectEntry@)">
	<summary>
 Add an Entry by ID
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectRepository.Reset">
	<summary>
 reset all the data of the meta store
 </summary>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectRepository.OnDomainChanged(System.Object,OnTrack.SessionEventArgs)">
	<summary>
 handler for the domain Changed Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectRepository.Initialize(System.Boolean)">
	<summary>
 Initialize the repository and load the minimum objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectRepository.LoadIntoRepository(OnTrack.Database.ObjectDefinition@)">
	<summary>
 Load Object into Store of Objects
 </summary>
	<param name="object"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectRepository.HasEntry(System.String,System.String)">
	<summary>
 retrieves an Entry by name
 </summary>
	<param name="objectname">name of the object</param>
	<returns>an Entry object or nothing </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectRepository.GetEntries(System.String)">
	<summary>
 retrieves an Entry by name
 </summary>
	<param name="objectname">name of the object</param>
	<returns>an Entry object or nothing </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectRepository.GetEntryByAlias(System.String,System.String)">
	<summary>
 retrieves an Entry by Alias ID
 </summary>
	<param name="Alias"></param>
	<returns>an Entry object or nothing </returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ObjectRepository">
	<summary>
 store for all the  OTDB object information - loaded on connecting with the 
 session in the domain
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ColumnDefinition.#ctor">
	<summary>
 constructor of a SchemaDefTableEntry
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ColumnDefinition.Indexname">
	<summary>
 return the IndexName if entry belongs to an index
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ColumnDefinition.PrimaryKeyOrdinal">
	<summary>
 Gets or sets the primary key ordinal.
 </summary>
	<value>The primary key ordinal.</value>
</member><member name="P:OnTrack.Database.ColumnDefinition.Position">
	<summary>
 Gets or sets the position.
 </summary>
	<value>The position.</value>
</member><member name="P:OnTrack.Database.ColumnDefinition.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ColumnDefinition.DefaultValue">
	<summary>
 gets the default value as object representation
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ColumnDefinition.DefaultValueString">
	<summary>
 Gets or sets the default value in string presentation
 </summary>
	<value>The default value.</value>
</member><member name="P:OnTrack.Database.ColumnDefinition.Tablename">
	<summary>
 sets or gets the tablename of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ColumnDefinition.Name">
	<summary>
 Columnname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ColumnDefinition.IsNullable">
	<summary>
 Gets or sets the is nullable.
 </summary>
	<value>The is nullable.</value>
</member><member name="P:OnTrack.Database.ColumnDefinition.IsUnique">
	<summary>
 Gets or sets the is unique.
 </summary>
	<value></value>
</member><member name="P:OnTrack.Database.ColumnDefinition.Datatype">
	<summary>
 returns the field data type
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ColumnDefinition.Version">
	<summary>
 returns version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ColumnDefinition.Size">
	<summary>
 returns the size
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ColumnDefinition.Properties">
	<summary>
 returns the parameter for the object entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ColumnDefinition.IsPrimaryKey">
	<summary>
 returns true if Entry has a Primary Key
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ColumnDefinition.TableDefinition">
	<summary>
 gets the Tabledefinition object with lazy load
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ColumnDefinition.OnSwitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the SwitchRuntimeOFF Event after Bootstrapping
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ColumnDefinition.IncVersion">
	<summary>
 Increase the version
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ColumnDefinition.SetByAttribute(OnTrack.Database.ormObjectEntryAttribute)">
	<summary>
 set the properties of an ObjectEntryDefinition by a SchemaColumnAttribute
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ColumnDefinition.OnDefaultValuesNeeded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for defaultValues
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ColumnDefinition.OnValidating(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for Validating - correct
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ColumnDefinition.OnInfused(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for Infused
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ColumnDefinition.OnFeeding(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for Feeding 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ColumnDefinition.Retrieve(System.String,System.String,System.Boolean,System.Boolean)">
	<summary>
 retrives a ColumnDef Object
 </summary>
	<param name="tablename"></param>
	<param name="columnname"></param>
	<param name="forcereload"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ColumnDefinition.OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreated handles the creation event - set 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ColumnDefinition">
	<summary>
 class for Column Definition of a table
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ForeignKeyDefinition.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ForeignKeyDefinition.Tablename">
	<summary>
 sets or gets the tablename of the foreign key (source)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ForeignKeyDefinition.Id">
	<summary>
 sets or gets the id of the foreign key
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ForeignKeyDefinition.Version">
	<summary>
 returns version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ForeignKeyDefinition.UseForeignKey">
	<summary>
 Gets or sets the is foreign key implementation.
 </summary>
	<value>T</value>
</member><member name="P:OnTrack.Database.ForeignKeyDefinition.ForeignKeyReferenceTables">
	<summary>
 returns a list of tablenames which are referenced in the foreign key
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ForeignKeyDefinition.ForeignKeyReferences">
	<summary>
 Gets or sets the is foreign Key reference string.
 </summary>
	<value>The is nullable.</value>
</member><member name="P:OnTrack.Database.ForeignKeyDefinition.ColumnNames">
	<summary>
 Gets or sets the is entry names Key reference string.
 </summary>
	<value>The is nullable.</value>
</member><member name="P:OnTrack.Database.ForeignKeyDefinition.ForeignKeyProperties">
	<summary>
 returns the parameter for the object entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ForeignKeyDefinition.ForeignKeyProperty">
	<summary>
 sets or gets the Properties for the object entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ForeignKeyDefinition.TableDefinition">
	<summary>
 gets the Tabledefinition object with lazy load
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ForeignKeyDefinition.OnSwitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the SwitchRuntimeOFF Event after Bootstrapping
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ForeignKeyDefinition.IncVersion">
	<summary>
 Increase the version
 </summary>
	<returns></returns>
	<remarks></remarks>toupper.split

</member><member name="M:OnTrack.Database.ForeignKeyDefinition.SetByAttribute(OnTrack.Database.ormSchemaForeignKeyAttribute)">
	<summary>
 set the properties of an ObjectEntryDefinition by a SchemaColumnAttribute
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ForeignKeyDefinition.OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreated handles the creation event - set 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ForeignKeyDefinition">
	<summary>
 class for foreign key definition of multiple table columns
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.IndexDefinition.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.IndexDefinition.Properties">
	<summary>
 Gets or sets the properties.
 </summary>
	<value>The properties.</value>
</member><member name="P:OnTrack.Database.IndexDefinition.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.IndexDefinition.IsPrimary">
	<summary>
 Gets or sets the is primary.
 </summary>
	<value>The is primary.</value>
</member><member name="P:OnTrack.Database.IndexDefinition.IsUnique">
	<summary>
 Gets or sets the is primary.
 </summary>
	<value>The is primary.</value>
</member><member name="P:OnTrack.Database.IndexDefinition.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.IndexDefinition.DatabaseID">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.IndexDefinition.Columnnames">
	<summary>
 Gets or sets the columnnames.
 </summary>
	<value>The columnnames.</value>
</member><member name="P:OnTrack.Database.IndexDefinition.Tablename">
	<summary>
 Gets the tablename.
 </summary>
	<value>The tablename.</value>
</member><member name="P:OnTrack.Database.IndexDefinition.Name">
	<summary>
 Gets the indexname.
 </summary>
	<value>The indexname.</value>
</member><member name="M:OnTrack.Database.IndexDefinition.OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreated handles the creation event - set 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.IndexDefinition.OnSwitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the SwitchRuntimeOFF Event after Bootstrapping
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.IndexDefinition.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 returns a index definition
 </summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.IndexDefinition.CreateSchema(System.Boolean)">
	<summary>
 creates the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.IndexDefinition.Create(System.String,System.String,System.Boolean,System.Boolean)">
	<summary>
 create a new data object of that type
 </summary>
	<param name="tablename">tablename of the table</param>
	<param name="runTimeOnly">if no save is possible -&gt; bootstrapping</param>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.IndexDefinition.OnPersisting">
	<summary>
 Event Handler on Persisting
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.IndexDefinition">
	<summary>
 definition class Table defintion for an OTDB data object definition
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.TableDefinition.Name">
	<summary>
 Gets the tablename.
 </summary>
	<value>The tablename.</value>
</member><member name="P:OnTrack.Database.TableDefinition.PrimaryKey">
	<summary>
 Gets or sets the primary key name.
 </summary>
	<value>The pkname.</value>
</member><member name="P:OnTrack.Database.TableDefinition.Description">
	<summary>
 Gets or sets the Description.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.Database.TableDefinition.Properties">
	<summary>
 gets or sets the cache selection string
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.TableDefinition.UseCache">
	<summary>
 use Cache on this object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.TableDefinition.CacheProperties">
	<summary>
 gets or sets the cache selection string
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.TableDefinition.DomainBehavior">
	<summary>
 Gets or sets the domain behavior.
 </summary>
	<value>The domain behavior.</value>
</member><member name="P:OnTrack.Database.TableDefinition.Version">
	<summary>
 gets or set the version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.TableDefinition.SpareFieldsBehavior">
	<summary>
 gets or set the the spare fields behavior. Means extra fields are available.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.TableDefinition.DeletePerFlagBehavior">
	<summary>
 sets or gets the delete per flag behavior. If true a deleteflag and a delete date are available.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.TableDefinition.Columns">
	<summary>
 returns a List of Column Definitions
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.TableDefinition.ForeignKeys">
	<summary>
 returns a List of foreign keys
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.All">
	<summary>
 returns a List of all Tabledefinitions
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreated handles the creation event - set 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.OnSwitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the SwitchRuntimeOFF Event after Bootstrapping
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.SetValuesBy(OnTrack.Database.ormSchemaTableAttribute)">
	<summary>
 adds a table entry by an table attribute 
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.OnEntryChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
	<summary>
 Event Handler if a Columndefinition is changing
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.AddColumn(OnTrack.Database.ColumnDefinition)">
	<summary>
 Add a columnDefinition
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.AddForeignKey(OnTrack.Database.ForeignKeyDefinition)">
	<summary>
 Add a columnDefinition
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.AddIndex(OnTrack.Database.ormSchemaIndexAttribute)">
	<summary>
 Adds an Index to the Table Definition
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.GetNoPrimaryKeys">
	<summary>
 retrieve the List of Primary Key Fieldnames
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.GetPrimaryKeyColumnNames">
	<summary>
 retrieve the List of Primary Key Fieldnames
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.GetPrimaryKeyEntries">
	<summary>        ''' retrieve the List of Primary Key Fieldnames
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.GetIndexFieldNames(System.String)">
	<summary>
 retrieves a list of Fieldnames of an Index
 </summary>
	<param name="IndexName">name of the Index</param>
	<returns>List (of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.GetNoIndexFields(System.String)">
	<summary>
 retrieves a list of Fieldnames of an Index
 </summary>
	<param name="IndexName">name of the Index</param>
	<returns>List (of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.GetIndexEntries(System.String)">
	<summary>
 retrieves a list of Fieldnames of an Index
 </summary>
	<param name="IndexName">name of the Index</param>
	<returns>List (of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.HasEntry(System.String)">
	<summary>
 gets an entry by entryname or nothing
 </summary>
	<param name="entryname">name of the entry</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.GetEntry(System.String)">
	<summary>
 gets an entry by columnname or nothing
 </summary>
	<param name="columnname">name of the column</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.RebuildPrimaryKey">
	<summary>
 Helper for rebuilding the Primary Key
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.OnRelationLoaded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event handler for relations loaded
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.Retrieve(System.String,OnTrack.Database.iormDatabaseDriver,System.Boolean)">
	<summary>
 returns a objecttabledefintion object
 </summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.CreateSchema(System.Boolean)">
	<summary>
 creates the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.TableDefinition.Create(System.String,System.Boolean,System.Boolean)">
	<summary>
 create a new data object of that type
 </summary>
	<param name="tablename">tablename of the table</param>
	<param name="runTimeOnly">if no save is possible -&gt; bootstrapping</param>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.TableDefinition">
	<summary>
 definition class Table defintion for an OTDB data object definition
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectPermission.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ObjectPermission.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ObjectPermission.ExitOnFalse">
	<summary>
 Gets or sets the exit.
 </summary>
	<value>The exit.</value>
</member><member name="P:OnTrack.Database.ObjectPermission.ExitOnTrue">
	<summary>
 Gets or sets the exit.
 </summary>
	<value>The exit.</value>
</member><member name="P:OnTrack.Database.ObjectPermission.Allow">
	<summary>
 Gets or sets the allow.
 </summary>
	<value>The allow.</value>
</member><member name="P:OnTrack.Database.ObjectPermission.Rule">
	<summary>
 Gets or sets the rule.
 </summary>
	<value>The rule.</value>
</member><member name="P:OnTrack.Database.ObjectPermission.Ruletype">
	<summary>
 Gets or sets the ruletype.
 </summary>
	<value>The ruletype.</value>
</member><member name="P:OnTrack.Database.ObjectPermission.Order">
	<summary>
 Gets or sets the order.
 </summary>
	<value>The order.</value>
</member><member name="P:OnTrack.Database.ObjectPermission.DomainID">
	<summary>
 Gets the domain ID.
 </summary>
	<value>The domain ID.</value>
</member><member name="P:OnTrack.Database.ObjectPermission.Operation">
	<summary>
 Gets the operation.
 </summary>
	<value>The operation.</value>
</member><member name="P:OnTrack.Database.ObjectPermission.Entryname">
	<summary>
 Gets the entryname.
 </summary>
	<value>The entryname.</value>
</member><member name="P:OnTrack.Database.ObjectPermission.Objectname">
	<summary>
 Gets the objectname.
 </summary>
	<value>The objectname.</value>
</member><member name="P:OnTrack.Database.ObjectPermission.RuleProperty">
	<summary>
 set or gets the RuleProperty
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectPermission.OnSwitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the SwitchRuntimeOFF Event after Bootstrapping
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectPermission.Create(System.String,System.Int64,System.String,System.String,System.String,System.Boolean,System.Boolean)">
	<summary>
 creates a ObjectPermission
 </summary>
	<param name="objectname"></param>
	<param name="order"></param>
	<param name="operationname"></param>
	<param name="entryname"></param>
	<param name="domainID"></param>
	<param name="checkUnique"></param>
	<param name="runtimeOnly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectPermission.CreateSchema(System.Boolean)">
	<summary>
 creates the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectPermission.OnFeeding(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the RecordFed Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectPermission.OnInfused(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the OnInfused Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectPermission.CheckFor(OnTrack.Commons.User,System.Boolean@,System.String)">
	<summary>
 applies the current permission rule on the current user and returns the result
 </summary>
	<param name="user"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ObjectPermission">
	<summary>
 definition class for the permission rules on a data object
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectDefinition.EventArgs.Objectname">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="T:OnTrack.Database.ObjectDefinition.EventArgs">
	<summary>
 Object Defintion Event Arguments
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ObjectDefinition.ConstTableID">
	<summary>
 Table Definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ObjectDefinition.ConstIndexName">
	<summary>
 Index Definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ObjectDefinition.ConstFNID">
	<summary>
 Primary key Column
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ObjectDefinition.ConstFNClass">
	<summary>
 Column Definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ObjectDefinition.ConstRColumnEntries">
 RELATIONS for Entries - Capitalize is correct Column instead COLUMN


</member><member name="F:OnTrack.Database.ObjectDefinition._tables">
	<summary>
 Relations which will be handled by events
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectDefinition.ID">
	<summary>
 gets the ID of the object defintion
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectDefinition.Count">
	<summary>
 retrieves number of entries
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectDefinition.IsBootStrappingObject">
	<summary>
 returns true if this Object is a Bootstrapping Object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectDefinition.IsActive">
	<summary>
 set or gets the object active
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.Database.ObjectDefinition.ObjectType">
	<summary>
 Gets or sets the Module name.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.Database.ObjectDefinition.Classname">
	<summary>
 Gets or sets the .net class name.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.Database.ObjectDefinition.Keys">
	<summary>
 Gets or sets the Module name.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.Database.ObjectDefinition.Tables">
	<summary>
 Gets a list of the table definitions
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.Database.ObjectDefinition.PermissionRules">
	<summary>
 Returns a ordered enumerable of ObjectPermissionRules 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectDefinition.Tablenames">
	<summary>
 Gets or sets the table names.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.Database.ObjectDefinition.Modulename">
	<summary>
 Gets or sets the Module name.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.Database.ObjectDefinition.DefaultPermission">
	<summary>
 set or gets the default permission (true if accessible) if no permission rules are applying
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.Database.ObjectDefinition.Description">
	<summary>
 Gets or sets the Description.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.Database.ObjectDefinition.Properties">
	<summary>
 Gets or sets the parameters.
 </summary>
	<value>The parameters.</value>
</member><member name="P:OnTrack.Database.ObjectDefinition.UseCache">
	<summary>
 use Cache on this object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectDefinition.CacheProperties">
	<summary>
 gets or sets the cache selection string
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectDefinition.HasDomainBehavior">
	<summary>
 Gets or sets the domain behavior.
 </summary>
	<value>The domain behavior.</value>
</member><member name="P:OnTrack.Database.ObjectDefinition.Version">
	<summary>
 gets or set the version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectDefinition.HasSpareFieldsBehavior">
	<summary>
 gets or set the the spare fields behavior for the Object descibed
 . Means extra fields are available.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectDefinition.HasDeleteFieldBehavior">
	<summary>
 sets or gets the delete per flag behavior for the Object (not the Object Definition).
  If true a deleteflag and a delete date are available.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectDefinition.CompoundEntryObjectNames">
	<summary>
 returns a List of CompoundEntryObjectNames
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectDefinition.Entries">
	<summary>
 returns all Entries
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.GetEntries(System.Boolean)">
	<summary>
 gets a collection of object Entry definitions
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.GetCompoundEntries(System.Boolean)">
	<summary>
 gets a collection of object compound Entry definitions
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.GetColumnEntries(System.Boolean)">
	<summary>
 gets a collection of object column Entry definitions
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.GetOrderedEntries(System.Boolean)">
	<summary>
 gets a Ilist  of object Entry definitions ordered by the ordinal
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnCreated handles the creation event - set 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.SetValuesBy(OnTrack.Database.ormObjectAttribute)">
	<summary>
 sets the values by attributes
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.AddPermissionRule(OnTrack.Database.ormObjectTransactionAttribute,System.Boolean,System.String)">
	<summary>
 sets the values by attributes
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.AddTable(OnTrack.Database.ormSchemaTableAttribute,System.Boolean)">
	<summary>
 adds a table entry by an table attribute 
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.AddEntry(OnTrack.Database.ormObjectEntryAttribute,System.Boolean,System.String)">
	<summary>
 adds a column entry by an ObjectEntry Attribute 
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.CreateSchema(System.Boolean)">
	<summary>
 creates the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.CreateObjectSchema(System.Type)">
	<summary>
 static create object schema out of attributes
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.CreateObjectSchema(System.Boolean)">
	<summary>
 Create the Object Schema in the Database for this ObjectDefinition
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.SetupByClassDescription(System.Type,System.Boolean)">
	<summary>
 fills a object definition by attributes from ObjectClassDescription
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.GetNoKeys">
	<summary>
 retrieve the List of Primary Key entry names
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.GetKeyNames">
	<summary>
 retrieve the List of Primary Key entry names
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.GetKeyEntries">
	<summary>
 retrieve the List of Primary Key Fieldnames
 </summary>
	<returns>List(of String)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.ObjectDefinition_OnEntryChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
	<summary>
 event handler for the PropertyChanged Event of an Entry
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.AddEntry(OnTrack.Database.iormObjectEntry)">
	<summary>
 Add an Entry by Object Entry Definition
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.HasEntry(System.String,System.Boolean)">
	<summary>
 gets an entry by entryname or nothing
 </summary>
	<param name="entryname">name of the entry</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.GetTable(System.String)">
	<summary>
 gets the Table Object for the tablename assosciated with this object definition
 </summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.HasTable(System.String)">
	<summary>
 returns true if the tablename exists in the table dictionary
 </summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.GetClassDescription">
	<summary>
 returns the Object Class Description for the Object Definition Instance
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.GetRelationAttributes">
	<summary>
 returns a list of relation Attributes defined in the class description
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.GetRelationAttribute(System.String)">
	<summary>
 returns a list of relation Attributes defined in the class description
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.GetIndexAttribute(System.String)">
	<summary>
 returns a list of relation Attributes defined in the class description
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.GetEntry(System.String)">
	<summary>
 gets an entry by entryname or nothing
 </summary>
	<param name="entryname">name of the entry</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.Retrieve(System.String,System.String,OnTrack.Database.iormDatabaseDriver,System.Boolean,System.Boolean)">
	<summary>
 Retrieves an Object Definition from the persistence store
 </summary>
	<param name="objectname"></param>
	<param name="domainID"></param>
	<param name="dbdriver"></param>
	<param name="forceReload"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.SynchronizeTables">
	<summary>
 little routine to synchronize tablenames (as stored foreign key in the database) and the runtime structure _tables and entries
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.OnInfused(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handles the OnPersisted Event - used to persist the tables since these are dynamic and not relation mapped
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.Create(System.String,System.String,System.Boolean,System.Boolean,System.UInt16)">
	<summary>
 creates an new object definition in the persistnce store
 </summary>
	<param name="objectID"></param>
	<param name="domainID"></param>
	<param name="runTimeOnly"></param>
	<param name="checkunique"></param>
	<param name="version"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectDefinition.GetQuery(System.String,System.String)">
	<summary>
 Returns a Query Enumeration
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ObjectDefinition">
	<summary>
 definition class data for an OTDB data object classes
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.AbstractEntryDefinition.ConstObjectID">
	<summary>
 Object ID
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.AbstractEntryDefinition.ConstTableID">
	<summary>
 Table Definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.AbstractEntryDefinition.ConstIndexXID">
	<summary>
 Table Index Definitions
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.AbstractEntryDefinition.ConstFNObjectName">
	<summary>
 Primary Key Columns
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.AbstractEntryDefinition.ConstFNType">
	<summary>
 Column Definitions
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.AbstractEntryDefinition._xid">
	<summary>
 Member Mapping of persistable Columns
 </summary>
	<remarks></remarks>
</member><member name="E:OnTrack.Database.AbstractEntryDefinition.PropertyChanged">
	<summary>
 Events
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.AbstractEntryDefinition._properties">
	<summary>
 dynamic members
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractEntryDefinition.#ctor">
	<summary>
 constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.IsMapped">
	<summary>
 returns True if object entry is mapped to a field member
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.IsReadonly">
	<summary>
 gets or sets the readonly flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.IsActive">
	<summary>
 gets or sets the active flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.IsValidating">
	<summary>
 gets or sets the validation flag - object takes part in validation if true
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.IsRendering">
	<summary>
 gets or sets the render flag - object takes part in rendering if true
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.HasLowerRangeValue">
	<summary>
 True if ObjectEntry has a defined lower value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.LowerRangeValue">
	<summary>
 gets the lower range Value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.HasUpperRangeValue">
	<summary>
 True if ObjectEntry has a defined upper value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.UpperRangeValue">
	<summary>
 gets the upper range Value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.HasPossibleValues">
	<summary>
 returns true if there are possible values
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.PossibleValues">
	<summary>
 gets the list of possible values
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.HasValidationProperties">
	<summary>
 returns true if there are validation properties
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.Validationproperties">
	<summary>
 gets or sets the validation properties
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.HasValidateRegExpression">
	<summary>
 returns true if there is a regular expression condition for validating the object value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.ValidateRegExpression">
	<summary>
 gets or sets the regular expression condition for validating the object value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.HasRenderProperties">
	<summary>
 returns true if there are validation properties
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.RenderProperties">
	<summary>
 gets or sets the validation properties
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.HasRenderRegExpression">
	<summary>
 returns true if there is a regular expression condition for rendering the object value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.RenderRegExpMatch">
	<summary>
 gets or sets the regular expression condition for validating the object value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.RenderRegExpPattern">
	<summary>
 gets or sets the regular expression condition for validating the object value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.HasLookupProperties">
	<summary>
 returns true if there are validation properties
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.LookupProperties">
	<summary>
 gets or sets the validation properties
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.HasLookupCondition">
	<summary>
 returns true if there are lookup condition
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.LookupCondition">
	<summary>
 gets or sets the lookup condition
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.IsNullable">
	<summary>
 gets or sets the nullable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.Size">
	<summary>
 gets or sets the size
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.Datatype">
	<summary>
 gets or sets the datatype
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.InnerDatatype">
	<summary>
 gets or sets the inner datatype
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.PrimaryKeyOrdinal">
	<summary>
 gets or sets the nullable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.Objectname">
	<summary>
 sets or gets the object name of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.RunTimeOnly">
	<summary>
 Object cannot be persisted only.
 </summary>
	<value>The run tim only.</value>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.XID">
	<summary>
 sets or gets the XchangeManager ID for the field 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.Entryname">
	<summary>
  gets the name of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.Typeid">
	<summary>
 sets or gets the type OTDBSchemaDefTableEntryType of the field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.IsSpareField">
	<summary>
 sets or gets true if this field is a spare field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.IsColumn">
	<summary>
 gets true if a column / field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.IsCompound">
	<summary>
 returns true if entry is a compound
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.Version">
	<summary>
 returns version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.Aliases">
	<summary>
 returns a array of aliases
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.Relation">
	<summary>
 returns the relation information of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.Properties">
	<summary>
 sets or gets the Properties for the object entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.AbstractEntryDefinition.Title">
	<summary>
 returns Title (Column Header)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractEntryDefinition.registerHandler">
	<summary>
 register all Event Handlers
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractEntryDefinition.deregisterHandler">
	<summary>
 deregister Event Handlers
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractEntryDefinition.OnSwitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the SwitchRuntimeOFF Event after Bootstrapping
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractEntryDefinition.IncVersion">
	<summary>
 Increase the version
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractEntryDefinition.GetObjectDefinition">
	<summary>
 returns the ObjectDefintion of this Entry
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractEntryDefinition.AbstractEntryDefinition_SetByAttribute(OnTrack.Database.ormObjectEntryAttribute)">
	<summary>
 set the properties of an ObjectEntryDefinition by a SchemaColumnAttribute
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractEntryDefinition.AbstractEntryDefinition_OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handler for OnCreated
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractEntryDefinition.AbstractEntryDefinition_OnCreating(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handler for onCreating 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractEntryDefinition.AbstractEntryDefinition_OnEntryChanged(System.Object,OnTrack.Database.ormDataObjectEntryEventArgs)">
	<summary>
 handler for entry changed event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractEntryDefinition.GetEntryReference(System.String)">
	<summary>
 returns a Dictionary of Entryname - list of objectnames
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractEntryDefinition.GetAliasReference(System.String)">
	<summary>
 returns a Dictionary of Alias - list of objectentrynames
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.AbstractEntryDefinition.GetXIDReference(System.String)">
	<summary>
 returns a Dictionary of XID - (  ObjectEntryName in canonical form) Tuples
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.AbstractEntryDefinition">
	<summary>
 abstract class for ObjectEntry (data slots) Definition 
 Subclasses are ObjectColumnEntry and ObjecCompoundEntry
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ObjectCompoundEntry.ConstCompoundSetter">
 method tags
 

</member><member name="M:OnTrack.Database.ObjectCompoundEntry.#ctor">
	<summary>
 constructor of a SchemaDefTableEntry
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectCompoundEntry.CompoundValidatorMethodName">
	<summary>
 Gets or sets the name of the compound validator method.
 </summary>
	<value>The name of the compound getter method.</value>
</member><member name="P:OnTrack.Database.ObjectCompoundEntry.CompoundGetterMethodName">
	<summary>
 Gets or sets the name of the compound getter method.
 </summary>
	<value>The name of the compound getter method.</value>
</member><member name="P:OnTrack.Database.ObjectCompoundEntry.CompoundSetterMethodName">
	<summary>
 Gets or sets the name of the compound setter method.
 </summary>
	<value>The name of the compound setter method.</value>
</member><member name="P:OnTrack.Database.ObjectCompoundEntry.PrimaryKeyOrdinal">
	<summary>
 not applicable for Compound Entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectCompoundEntry.IsNullable">
	<summary>
 returns the Nullable Property
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectCompoundEntry.Size">
	<summary>
 returns the size
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectCompoundEntry.Datatype">
	<summary>
 returns the field data type
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectCompoundEntry.InnerDatatype">
	<summary>
 returns the inner list data type
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectCompoundEntry.DefaultValue">
	<summary>
 gets the default value as object representation
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectCompoundEntry.DefaultValueString">
	<summary>
 Gets or sets the default value in string presentation
 </summary>
	<value>The default value.</value>
</member><member name="P:OnTrack.Database.ObjectCompoundEntry.Version">
	<summary>
 returns version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectCompoundEntry.CompoundObjectID">
	<summary>
 returns the resulting Compound Object ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectCompoundEntry.CompoundIDEntryname">
	<summary>
 returns the entryname of the compound ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectCompoundEntry.CompoundValueEntryName">
	<summary>
 returns the entryname of the compounds value in the resulting object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectCompoundEntry.CompoundRelationPath">
	<summary>
 returns the path of relations of a compound to the resulting object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectCompoundEntry.IsSpareField">
	<summary>
 gets true if a spare field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectCompoundEntry.OnSwitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the SwitchRuntimeOFF Event after Bootstrapping
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectCompoundEntry.IncVersion">
	<summary>
 Increase the version
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectCompoundEntry.Retrieve(System.String,System.String,System.String,System.Boolean)">
	<summary>
 retrieves an Object entry Definition from persistence store
 </summary>
	<param name="objectname"></param>
	<param name="entryname"></param>
	<param name="domainID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ObjectCompoundEntry">
	<summary>
 class for ObjectEntry (data slots)
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ObjectColumnEntry.constRColumnDefinition">
	<summary>
 relation to the columndefinition - will be always created on create
 </summary>
	<remarks></remarks>
</member><member name="E:OnTrack.Database.ObjectColumnEntry.PropertyChanged">
	<summary>
 Events
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectColumnEntry.#ctor">
	<summary>
 constructor 
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectColumnEntry.Columnname">
	<summary>
 sets or gets the column name of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectColumnEntry.TableName">
	<summary>
 sets or gets the table name of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectColumnEntry.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ObjectColumnEntry.IsSpareField">
	<summary>
 gets true if a spare field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectColumnEntry.DBDefaultValue">
	<summary>
 sets or gets the default value (database level) of the column entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectColumnEntry.Datatype">
	<summary>
 sets or gets the Datatype
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectColumnEntry.PrimaryKeyOrdinal">
	<summary>
 returns the Position in the primary key ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectColumnEntry.Indexname">
	<summary>
 return the IndexName if entry belongs to an index
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectColumnEntry.IsNullable">
	<summary>
 returns true if column accepts null
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectColumnEntry.IsPrimaryKey">
	<summary>
 returns true if Entry has a Primary Key
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectColumnEntry.Size">
	<summary>
 returns the datasize 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectColumnEntry.ColumnOrdinal">
	<summary>
 returns the Position Ordinal in the table (record)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ObjectColumnEntry.ColumnDefinition">
	<summary>
 returns the corresponding columndefinition
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectColumnEntry.OnDefaultValuesNeeded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for defaultValues
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectColumnEntry.OnValidating(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for Validating - correct
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectColumnEntry.OnFeeding(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for Feeding 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectColumnEntry.OnSwitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handler for the SwitchRuntimeOFF Event after Bootstrapping 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectColumnEntry.OnInitialize(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Initialize Event handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectColumnEntry.AbstractEntryDefinition_SetByAttribute(OnTrack.Database.ormObjectEntryAttribute)">
	<summary>
 set the properties of a Column Entry by a ormObjectEntryAttribute
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectColumnEntry.Retrieve(System.String,System.String,System.String,System.Boolean)">
	<summary>
 retrieves an Object entry Definition from persistence store
 </summary>
	<param name="objectname"></param>
	<param name="entryname"></param>
	<param name="domainID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectColumnEntry.OnRelationLoaded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler relation loaded
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ObjectColumnEntry.ColumnDefinition_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
	<summary>
 handler for columndefinition property changed event raises the iormObjectEntry event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormChangeLogEntry.Changeimplno">
	<summary>
 Gets or sets the changeimplno.
 </summary>
	<value>The changeimplno.</value>
</member><member name="P:OnTrack.Database.ormChangeLogEntry.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormChangeLogEntry.ChangeID">
	<summary>
 Gets or sets the change ID.
 </summary>
	<value>The change ID.</value>
</member><member name="P:OnTrack.Database.ormChangeLogEntry.Releasedate">
	<summary>
 Gets or sets the releasedate.
 </summary>
	<value>The releasedate.</value>
</member><member name="P:OnTrack.Database.ormChangeLogEntry.Patch">
	<summary>
 Gets or sets the patch.
 </summary>
	<value>The patch.</value>
</member><member name="P:OnTrack.Database.ormChangeLogEntry.Release">
	<summary>
 Gets or sets the release.
 </summary>
	<value>The release.</value>
</member><member name="P:OnTrack.Database.ormChangeLogEntry.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ormChangeLogEntry.Module">
	<summary>
 Gets or sets the module.
 </summary>
	<value>The module.</value>
</member><member name="P:OnTrack.Database.ormChangeLogEntry.Application">
	<summary>
 Gets or sets the application.
 </summary>
	<value>The application.</value>
</member><member name="T:OnTrack.Database.ormChangeLogEntry">
	<summary>
 ChangeLogEntryAttribute implements a ChangeLogEntry for a Class
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormEntryMapping.Enabled">
	<summary>
 Gets or sets the enabled.
 </summary>
	<value>The enabled.</value>
</member><member name="P:OnTrack.Database.ormEntryMapping.InfuseMode">
	<summary>
 Gets or sets the infuse mode.
 </summary>
	<value>The infuse mode.</value>
</member><member name="P:OnTrack.Database.ormEntryMapping.RelationName">
	<summary>
 Gets or sets the name of the relation.
 </summary>
	<value>The name of the relation.</value>
</member><member name="P:OnTrack.Database.ormEntryMapping.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormEntryMapping.TableName">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="P:OnTrack.Database.ormEntryMapping.EntryName">
	<summary>
 Gets or sets the object's entry name.
 </summary>
	<value>The entry name.</value>
</member><member name="P:OnTrack.Database.ormEntryMapping.ColumnName">
	<summary>
 Gets or sets the field name.
 </summary>
	<value>The fieldname.</value>
</member><member name="P:OnTrack.Database.ormEntryMapping.KeyEntries">
	<summary>
 Gets or sets the field name.
 </summary>
	<value>The fieldname.</value>
</member><member name="T:OnTrack.Database.ormEntryMapping">
	<summary>
 OTDBDataObject Attribute links a class variable to a datastore table and field
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormPropertyMappingAttribute.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormPropertyMappingAttribute.TableName">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="P:OnTrack.Database.ormPropertyMappingAttribute.Fieldname">
	<summary>
 Gets or sets the fieldname.
 </summary>
	<value>The fieldname.</value>
</member><member name="T:OnTrack.Database.ormPropertyMappingAttribute">
	<summary>
 Mapping a instance field member to a fieldname of a schema description
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.Enabled">
	<summary>
 Gets or sets the enabled.
 </summary>
	<value>The enabled.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.UseCache">
	<summary>
 Gets or sets the cache is active.
 </summary>
	<value>The is active.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.CacheProperties">
	<summary>
 Gets or sets the cache select.
 </summary>
	<value>cache.</value>
</member><member name="M:OnTrack.Database.ormSchemaTableAttribute.AddColumn(OnTrack.Database.ormSchemaTableColumnAttribute)">
	<summary>
 Add an entry by TabeColumn
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSchemaTableAttribute.UpdateColumn(OnTrack.Database.ormSchemaTableColumnAttribute)">
	<summary>
 Add an entry by TabeColumn
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSchemaTableAttribute.GetColumn(System.String,System.Boolean)">
	<summary>
 returns an entry by columnname or nothing
 </summary>
	<param name="columnname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSchemaTableAttribute.HasColumn(System.String,System.Boolean)">
	<summary>
 returns an entry by columnname or nothing
 </summary>
	<param name="columnname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSchemaTableAttribute.RemoveColumn(System.String)">
	<summary>
 remove an entry by columnname 
 </summary>
	<param name="columnname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.ColumnAttributes">
	<summary>
 returns a List of all Entries
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormSchemaTableAttribute.AddForeignKey(OnTrack.Database.ormSchemaForeignKeyAttribute)">
	<summary>
 Add an foreign key entry
 </summary>
	<param name="entry"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.ForeignKeyAttributes">
	<summary>
 returns a List of all Entries
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.PrimaryKeyColumnNames">
	<summary>
 returns the Names of the PrimaryKey Columns
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.ColumnNames">
	<summary>
 returns a List of all Entries
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.PrimaryKey">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.ObjectID">
	<summary>
 Gets or sets the object ID.
 </summary>
	<value>The object ID.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.TableName">
	<summary>
 Gets or sets the name of the table.
 </summary>
	<value>The name of the table.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.AddDomainBehavior">
	<summary>
 Gets or sets the add domain ID flag.
 </summary>
	<value>The add domain ID flag.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.AddDeleteFieldBehavior">
	<summary>
 sets or gets the add deletefield flag. This will add a field for deletion the record to the schema.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableAttribute.AddSpareFields">
	<summary>
 sets or gets the add ParameterField flag. 
 This will add extra fields for additional parameters (reserve and spare) to the data object.
 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormRelationAttribute.CreateObjectIfNotRetrieved">
	<summary>
 Gets or sets the create object if not retrieved flag - which means that the relation manager
 tries to create automaticaly objects we they cannot be retrieved (not existing).
 </summary>
	<value>The create object if not retrieved.</value>
</member><member name="P:OnTrack.Database.ormRelationAttribute.Enabled">
	<summary>
 Gets or sets the enabled.
 </summary>
	<value>The enabled.</value>
</member><member name="P:OnTrack.Database.ormRelationAttribute.CascadeOnUpdate">
	<summary>
 Gets or sets the cascade on update.
 </summary>
	<value>The cascade on update.</value>
</member><member name="P:OnTrack.Database.ormRelationAttribute.CascadeOnDelete">
	<summary>
 Gets or sets the cascade on delete.
 </summary>
	<value>The cascade on delete.</value>
</member><member name="P:OnTrack.Database.ormRelationAttribute.CascadeOnCreate">
	<summary>
 Gets or sets the cascade on create.
 </summary>
	<value>The cascade on create.</value>
</member><member name="P:OnTrack.Database.ormRelationAttribute.ToPrimaryKeys">
	<summary>
 Gets or sets to primary keys of the linkes object.
 </summary>
	<value>To primary keys.</value>
</member><member name="P:OnTrack.Database.ormRelationAttribute.ToEntries">
	<summary>
 Gets or sets to entries.
 </summary>
	<value>To entries.</value>
</member><member name="P:OnTrack.Database.ormRelationAttribute.FromEntries">
	<summary>
 Gets or sets from entries.
 </summary>
	<value>From entries.</value>
</member><member name="P:OnTrack.Database.ormRelationAttribute.LinkObject">
	<summary>
 Gets or sets the linkedwith object.
 </summary>
	<value>The linkedwith object.</value>
</member><member name="P:OnTrack.Database.ormRelationAttribute.LinkJoin">
	<summary>
 Gets or sets the link join.
 </summary>
	<value>The link join.</value>
</member><member name="P:OnTrack.Database.ormRelationAttribute.RetrieveOperation">
	<summary>
 Gets or sets the operation ID to call instead of select.
 </summary>
	<value>The link join.</value>
</member><member name="P:OnTrack.Database.ormRelationAttribute.CreateOperation">
	<summary>
 Gets or sets the operation ID to call instead to create an relation object if needed.
 </summary>
	<value>The link join.</value>
</member><member name="P:OnTrack.Database.ormRelationAttribute.Name">
	<summary>
 Gets the name.
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.ormRelationAttribute.TableName">
	<summary>
 Gets or sets the name of the table.
 </summary>
	<value>The name of the table.</value>
</member><member name="P:OnTrack.Database.ormRelationAttribute.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.Enabled">
	<summary>
 Gets or sets the enabled.
 </summary>
	<value>The enabled.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.TableName">
	<summary>
 Gets or sets the name of the table.
 </summary>
	<value>The name of the table.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.Description">
	<summary>
 Gets or sets the name of the table.
 </summary>
	<value>The name of the table.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.IsUnique">
	<summary>
 Gets or sets unique flag on this index.
 </summary>
	<value></value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.IsPrimaryKey">
	<summary>
 Gets or sets the primary key flag on this indeex.
 </summary>
	<value></value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.IndexName">
	<summary>
 Gets or sets the name.
 </summary>
	<value>The name.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnNames">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnName1">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnName2">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnName3">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnName4">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="P:OnTrack.Database.ormSchemaIndexAttribute.ColumnName5">
	<summary>
 Gets or sets the column names.
 </summary>
	<value>The column names.</value>
</member><member name="T:OnTrack.Database.ormSchemaIndexAttribute">
	<summary>
 Attributes for Schema Generation of an Index
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.Enabled">
	<summary>
 Gets or sets the enabled.
 </summary>
	<value>The enabled.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.ColumnName">
	<summary>
 Gets or sets the name of the column.
 </summary>
	<value>The name of the column.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.Posordinal">
	<summary>
 Gets or sets the pos ordinal.
 </summary>
	<value>The pos ordinal.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.DBDefaultValue">
	<summary>
 Gets or sets the default value in DB presentation.
 </summary>
	<value>The default value.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.Tablename">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.DataType">
	<summary>
 Gets or sets the Datatype.
 </summary>
	<value>The typeid.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.InnerDataType">
	<summary>
 Gets or sets the nested inner Datatype of Datatype list.
 </summary>
	<value>The typeid.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.Size">
	<summary>
 Gets or sets the size.
 </summary>
	<value>The size.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.Parameter">
	<summary>
 Gets or sets the parameter.
 </summary>
	<value>The parameter.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.IsNullable">
	<summary>
 Gets or sets the is nullable.
 </summary>
	<value>The is nullable.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.IsUnique">
	<summary>
 Gets or sets the Unique Property.
 </summary>
	<value></value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.UseForeignKey">
	<summary>
 Gets or sets the is foreign Key flag. References must be set
 </summary>
	<value></value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.ForeignKeyReferences">
	<summary>
 Gets or sets the foreign key reference.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.ForeignKeyProperties">
	<summary>
 Gets or sets the foreign key properties as string
 </summary>
	<value>string</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.ForeignKeyProperty">
	<summary>
 sets or gets the foreign key properties as list of ForeignKeyProperty
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.PrimaryKeyOrdinal">
	<summary>
 Gets or sets the primary key ordinal.
 </summary>
	<value>The primary key ordinal.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.Relation">
	<summary>
 Gets or sets the relation.
 </summary>
	<value>The relation.</value>
</member><member name="P:OnTrack.Database.ormSchemaTableColumnAttribute.Version">
	<summary>
 gets or sets the version counter
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormSchemaTableColumnAttribute">
	<summary>
 Attribute for Const fields to describe the schema
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.Enabled">
	<summary>
 Gets or sets the enabled.
 </summary>
	<value>The enabled.</value>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.Entrynames">
	<summary>
 Gets or sets the name of the column.
 </summary>
	<value>The name of the column.</value>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.ID">
	<summary>
 Gets or sets the ID
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.Tablename">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.ObjectID">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.UseForeignKey">
	<summary>
 Gets or sets the is foreign Key flag. References must be set
 </summary>
	<value></value>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.ForeignKeyReferences">
	<summary>
 Gets or sets the foreign key reference.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.ForeignKeyProperties">
	<summary>
 Gets or sets the foreign key properties as string
 </summary>
	<value>string</value>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.ForeignKeyProperty">
	<summary>
 sets or gets the foreign key properties as list of ForeignKeyProperty
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormSchemaForeignKeyAttribute.Version">
	<summary>
 gets or sets the version counter
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormSchemaForeignKeyAttribute">
	<summary>
 Attribute for Const fields to describe foreign keys with multiple keys
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.EntryType">
	<summary>
 Gets or sets the type of the entry.
 </summary>
	<value>The type of the entry.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.LookupCondition">
	<summary>
 Gets or sets the lookup condition.
 </summary>
	<value>The lookup condition.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.RenderRegExpPattern">
	<summary>
 Gets or sets the render reg exp pattern.
 </summary>
	<value>The render reg exp pattern.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.RenderRegExpMatch">
	<summary>
 Gets or sets the render reg exp match.
 </summary>
	<value>The render reg exp match.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Properties">
	<summary>
 Gets or sets the object entry properties.
 </summary>
	<value>The render properties.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.IsActive">
	<summary>
 Gets or sets the isActive flag
 </summary>
	<value>The render.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.IsReadOnly">
	<summary>
 Gets or sets the readonly flag
 </summary>
	<value>The render.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Render">
	<summary>
 Gets or sets the render.
 </summary>
	<value>The render.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.ValidateRegExp">
	<summary>
 Gets or sets the validate reg exp.
 </summary>
	<value>The validate reg exp.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.LookupPropertyStrings">
	<summary>
 Gets or sets the Lookup properties.
 </summary>
	<value>The validation properties.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.ValidationPropertyStrings">
	<summary>
 Gets or sets the validation properties.
 </summary>
	<value>The validation properties.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.PossibleValues">
	<summary>
 Gets or sets the possible values in string presentation as list
 </summary>
	<value>The values.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Values">
	<summary>
 Gets or sets the possible values in string presentation as array.
 </summary>
	<value>The values.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.UpperRange">
	<summary>
 Gets or sets the upper range.
 </summary>
	<value>The upper range.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.UpperRangeValue">
	<summary>
 Gets or sets the upper range as nullable
 </summary>
	<value>The upper range.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.LowerRangeValue">
	<summary>
 Gets or sets the lower range as nullable.
 </summary>
	<value>The lower range.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.LowerRange">
	<summary>
 Gets or sets the lower range.
 </summary>
	<value>The lower range.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Validate">
	<summary>
 Gets or sets the validate.
 </summary>
	<value>The validate.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.ObjectName">
	<summary>
 Gets or sets the name of the object.
 </summary>
	<value>The name of the object.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.DefaultValue">
	<summary>
 Gets or sets the default value in DB presentation.
 </summary>
	<value>The default value.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.EntryName">
	<summary>
 Gets or sets the name of the column.
 </summary>
	<value>The name of the column.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.XID">
	<summary>
 Gets or sets the name of the column.
 </summary>
	<value>The name of the column.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.KeyOrdinal">
	<summary>
 Gets or sets the primary key ordinal.
 </summary>
	<value>The primary key ordinal.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Posordinal">
	<summary>
 Gets or sets the pos ordinal.
 </summary>
	<value>The pos ordinal.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.SpareFieldTag">
	<summary>
 set or gets if this field is a spare field
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Title">
	<summary>
 Gets or sets the title.
 </summary>
	<value>The title.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Relation">
	<summary>
 Gets or sets the relation.
 </summary>
	<value>The relation.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Aliases">
	<summary>
 Gets or sets the aliases.
 </summary>
	<value>The aliases.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Version">
	<summary>
 gets or sets the version counter
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormObjectEntryAttribute.ToString">
	<summary>
 returns a String presentation of an ObjEctEntry Attribute
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Datatype">
	<summary>
 set the datatype for the objectentry attribute (stub)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.IsMapped">
	<summary>
 returns true if the Entry is mapped to a class member field
 </summary>
 Inherits iormPersistable -&gt; ObjectEntryAttribute is also covering this
 Inherits System.ComponentModel.INotifyPropertyChanged
 <returns></returns>
	<remarks></remarks>
	<value></value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.IsColumn">
	<summary>
 returns True if the Entry is a Column
 </summary>
	<returns></returns>
	<remarks></remarks>
	<value></value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.IsCompound">
	<summary>
 returns true if the Entry is a Compound entry
 </summary>
	<returns></returns>
	<remarks></remarks>
	<value></value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.Size">
	<summary>
 Gets or sets the size.
 </summary>
	<value>The size.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.SizeValue">
	<summary>
 Gets or sets the size as nullable.
 </summary>
	<value>The size.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.IsNullable">
	<summary>
 Gets or sets the is nullable.
 </summary>
	<value>The is nullable.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.InnerDatatype">
	<summary>
 Gets or sets the inner datatype.
 </summary>
	<value>The inner datatype.</value>
</member><member name="P:OnTrack.Database.ormObjectEntryAttribute.InnerDatatypeValue">
	<summary>
 Gets or sets the inner datatype as nullable.
 </summary>
	<value>The inner datatype.</value>
</member><member name="M:OnTrack.Database.ormObjectEntryAttribute.AbstractEntryDefinition_SetByAttribute(OnTrack.Database.ormObjectEntryAttribute)">
	<summary>
 Abstracts the entry definition_ set by attribute.
 </summary>
	<param name="attribute">The attribute.</param>
	<returns></returns>
</member><member name="M:OnTrack.Database.ormObjectEntryAttribute.OnswitchRuntimeOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handler for the OnSwitchRuntimeOff event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormObjectEntryAttribute">
	<summary>
 Attribute for Object Entry fields to describe the schema
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormObjectAttribute.PrimaryKeys">
	<summary>
 Gets or sets the primary keys.
 </summary>
	<value>The primary keys.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.IsActive">
	<summary>
 Gets or sets the is active.
 </summary>
	<value>The is active.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.DefaultPermission">
	<summary>
 Gets or sets the is active.
 </summary>
	<value>The is active.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.Properties">
	<summary>
 Gets or sets the object Properties
 </summary>
	<value>cache.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.IsBootstrap">
	<summary>
 Gets or sets bootstrap object flag.
 </summary>
	<value>The is active.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.UseCache">
	<summary>
 Gets or sets the cache is active.
 </summary>
	<value>The is active.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.CacheProperties">
	<summary>
 Gets or sets the cache select.
 </summary>
	<value>cache.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.Modulename">
	<summary>
 Gets or sets the modulename.
 </summary>
	<value>The modulename.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.AddDomainBehavior">
	<summary>
 Gets or sets the add domain behavior flag.
 </summary>
	<value>The add domain behavior flag.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.AddSpareFieldsBehavior">
	<summary>
 Gets or sets the spare fields flag.
 </summary>
	<value>The spare fields flag.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.AddDeleteFieldBehavior">
	<summary>
 Gets or sets the delete field flag.
 </summary>
	<value>The delete field flag.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.Title">
	<summary>
 Gets or sets the title.
 </summary>
	<value>The title.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.Tablenames">
	<summary>
 Gets or sets the tablenames.
 </summary>
	<value>The tablenames.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.ClassName">
	<summary>
 Gets or sets the name of the class.
 </summary>
	<value>The name of the class.</value>
</member><member name="P:OnTrack.Database.ormObjectAttribute.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="T:OnTrack.Database.ormObjectAttribute">
	<summary>
 Attribute for Const fields to describe the schema
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormObjectTransactionAttribute.Enabled">
	<summary>
 Gets or sets the enabled.
 </summary>
	<value>The enabled.</value>
</member><member name="P:OnTrack.Database.ormObjectTransactionAttribute.TransactionName">
	<summary>
 Gets or sets the name of the transaction.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormObjectTransactionAttribute.DefaultAllowPermission">
	<summary>
 Gets or sets bootstrap object flag.
 </summary>
	<value>The is active.</value>
</member><member name="P:OnTrack.Database.ormObjectTransactionAttribute.PermissionRules">
	<summary>
 Gets or sets the object Properties
 </summary>
	<value>cache.</value>
</member><member name="P:OnTrack.Database.ormObjectTransactionAttribute.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ormObjectTransactionAttribute.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormObjectTransactionAttribute.Title">
	<summary>
 Gets or sets the title.
 </summary>
	<value>The title.</value>
</member><member name="P:OnTrack.Database.ormObjectTransactionAttribute.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="T:OnTrack.Database.ormObjectTransactionAttribute">
	<summary>
 Attribute for Const fields to describe an object operation
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormObjectOperationMethodAttribute.ClassDescription">
	<summary>
 Gets or sets the A class description.
 </summary>
	<value>The A class description.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationMethodAttribute.UIVisible">
	<summary>
 Gets or sets the UI visible.
 </summary>
	<value>The UI visible.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationMethodAttribute.Properties">
	<summary>
 Gets or sets the Properties
 </summary>
	<value>The tag.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationMethodAttribute.Tag">
	<summary>
 Gets or sets the tag ( free search tag ).
 </summary>
	<value>The tag.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationMethodAttribute.TransactionID">
	<summary>
 Gets or sets the transaction ID
 </summary>
	<value>The tag.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationMethodAttribute.MethodInfo">
	<summary>
 Gets or sets the method info.
 </summary>
	<value>The method info.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationMethodAttribute.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationMethodAttribute.OperationName">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationMethodAttribute.ParameterEntries">
	<summary>
 Gets or sets to entries definition of the methods parameters - must match.
 </summary>
	<value>To entries.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationMethodAttribute.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationMethodAttribute.Title">
	<summary>
 Gets or sets the title.
 </summary>
	<value>The title.</value>
</member><member name="P:OnTrack.Database.ormObjectOperationMethodAttribute.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="T:OnTrack.Database.ormObjectOperationMethodAttribute">
	<summary>
 Attribute for Const fields to describe an object operation method - connects the opeation to different methods in the class
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormObjectQueryAttribute.Enabled">
	<summary>
 Gets or sets the enabled.
 </summary>
	<value>The enabled.</value>
</member><member name="P:OnTrack.Database.ormObjectQueryAttribute.Where">
	<summary>
 Gets or sets the where part of a query.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormObjectQueryAttribute.EntryNames">
	<summary>
 Gets or sets the object Properties
 </summary>
	<value>cache.</value>
</member><member name="P:OnTrack.Database.ormObjectQueryAttribute.AddAllFields">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ormObjectQueryAttribute.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Database.ormObjectQueryAttribute.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Database.ormObjectQueryAttribute.Orderby">
	<summary>
 Gets or sets the orderby.
 </summary>
	<value>The title.</value>
</member><member name="P:OnTrack.Database.ormObjectQueryAttribute.ID">
	<summary>
 Gets or sets the ID.
 </summary>
	<value>The ID.</value>
</member><member name="T:OnTrack.Database.ormObjectQueryAttribute">
	<summary>
 Attribute for Const fields to describe an Query for the Object Class
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormException.Path">
	<summary>
 Gets the path.
 </summary>
	<value>The path.</value>
</member><member name="P:OnTrack.Database.ormException.Subname">
	<summary>
 Gets the subname.
 </summary>
	<value>The subname.</value>
</member><member name="P:OnTrack.Database.ormException.Message">
	<summary>
 Gets the message.
 </summary>
	<value>The message.</value>
</member><member name="P:OnTrack.Database.ormException.InnerException">
	<summary>
 Gets the inner exception.
 </summary>
	<value>The inner exception.</value>
</member><member name="T:OnTrack.Database.ormException">
	<summary>
 ORMException is an Exception for the ORM LAyer
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.ormNoConnectionException">
	<summary>
 No Connection Excpetion
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormErrorEventArgs.Error">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="T:OnTrack.Database.ormErrorEventArgs">
	<summary>
 Event arguments for Ontrack error Events
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.PartID">
	<summary>
 gets the unique PARTID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.Domainid">
	<summary>
 sets or gets the domain id
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.DeliverableUID">
	<summary>
 sets or gets the linkes Deliverable UID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.Workpackage">
	<summary>
 gets or sets the workpackage code
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.Workspace">
	<summary>
 gets or sets the Workspace
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.Description">
	<summary>
 sets or gets the Description
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.CategoryID">
	<summary>
 gets or sets the category
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.Function">
	<summary>
 Gets or sets the function.
 </summary>
	<value>The function.</value>
</member><member name="P:OnTrack.Parts.Part.Responsible">
	<summary>
 sets or gets the responsible Person for the Part
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.ResponsibleOU">
	<summary>
 sets or gets the Responsible OU
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.BlockingItemID">
	<summary>
 Sets or gets the BlockingItem Reference
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.TypeID">
	<summary>
 sets or gets the Part-Type
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.Matchcode">
	<summary>
 sets or gets the MatchCode
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.ChangeReferenceID">
	<summary>
 gets or set the ChangeReferenceID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Parts.Part.Comment">
	<summary>
 gets or sets the general Comment
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Parts.Part.All(System.Boolean)">
	<summary>
 return all Parts as List
 </summary>
	<param name="isDeleted"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Parts.Part.AllByDeliverable(System.Int64,System.Boolean)">
	<summary>
 return a List of parts by deliverableUID
 </summary>
	<param name="deliverableUID"></param>
	<param name="isDeleted"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Parts.Part.Retrieve(System.String)">
	<summary>
 Load by Primary Key
 </summary>
	<param name="pnid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Parts.Part.Create(System.String,System.String,System.String)">
	<summary>
 Create an Object in the datastore
 </summary>
	<param name="partid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Parts.Part">
	<summary>
 part and assembly definition with reference link to deliverables
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.Guid">
	<summary>
 Gets the GUID for the Object.
 </summary>
	<value>T</value>
</member><member name="P:OnTrack.Database.ormDataObject.IsDomainIgnored">
	<summary>
 Sets the flag for ignoring the domainentry (delete on domain level)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.PrimaryTableStore">
	<summary>
 Gets the table store.
 </summary>
	<value>The table store.</value>
</member><member name="P:OnTrack.Database.ormDataObject.RunTimeOnly">
	<summary>
 True if a memory data object
 </summary>
	<value>The run time only.</value>
</member><member name="P:OnTrack.Database.ormDataObject.ObjectDefinition">
	<summary>
 returns the object definition associated with this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.ObjectEntryDefaultValue(System.String)">
	<summary>
 returns the default value for an Entry of this Object
 </summary>
	<param name="entryname"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.ObjectClassDescription">
	<summary>
 returns the object class description associated with this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.ContextIdentifier">
	<summary>
 sets or gets the context identifier
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.TupleIdentifier">
	<summary>
 sets or gets the context identifier
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.EntityIdentifier">
	<summary>
 sets or gets the context identifier
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.ObjectMessageLog">
	<summary>
 returns the object message log for this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.TableSchema">
	<summary>
 returns the tableschema associated with this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.DomainID">
	<summary>
 Gets or sets the domain ID.
 </summary>
	<value>The domain ID.</value>
</member><member name="P:OnTrack.Database.ormDataObject.DatabaseDriver">
	<summary>
  gets the DBDriver for the data object to use (real or the default dbdriver)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.IsInitialized">
	<summary>
 Gets or sets the PS is initialized.
 </summary>
	<value>The PS is initialized.</value>
</member><member name="P:OnTrack.Database.ormDataObject.ObjectID">
	<summary>
 returns the ObjectID of the Class of this instance
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.ObjectTag">
	<summary>
 returns the Object Tag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.IsDeleted">
	<summary>
 Gets or sets the isDeleted.
 </summary>
	<value>The isDeleted.</value>
</member><member name="P:OnTrack.Database.ormDataObject.ObjectHasDomainBehavior">
	<summary>
 returns true if object has domain behavior
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.UseCache">
	<summary>
 returns true if object is cached
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.ObjectHasDeletePerFlagBehavior">
	<summary>
 returns true if object has delete per flag behavior
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.IsChanged">
	<summary>
 Gets or sets the changed property
 </summary>
	<value>The PS is changed.</value>
</member><member name="P:OnTrack.Database.ormDataObject.ChangeTimeStamp">
	<summary>
 Gets the changed property time stamp
 </summary>
	<value>The PS is changed.</value>
</member><member name="P:OnTrack.Database.ormDataObject.IsLoaded">
	<summary>
 True if the Object was instanced by Retrieve
 </summary>
	<value>The PS is loaded.</value>
</member><member name="P:OnTrack.Database.ormDataObject.IsInfused">
	<summary>
 returns True if the Object is infused
 </summary>
	<value>The PS is created.</value>
</member><member name="P:OnTrack.Database.ormDataObject.IsCreated">
	<summary>
  returns True if the Object was Instanced by Create
 </summary>
	<value>The PS is created.</value>
</member><member name="M:OnTrack.Database.ormDataObject.Unload">
	<summary>
 unload the Dataobject from the datastore
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.Record">
	<summary>
 Gets or sets the OTDB record.
 </summary>
	<value>The OTDB record.</value>
</member><member name="P:OnTrack.Database.ormDataObject.ObjectPrimaryKeyEntrynames">
	<summary>
 returns an array of the primarykey entry names
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.ObjectPrimaryKeyValues">
	<summary>
 returns the primaryKeyvalues
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.SavedToHost">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.SerializeWithHostApplication">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.TableIDs">
	<summary>
 gets the associated tableids of this object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.PrimaryTableID">
	<summary>
 gets the TableID of the primary Table of this object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.MessageLogTag">
	<summary>
 sets or gets the messagelogtag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.CreatedOn">
	<summary>
 gets the Creation date in the persistence store
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.UpdatedOn">
	<summary>
 gets the last update date in the persistence store
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.DeletedOn">
	<summary>
 gets the deletion date in the persistence store
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.parameter_num1">
	<summary>
 gets or sets the additional spare parameter num1
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.parameter_num2">
	<summary>
 gets or sets the additional spare parameter num2
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.parameter_num3">
	<summary>
 gets or sets the additional spare parameter num3
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.parameter_date1">
	<summary>
 gets or sets the additional spare parameter date1
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.parameter_date2">
	<summary>
 gets or sets the additional spare parameter date2
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.parameter_date3">
	<summary>
 gets or sets the additional spare parameter date3
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.parameter_flag1">
	<summary>
 gets or sets the additional spare parameter flag1
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.parameter_flag3">
	<summary>
 gets or sets the additional spare parameter flag3
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.parameter_flag2">
	<summary>
 gets or sets the additional spare parameter flag2
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.parameter_txt1">
	<summary>
  gets or sets the additional spare parameter
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.parameter_txt2">
	<summary>
  gets or sets the additional spare parameter
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.ormDataObject.parameter_txt3">
	<summary>
  gets or sets the additional spare parameter
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Calendar.otCalendarEntryType">
	<summary>
 Enumeration of the Calendar Entry Types
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.Name">
	<summary>
 gets the name of the calendar of the entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.ID">
	<summary>
 gets the id of the calendar entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.Type">
	<summary>
 gets or sets the Entry Type of the calendar
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.Timestamp">
	<summary>
 Timestamp entry of the calendar
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.Datevalue">
	<summary>
 returns or sets the date portion of the timestamp
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.Length">
	<summary>
 length of an entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.Timevalue">
	<summary>
 returns the Timeportion
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.Description">
	<summary>
 sets or gets the description
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.Weekofyear">
	<summary>
 gets the week-of-year presentation of the timestamp as string
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.Week">
	<summary>
 gets the week number
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.WeekDay">
	<summary>
 gets the weekday
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.DayofYear">
	<summary>
 gets the day of year number
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.DayOfMonth">
	<summary>
 gets the Day of month number
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.Month">
	<summary>
 get the month as number
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.Year">
	<summary>
 gets the year as number
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.Quarter">
	<summary>
 gets the Quarter as number
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.Hour">
	<summary>
 gets the hour as number
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.Minute">
	<summary>
 gets the minutes as number
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.IsImportant">
	<summary>
 gets or sets the Important flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Calendar.CalendarEntry.IsNotAvailable">
	<summary>
 gets or sets the not available flag 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Calendar.CalendarEntry.OnRecordFed(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for record Fed
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Calendar.CalendarEntry.Retrieve(System.String,System.Int64,System.String)">
	<summary>
 loads and infuses the object
 </summary>
	<param name="Name"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Calendar.CalendarEntry.All">
	<summary>
 Return a Collection of all Calendar Entries
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Calendar.CalendarEntry.AvailableDays(System.DateTime,System.DateTime,System.String,System.String)">
	<summary>
 Returns the number of available days between two dates
 </summary>
	<param name="fromdate"></param>
	<param name="untildate"></param>
	<param name="name">default calendar</param>
	<returns>days in long</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Calendar.CalendarEntry.NextAvailableDate(System.DateTime,System.Int32,System.String,System.String)">
	<summary>
 returnss the next available date from a date in no of  days
 </summary>
	<param name="fromdate">From Date</param>
	<param name="noDays">number of days</param>
	<param name="Name">default calendar</param>
	<returns>next date</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Calendar.CalendarEntry.IsAvailableOn(System.DateTime,System.String,System.String)">
	<summary>
 isAvailable looks for otDayEntries showing availibility
 </summary>
	<param name="refdate"></param>
	<param name="Name">default calendar</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Calendar.CalendarEntry.HasDate(System.DateTime,System.String,System.String)">
	<summary>
 Returns True if the Calendar has the referenced date as a valid date
 </summary>
	<param name="refDate"></param>
	<param name="name"></param>
	<param name="domainID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Calendar.CalendarEntry.AllByDate(System.DateTime,System.String,System.String)">
	<summary>
 returns all calendar entries by refence date
 </summary>
	<param name="refDate"></param>
	<param name="name"></param>
	<returns>a collection of objects</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Calendar.CalendarEntry.GenerateDays(System.DateTime,System.DateTime,System.String,System.String)">
	<summary>
 Initialize the calendar with dates from a date until a date
 </summary>
	<param name="fromdate">from date to initalize</param>
	<param name="untildate">to date </param>
	<param name="name">name of the calendar (optional)</param>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Calendar.CalendarEntry.Create(System.String,System.Int64,System.String)">
	<summary>
 Creates an persistable calendar entry
 </summary>
	<param name="name">name of calendar</param>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Calendar.CalendarEntry">
	<summary>
 Calendar Entry Class
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormDataObject._record">
	<summary>
 important objects to drive data object behavior
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormDataObject._guid">
	<summary>
 guid as identity
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormDataObject._primaryTableID">
	<summary>
 tables for storing the record in 
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormDataObject._classDescription">
	<summary>
 cached links and objects
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormDataObject._isCreated">
	<summary>
 liefetime status and valiables
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormDataObject._persistInHostApplication">
	<summary>
 members to check interaction to COM Host Application
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormDataObject._contextidentifier">
	<summary>
 identifier for ormLoggable
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormDataObject.ConstFNDomainID">
	<summary>
 Persistence Data Definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormDataObject.ConstFNParamText1">
	<summary>
 Spare member entries
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormDataObject.ConstFNMSGLOGTAG">
	<summary>
 MSG LOG TAG
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormDataObject.ConstFNUpdatedOn">
	<summary>
 Member Entries to drive lifecycle
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormDataObject._updatedOn">
	<summary>
 ColumnMapping
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormDataObject.ConstOPCreate">

 Transactions DEFAULTS
 

</member><member name="F:OnTrack.Database.ormDataObject.ConstQRYAll">
 Queries
 

</member><member name="F:OnTrack.Database.ormDataObject.ConstOPGetObjectMessages">
	<summary>
 Operation Constants
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Database.ormDataObject.ConstRMessageLog">
	<summary>
 Relation to ScheduleDefinition
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Finialize">
	<summary>
 clean up with the object
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
	<summary>
 dynamic getValue Property
 </summary>
	<param name="binder"></param>
	<param name="result"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
	<summary>
 Dynamic setValue Property
 </summary>
	<param name="binder"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.GetCompoundValue(System.String)">
	<summary>
 returns the value of the compound entry name
 </summary>
	<param name="entryname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.SetCompoundValue(System.String,System.Object)">
	<summary>
 sets the value of the compound entry name
 </summary>
	<param name="entryname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.NormalizeValue(System.String,System.Object@)">
	<summary>
 normalize a value and apply EntryProperties
 </summary>
	<param name="entryname"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.MergeRecord(OnTrack.Database.ormRecord)">
	<summary>
 Merge Values of an record in own record
 </summary>
	<param name="record"></param>
	<returns>True if successfull </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.DetermineLiveStatus">
	<summary>
 sets the Livecycle status of this object if created or loaded
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.IsAlive(System.String,System.Boolean)">
	<summary>
 checks if the data object is alive
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Initialize(System.Boolean)">
	<summary>
 initialize the data object
 </summary>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.InjectDataObject``1(System.Object[],System.String,OnTrack.Database.iormDatabaseDriver)">
	<summary>
 injects a iormpersistable DataObject by Type and Primary Key-Array
 </summary>
	<typeparam name="T"></typeparam>
	<param name="pkArray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Persist(System.Nullable{System.DateTime},System.Boolean)">
	<summary>
 Persist the object to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.CreateDataObjectSchema``1(System.Boolean,OnTrack.Database.iormDatabaseDriver)">
	<summary>
 shared create the schema for this object by reflection
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.AddSwitchRuntimeOffhandler(System.Delegate)">
	<summary>
 Helper for Adding Handlers to SwitchRuntimeOff Event
 </summary>
	<param name="handler"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.SwitchRuntimeOff">
	<summary>
 Switch off the Runtime Mode
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.SwitchRuntimeON">
	<summary>
 set the dataobject to Runtime
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.CreateDataObject(System.Object[]@,System.Type,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
	<summary>
 create a dataobject from a type
 </summary>
	<param name="pkArray"></param>
	<param name="type"></param>
	<param name="domainID"></param>
	<param name="checkUnique"></param>
	<param name="runtimeOnly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.CreateDataObject``1(System.Object[]@,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
	<summary>
 create a persistable dataobject of type T 
 </summary>
	<typeparam name="T"></typeparam>
	<param name="pkArray"></param>
	<param name="checkUnique"></param>
	<returns>the iotdbdataobject or nothing (if checkUnique)</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.CopyPrimaryKeyToRecord(System.Object[]@,OnTrack.Database.ormRecord@,System.String,System.Boolean)">
	<summary>
 copy the Primary key to the record
 </summary>
	<param name="pkArray"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.CheckUniqueness(System.Object[],OnTrack.Database.ormRecord,System.Boolean)">
	<summary>
 helper for checking the uniqueness during creation
 </summary>
	<param name="pkarray"></param>
	<param name="runtimeOnly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.ExtractPrimaryKey(OnTrack.Database.ormRecord,System.String,System.Boolean)">
	<summary>
 extract out of a record a Primary Key array
 </summary>
	<param name="record"></param>
	<param name="runtimeOnly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Retrieve``1(System.Object[],System.String,OnTrack.Database.iormDatabaseDriver,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
	<summary>
 Retrieve a data object from the cache or load it
 </summary>
	<typeparam name="T"></typeparam>
	<param name="pkArray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.CloneDataObject``1(OnTrack.Database.iormCloneable{``0},System.Object[])">
	<summary>
 clone a dataobject with a new pkarray. return nothing if fails
 </summary>
	<typeparam name="T"></typeparam>
	<param name="cloneobject"></param>
	<param name="newpkarray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.CloneObject(System.Object[],System.Nullable{System.Boolean})">
	<summary>
 this method must be overritten
 </summary>
	<param name="newpkarray"></param>
	<param name="runtimeOnly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Undelete">
	<summary>
 Undelete the data object
 </summary>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Delete(System.Nullable{System.DateTime})">
	<summary>
 Delete the object and its persistancy
 </summary>
	<returns>True if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.InfuseColumnMapping(OnTrack.Database.otInfuseMode)">
	<summary>
 infuse a data objects object entry column mapped members
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.InfusePrimaryKeys(OnTrack.Database.iormPersistable@,System.Object[]@,System.Boolean)">
	<summary>
 infuse a data objects objectentry column mapped members
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.InfuseDataObject(OnTrack.Database.ormRecord@,OnTrack.Database.iormPersistable@,System.Nullable{OnTrack.Database.otInfuseMode})">
	<summary>
 infuse a data object by a record - use reflection and cache. Substitute data object if it is in cache
 </summary>
	<param name="dataobject"></param>
	<param name="record"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Feed(OnTrack.Database.ormRecord)">
	<summary>
 Feed the record belonging to the data object
 </summary>
	<returns>True if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.FeedRecordDataObject(OnTrack.Database.iormPersistable@,OnTrack.Database.ormRecord@)">
	<summary>
 feed the record from the field of an data object - use reflection of attribute otfieldname
 </summary>
	<param name="dataobject"></param>
	<param name="record"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.Infuse(OnTrack.Database.ormRecord@,System.Nullable{OnTrack.Database.otInfuseMode})">
	<summary>
 infuses a data object by a record
 </summary>
	<param name="Record">a fixed ormRecord with the persistence data</param>
	<returns>true if successful</returns>
	<remarks>might be overwritten by class descendants but make sure that you call mybase.infuse</remarks>
</member><member name="M:OnTrack.UI.UIWinFormMessageBox.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:OnTrack.UI.UIWinFormMessageBox.Type">
	<summary>
 Gets or sets the type.
 </summary>
	<value>The type.</value>
</member><member name="P:OnTrack.UI.UIWinFormMessageBox.Title">
	<summary>
 Gets or sets the title.
 </summary>
	<value>The title.</value>
</member><member name="M:OnTrack.UI.UIWinFormMessageBox.CloseOTDBForm">
	<summary>
 Close the Form
 </summary>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.UI.UIWinFormMessageBox.RefreshOTDBForm">
	<summary>
 Refresh the Form
 </summary>
	<remarks></remarks>
	<returns></returns>
</member><member name="P:OnTrack.UI.UIWinFormMessageBox.Message">
	<summary>
 Gets or sets the message.
 </summary>
	<value>The message.</value>
</member><member name="P:OnTrack.UI.UIWinFormMessageBox.Buttons">
	<summary>
 Gets or sets the buttons.
 </summary>
	<value>The buttons.</value>
</member><member name="P:OnTrack.UI.UIWinFormMessageBox.Result">
	<summary>
 Gets or sets the answer.
 </summary>
	<value>The answer.</value>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.LoadbyDependant(System.String)">
	<summary>
 Load by Dependant to by partid
 </summary>
	<param name="partid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.LoadbyDependingFrom(System.String)">
	<summary>
 Loads Dependency outgoing from a partid
 </summary>
	<param name="partid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.Persist(System.DateTime)">
	<summary>
 Persists the dependency object
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.Create(System.String)">
	<summary>
 Create a Dependency persistable
 </summary>
	<param name="pnid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependency.Status(System.String)">
	<summary>
 retrieves the Status of the dependency structure
 </summary>
	<param name="typeid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.Inject(System.String,System.String,System.Int64)">
	<summary>
 Loads a Depend Member by Primary Key
 </summary>
	<param name="TYPEID"></param>
	<param name="PARTID"></param>
	<param name="POSNO"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.allHeadsByTypeID(System.String)">
	<summary>
 retrieves a collection of head members by dependency typeid
 </summary>
	<param name="typeid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.CreateSchema(System.Boolean)">
	<summary>
  create static persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.Persist(System.DateTime)">
	<summary>
 persist to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.Create(System.String,System.String,System.Int64,System.String)">
	<summary>
 Create a persistence object
 </summary>
	<param name="TYPEID"></param>
	<param name="PARTID"></param>
	<param name="POSNO"></param>
	<param name="dependfromPartID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependMember.GetDependCheck(System.String)">
	<summary>
 get the latest DependCheck of Type
 </summary>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.Initialize">
	<summary>
 Initialize
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.Inject(System.String,System.String,System.Int64,System.Int64,System.Int64)">
	<summary>
 load a DependCheck by primary key
 </summary>
	<param name="typeid"></param>
	<param name="partid"></param>
	<param name="posno"></param>
	<param name="uid"></param>
	<param name="updc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.AllHeadByClusterID(System.String,System.String,System.String)">
	<summary>
 retrieve just the DependCheckHeads by ClusterID
 </summary>
	<param name="typeid"></param>
	<param name="clusterid"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.CreateSchema(System.Boolean)">
	<summary>
 create persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.clsOTDBDependCheck.Persist(System.DateTime)">
	<summary>
 Persist the object to the datastore
 </summary>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.otMilestoneType">
	<summary>
 enumeration of milestone types
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.otScheduleLinkType">
	<summary>
 Enumeration and other definitions
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.MileStoneDefinition.ConstTableID">
	<summary>
 Table Definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.MileStoneDefinition.ConstFNID">
	<summary>
 primary keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.MileStoneDefinition.ConstFNDescription">
	<summary>
 fields
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.MileStoneDefinition._relationpath">
 relation path for compound data 

</member><member name="P:OnTrack.Scheduling.MileStoneDefinition.Title">
	<summary>
 Gets or sets the title.
 </summary>
	<value>The title.</value>
</member><member name="P:OnTrack.Scheduling.MileStoneDefinition.Ordinal">
	<summary>
 Gets or sets the ordinal.
 </summary>
	<value>The ordinal.</value>
</member><member name="P:OnTrack.Scheduling.MileStoneDefinition.AttachedObjectids">
	<summary>
 Gets or sets the objectids where milestone might be attached - becomes compounds.
 </summary>
	<value>The objectids.</value>
</member><member name="P:OnTrack.Scheduling.MileStoneDefinition.ID">
	<summary>
 gets  the ID of the Milestone
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.MileStoneDefinition.Typeid">
	<summary>
 sets or gets the type of the milestone
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.MileStoneDefinition.IsDate">
	<summary>
 returns True if the Milestone is a date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.MileStoneDefinition.IsStatus">
	<summary>
 returns true if the milestone is a status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.MileStoneDefinition.IsActual">
	<summary>
 returns true if the milestone is an actual milestone
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.MileStoneDefinition.IsForecast">
	<summary>
 gets or sets true if the milestone is a forecast
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.MileStoneDefinition.Description">
	<summary>
 sets or gets the description of the milestone
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.MileStoneDefinition.statustypeid">
	<summary>
 gets or sets the status type id
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.MileStoneDefinition.MileStoneDefinition_OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 the on created handler to set the  datatypes
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.MileStoneDefinition.MileStoneDefinition_OnDefaultValuesNeeded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handles the default value needed event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.MileStoneDefinition.CreateCompoundStructure">
	<summary>
 Creates the Compound Structure for the Milestone Definition
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.MileStoneDefinition.MileStoneDefinitoin_OnPersisted(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnPersisted Handler to add the Properties as Compounds to the ObjectIDs
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.MileStoneDefinition.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Retrieve
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.MileStoneDefinition.All(System.String)">
	<summary>
 Return a collection of all def Milestones
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.MileStoneDefinition.Create(System.String,System.String)">
	<summary>
 create persistable object with primary key ID
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.MileStoneDefinition">
	<summary>
 milestone definition class
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleMilestoneDefinition.ConstTableID">
	<summary>
 table definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleMilestoneDefinition.ConstFNType">
	<summary>
 primary keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleMilestoneDefinition.ConstFNDesc">
	<summary>
 fields
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleMilestoneDefinition._scheduletype">
	<summary>
 Mapping
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleMilestoneDefinition._scheduledefinition">
	<summary>
 dynamic data
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestoneDefinition.DefaultValue">
	<summary>
 Gets or sets the default value in string.
 </summary>
	<value>The default value.</value>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestoneDefinition.ScheduleTypeID">
	<summary>
 gets the schedule type
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestoneDefinition.ID">
	<summary>
 gets the Milestone ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestoneDefinition.ActualOfFC">
	<summary>
 gets or sets the actual milestone id (counterpart) a forecast milestone
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestoneDefinition.IsActual">
	<summary>
 returns true if actual
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestoneDefinition.IsForecast">
	<summary>
 gets or sets if the milestone is a forecast
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestoneDefinition.IsFinish">
	<summary>
 gets or set the flag for marking the milestone as end milestone
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestoneDefinition.IsMandatory">
	<summary>
 gets or sets the mandatory flag for the milestone
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestoneDefinition.IsProhibited">
	<summary>
 gets or sets the prohibited flag for this milestone in the schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestoneDefinition.IsFacultative">
	<summary>
 gets or sets the faculatative flag for this milestone
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestoneDefinition.IsOutputDeliverable">
	<summary>
 gets or set the outdeliverable flag for this milestone in this schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestoneDefinition.IsInputDeliverable">
	<summary>
 gets or sets the input deliverable flag for this milestone in this schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestoneDefinition.Description">
	<summary>
 gets or sets the description
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestoneDefinition.Ordinal">
	<summary>
 gets or sets the ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestoneDefinition.ScheduleMilestoneDefinition_OnCreating(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handles OnCreating 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestoneDefinition.ScheduleMilestoneDefinition_OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handles OnCreated and Relation to ConfigSet
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestoneDefinition.ScheduleMilestoneDefinition_OnInfused(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handles OnCreating and Relation to ConfigSection
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestoneDefinition.Retrieve(System.String,System.String,System.String,System.Boolean)">
	<summary>
 Retrieve
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestoneDefinition.GetMilestoneDefinition">
	<summary>
 retrieve related Milestone Definition Object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestoneDefinition.All">
	<summary>
 retrieve a collection of all schedule milestone definition objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestoneDefinition.Create(System.String,System.String,System.String)">
	<summary>
 create the persistable object
 </summary>
	<param name="SCHEDULETYPE"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.ScheduleMilestoneDefinition">
	<summary>
 Definition of a  milestone per schedule definition class
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleDefinition.ConstTableID">
	<summary>
 TableDefinition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleDefinition.ConstFNType">
	<summary>
 keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleDefinition.ConstFNDescription">
	<summary>
 fields
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleDefinition._scheduletype">
	<summary>
 Mappings
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleDefinition.ConstRMilestones">
	<summary>
 Relations
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleDefinition.Autopublish">
	<summary>
 Gets or sets the autopublish flag.
 </summary>
	<value>The autopublish.</value>
</member><member name="P:OnTrack.Scheduling.ScheduleDefinition.ID">
	<summary>
 gets the schedule Type ID 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleDefinition.Description">
	<summary>
 gets or sets the description
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleDefinition.isNoSchedule">
	<summary>
 gets the Floag for no active Schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleDefinition.NoMembers">
	<summary>
 returns the number of milestones
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleDefinition.Milestones">
	<summary>
 returns the Milestones of this schedule definition
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleDefinition.MilestonesOrderedByOrdinal">
	<summary>
 gets the Milestones ordered by their ordinal
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.GetActualFinishID">
	<summary>
 returns the actual milestone which finishes the schedule
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.GetFCFinishID(System.String)">
	<summary>
 returns the actual milestone which finishes the schedule
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.GetMaximumMilestoneOrdinal">
	<summary>
 returns the maximum ordinal
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.GetMilestoneIDByAlias(System.String)">
	<summary>
 legacy function
 </summary>
	<param name="AliasID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleDefinition.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Retrieve
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.ScheduleDefinition">
	<summary>
 schedule definition object
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleEdition.ConstTableID">
	<summary>
 TableDefinition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleEdition.ConstFNUid">
	<summary>
 Keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleEdition.ConstFNfcupdc">
	<summary>
 fields
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleEdition._uid">
	<summary>
 Mappings
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleEdition.ConstRMilestones">
	<summary>
 Relation to schedule milestones
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleEdition.ConstRScheduleDefinition">
	<summary>
 Relation to schedule definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleEdition.ConstRLifeCycleSatus">
	<summary>
 Relation to LifeCycle StatusItem
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleEdition.ConstRProcessSatus">
	<summary>
 Relation to Process StatusItem
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleEdition.ConstOPGetMileStoneValue">
	<summary>
 Define the constants for accessing the compounds
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.Uid">
	<summary>
 gets the UID of the schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.Comment">
	<summary>
 gets or sets the comment for this schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.WorkspaceID">
	<summary>
 gets or sets the workspace for the schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.NoMilestones">
	<summary>
 gets the number of milestones in the schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.IsForecastChanged">
	<summary>
 returns true if the the forecast is changed since Inject / last persist
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.Typeid">
	<summary>
 returns the type id of the schedule type of this schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.ScheduleDefinition">
	<summary>
 retrieve the related Schedule Definition object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.LoadedFromHost">
	<summary>
 get the loaded from Host Application flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.RequiredCapacity">
	<summary>
 gets or sets the required capaciyty
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.UsedCapacity">
	<summary>
 gets or sets the used capacity
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.UsedCapacityRefDate">
	<summary>
 gets or sets the used capacity reference date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.Revision">
	<summary>
 gets or sets the planning revision
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.Planner">
	<summary>
 gets or sets the planner
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.ProcessStatusCode">
	<summary>
 getrs or sets the process status code
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.ProcessStatus">
	<summary>
 gets or sets the process status item of the schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.LifeCycleStatusCode">
	<summary>
 gets or sets the lifecycle status code of the schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.LifeCycleStatus">
	<summary>
 gets or sets the lifecycle status of the schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.IsFrozen">
	<summary>
 gets or sets the isfrozen flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.IsBaseline">
	<summary>
 gets or sets the Baseline flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.StatusCheckedOn">
	<summary>
 gets or sets the status checked date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.BaselineRefDate">
	<summary>
 gets or sets the baseline reference date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.BaselineUPDC">
	<summary>
 gets or sets the baseline updc
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.LastForecastUpdate">
	<summary>
 gets or sets the last forecast update date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.FCupdc">
	<summary>
 gets the forecast update count
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.Updc">
	<summary>
 gets the updc
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.HaveMileStonesChanged">
	<summary>
 true if a milestone was changed after last load / persist / publish
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleEdition.Milestones">
	<summary>
 gets the Milestones of this schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.RetrieveMilestoneValue(System.String,System.Object@)">
	<summary>
 operation to Access the Milestone's Value
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.GetScheduleMilestoneDefinition(System.String)">
	<summary>
 retrieve the related Schedule Milestone Definition Object
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.Request_Perist(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 event handler for persisting this schedule
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.GetMilestoneValue(System.String,System.Boolean)">
	<summary>
 milestone returns the Milestone Value as object or Null if not exists
 </summary>
	<param name="ID"></param>
	<param name="ORIGINAL"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.SetMilestoneValue(System.String,System.Object,System.Boolean)">
	<summary>
 setMilestone ID to Value
 </summary>
	<param name="ID"></param>
	<param name="Value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.MoveMilestone(System.Int64,System.String,System.Boolean)">
	<summary>
 move the milestone in date range
 </summary>
	<param name="noDays"></param>
	<param name="MSID"></param>
	<param name="considerWorkingDays"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.MoveSchedule(System.Int64,System.String,System.Boolean)">
	<summary>
 move the full schedule in date range
 </summary>
	<param name="noDays"></param>
	<param name="startMS"></param>
	<param name="considerWorkingDays"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.GetDefScheduleMSbyOrder(System.Boolean)">
	<summary>
 getDefScheduleMSbyOrder returns a Collection of ScheduleMilestones by Orderno
 </summary>
	<param name="justDates"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.AllByUID(System.Int64)">
	<summary>
 return a collection of all schedule editions of a schedule uid
 </summary>
	<param name="UID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.LoadMilestones(System.String)">
	<summary>
 load all Milestones as Members -&gt; look for Actuals access
 </summary>
	<param name="scheduletypeid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.ScheduleEdition_OnDefaultValuesNeeded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handles the defaults needed event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.Schedule_OnRelationLoad(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 event handler for relation loaded
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.Schedule_OnMilestoneAdded(System.Object,OnTrack.Database.ormRelationCollection{OnTrack.Scheduling.ScheduleMilestone}.EventArgs)">
	<summary>
 Event Handler for the Added Milestones
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.Retrieve(System.Int64,System.Int64)">
	<summary>
 loads an schedule from store
 </summary>
	<param name="UID"></param>
	<param name="updc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.CreateDefaultMilestones">
	<summary>
 creates all the default milestones for this schedule dependend on the schedule type
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.Schedule_OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handles the OnCreated Event to create also all the milestones dependend on the schedule type
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.Schedule_OnEntryChanged(System.Object,OnTrack.Database.ormDataObjectEntryEventArgs)">
	<summary>
 Property Change Handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.Schedule_OnCreating(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handles the OnCreated Event to create also all the milestones dependend on the schedule type
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.HasMilestone(System.String,OnTrack.Scheduling.otMilestoneType,System.Boolean)">
	<summary>
 if the milestone by id exists
 </summary>
	<param name="ID"></param>
	<param name="MSTYPEID"></param>
	<param name="HASDATA"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.HasMilestoneDate(System.String)">
	<summary>
 has the Milestone date data ?!
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.IsMilestoneValueMissing(System.String,System.Boolean)">
	<summary>
 returns true if the milestone has no data or does not exist (optional ifNotExists)
 </summary>
	<param name="ID"></param>
	<param name="ifNotExists"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.FinishOn">
	<summary>
 returns the finish forecast date of the schedule
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.FinishedOn">
	<summary>
 returns the actual finished date of the schedule
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.IsFinished">
	<summary>
 is the schedule finished
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.GetTimeInterval(System.String)">
	<summary>
 LEGACY HACK ! timeinterval for the task
 </summary>
	<param name="TaskTypeID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.DrawBaseline(OnTrack.ObjectMessageLog@,System.DateTime,System.DateTime,System.Boolean)">
	<summary>
 creates out of this Schedule a new Baseline and updates all other Objects
 </summary>
	<param name="MSGLOG"></param>
	<param name="REFDATE"></param>
	<param name="TIMESTAMP"></param>
	<param name="ForceSerializeToOTDB"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.IncreaseRevison(System.Boolean,System.Boolean)">
	<summary>
 increase revision in Form VXX.YY
 </summary>
	<param name="MajorFlag"></param>
	<param name="MinorFlag"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.ScheduleEdtion_OnMessageAdded(System.Object,OnTrack.ObjectMessageLog.EventArgs)">
	<summary>
 Handles the ObjectMessage Added Event and sets the status here
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.CheckScheduleLifeCycle(OnTrack.ObjectMessageLog)">
	<summary>
 checks the schedule edition on the lifecycle status
 </summary>
	<param name="msglog"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.CheckScheduleProcessStatus(OnTrack.ObjectMessageLog)">
	<summary>
 checks the schedule edition on the lifecycle status
 </summary>
	<param name="msglog"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.CheckScheduleStatus(OnTrack.ObjectMessageLog)">
	<summary>
 checks and sets the new validation status
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.ScheduleEdition_OnValidated(System.Object,OnTrack.Database.ormDataObjectValidationEventArgs)">
	<summary>
 Validated Event Handler for the Object itself
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.Schedule_OnFeeding(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Feeding Event 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.ScheduleEdition_OnPersisted(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 onPersisted Handler for reseting
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.Clone(System.Object[],System.Nullable{System.Boolean})">
	<summary>
 clones an object
 </summary>
	<param name="pkarray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.CloneToWorkspace(System.String,System.Int64,System.Int64,System.Boolean)">
	<summary>
 clone this schedule to a specific workspaceID by id
 </summary>
	<param name="workspaceID"></param>
	<param name="UID"></param>
	<param name="updc"></param>
	<param name="setCurrSchedule"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleEdition.GetMaxUpdc(System.Int64,System.Int64@,System.String)">
	<summary>
 retrieve maximum update count from the datastore
 </summary>
	<param name="max">the max to be set</param>
	<param name="workspaceID">optional workspaceID</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.ScheduleEdition">
	<summary>
 schedule class
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleMilestone.constTableID">
	<summary>
 Table
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleMilestone.ConstFNUid">
	<summary>
 Primary KEys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleMilestone.ConstFNvalue">
	<summary>
 Fields
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.IsValid">
	<summary>
 Gets or sets the isvalid.
 </summary>
	<value>The isvalid.</value>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.Typeid">
	<summary>
 Gets or sets the type id of the milestone type.
 </summary>
	<value>The typeid.</value>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.IsCacheNoSave">
	<summary>
 returns true if this is a cache and will not be saved
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.ScheduleEdition">
	<summary>
 Gets or sets the scheduleedition.
 </summary>
	<value>The scheduleedition.</value>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.ScheduleMilestoneDefinition">
	<summary>
 retrieves the schedule milestone definition for this milestone.
 </summary>
	<value>schedule milestone edition.</value>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.IsFinishingMilestone">
	<summary>
 returns true if this milestone is a finishing milestone of the schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.UID">
	<summary>
 get the uid 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.Updc">
	<summary>
 get the updc of the schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.ID">
	<summary>
 gets the ID of the Milestone
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.WorkspaceID">
	<summary>
 gets or sets the Workspace ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.Value">
	<summary>
 gets or sets the value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.Datatype">
	<summary>
 gets or sets the datatype
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.Comment">
	<summary>
 gets or sets the comment
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.IsForecast">
	<summary>
 gets or sets the forecast flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.IsActual">
	<summary>
 returns true if the milestone is a actual
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.IsStatus">
	<summary>
 returns true if the milestone is a status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.IsDate">
	<summary>
 returns true if the milestone is a status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleMilestone.IsEnabled">
	<summary>
 returns true if the milestone is enabled
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.Initialize">
	<summary>
 Initialize the data object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.ScheduleMilestone_OnDefaultValuesNeeded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handles the default values needed event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.Retrieve(System.Int64,System.Int64,System.String)">
	<summary>
 Load and infuse the schedule milestone from the data store by primary key
 </summary>
	<param name="UID"></param>
	<param name="updc"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.ScheduleMilestone_OValidated(System.Object,OnTrack.Database.ormDataObjectValidationEventArgs)">
	<summary>
 Validating Object Handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.ScheduleMilestone_OnEntryValidating(System.Object,OnTrack.Database.ormDataObjectEntryValidationEventArgs)">
	<summary>
 Validated Entry Event Handler 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.ScheduleMilestone_OnEntryValidated(System.Object,OnTrack.Database.ormDataObjectEntryValidationEventArgs)">
	<summary>
 Validated Entry Event Handler 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.Clone(System.Int64,System.Int64,System.String)">
	<summary>
 Clone the schedule milestone by new primary key
 </summary>
	<param name="UID"></param>
	<param name="updc"></param>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleMilestone.Clone(System.Object[],System.Nullable{System.Boolean})">
	<summary>
 clone the data object by primary key array
 </summary>
	<param name="pkArray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.ScheduleMilestone">
	<summary>
 Schedule Milestone Class (runtime data of a schedule)
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleLink.ConstFNFromObjectID">
 from Section
 

</member><member name="F:OnTrack.Scheduling.ScheduleLink.ConstFNToObjectID">
	<summary>
 fields
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleLink._fromObjectID">
	<summary>
 Mapping
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleLink.ConstRWorkspaceSchedules">
	<summary>
 Relation to WorkspaceSchedules per Workspace (this is not complete since workspaces are resolved by retrieved)
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.ScheduleLink.ConstRWorkspaceSchedule">
	<summary>
 Relation to WorkspaceSchedule on Compound Path - infused by event
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleLink.Type">
	<summary>
 Gets or sets the type.
 </summary>
	<value>The type.</value>
</member><member name="P:OnTrack.Scheduling.ScheduleLink.FromObjectID">
	<summary>
 gets the linking Object ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleLink.FromUID">
	<summary>
 gets linking Object UID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleLink.FromMilestone">
	<summary>
 gets the linking Milestone or "" if none
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleLink.ToObjectID">
	<summary>
 gets or sets the linked Object ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleLink.ToUid">
	<summary>
 gets or sets the linking object UID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleLink.ToMilestoneID">
	<summary>
 gets or sets the linking Milestone or "" if not applicable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.ScheduleLink.WorkspaceSchedule(System.String)">
	<summary>
 retrieves the linked Schedule
 </summary>
	<param name="workspaceid"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleLink.ScheduleLink_OnWorkspaceChanged(System.Object,OnTrack.SessionEventArgs)">
	<summary>
 Event Handler for OnWorkspace Changed from the Session
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleLink.ScheduleLink_WorkspaceSchedulePersist(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 event handler for related schedule persist
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleLink.ScheduleLink_OnRelationRetrieveNeeded(System.Object,OnTrack.Database.ormDataObjectRelationEventArgs)">
	<summary>
 Event Handler for the RelationRetrieveNeeded event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.ScheduleLink.ScheduleLink_OnRelationCreateNeeded(System.Object,OnTrack.Database.ormDataObjectRelationEventArgs)">
	<summary>
 Event Handler for the RelationRetrieveNeeded event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.ScheduleLink">
	<summary>
 the current schedule class links the current schedule updc to a scheduled object 
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.WorkspaceSchedule.ConstObjectID">
	<summary>
 Object ID
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.WorkspaceSchedule.ConstTableID">
	<summary>
 Table Definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.WorkspaceSchedule.ConstIndTag">
	<summary>
 Index
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.WorkspaceSchedule.ConstFNWorkspaceID">
	<summary>
 Primary Key Columns
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.WorkspaceSchedule.ConstFNAliveUPDC">
	<summary>
 Column Definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.WorkspaceSchedule._workspaceID">
	<summary>
 Column Mappings
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.WorkspaceSchedule.ConstRScheduleDefinition">
	<summary>
 Relation to schedule definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.WorkspaceSchedule.ConstRWorkspace">
	<summary>
 Relation to alive Schedule edition - will be resolved by events
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.WorkspaceSchedule.ConstRAliveEdition">
	<summary>
 Relation to alive Schedule edition - will be resolved by events
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.WorkspaceSchedule.ConstRWorkEdition">
	<summary>
 Relation to alive Schedule edition - will be resolved by events
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Scheduling.WorkspaceSchedule.ConstOPGetMileStoneValue">
	<summary>
 Define the constants for accessing the compounds
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.WorkspaceSchedule.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.WorkspaceSchedule.ScheduleTypeID">
	<summary>
 Gets or sets the schedule typeid.
 </summary>
	<value>The typeid.</value>
</member><member name="P:OnTrack.Scheduling.WorkspaceSchedule.ScheduleDefinition">
	<summary>
 retrieve the related Schedule Definition object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.WorkspaceSchedule.WorkspaceID">
	<summary>
 sets or gets the workspace ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.WorkspaceSchedule.Workspace">
	<summary>
 returns the Workspace object of this Schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.WorkspaceSchedule.UID">
	<summary>
 gets the schedule UID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.WorkspaceSchedule.IsActive">
	<summary>
 true if the current schedule updc is active / enabled
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.WorkspaceSchedule.AliveEditionUpdc">
	<summary>
 gets or sets the current alive (running) Schedule edition Update Counter
 returns nothing if not set (null)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.WorkspaceSchedule.WorkingEditionUpdc">
	<summary>
 gets or sets the current (working - changeable) Schedule edition Update Counter
 returns nothing if not set (null)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.WorkspaceSchedule.WorkingEdition">
	<summary>
 gets the working schedule edition object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Scheduling.WorkspaceSchedule.AliveEdition">
	<summary>
 gets the alive schedule edition object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>C

</member><member name="M:OnTrack.Scheduling.WorkspaceSchedule.GetMilestoneValue(System.String,System.Object@)">
	<summary>
 operation to Access the Milestone's Value
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.WorkspaceSchedule.SetMilestoneValue(System.String,System.Object)">
	<summary>
 operation to Access the Milestone's Value
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.WorkspaceSchedule.Publish(OnTrack.ObjectMessageLog@,System.Nullable{System.DateTime})">
	<summary>
 publish is a persist with history and baseline integrated functions. It sets the working edition as the alive edition
 </summary>
	<param name="msglog"></param>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.WorkspaceSchedule.Persist(System.Nullable{System.DateTime},System.Boolean)">
	<summary>
 Persist with checking on publish
 </summary>
	<param name="timestamp"></param>
	<param name="doFeedRecord"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.WorkspaceSchedule.WorkspaceSchedule_OnDefaultValuesNeeded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 set the default values needed
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.WorkspaceSchedule.WorkspaceSchedule_OnRelationRetrieveNeeded(System.Object,OnTrack.Database.ormDataObjectRelationEventArgs)">
	<summary>
 Event Handler for the RelationRetrieveNeeded event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.WorkspaceSchedule.WorkspaceSchedule_OnRelationCreateNeeded(System.Object,OnTrack.Database.ormDataObjectRelationEventArgs)">
	<summary>
 Event Handler for the RelationRetrieveNeeded event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.WorkspaceSchedule.Retrieve(System.Int64,System.String)">
	<summary>
 retrieves a a current schedule object for the workspace id 
 </summary>
	<param name="UID"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.WorkspaceSchedule.Create(System.Int64,System.String,System.String,System.String)">
	<summary>
 create the persistable WorkspaceSchedule object
 </summary>
	<param name="UID"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.WorkspaceSchedule.WorkspaceSchedule_OnCreating(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handles the OnCreating Event to generate an new UID if necessary
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.WorkspaceSchedule.WorkspaceSchedule_OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handles the OnCreated Event to generate a edition if necessary
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Scheduling.WorkspaceSchedule.WorkspaceSchedule_OnWorkspaceChanged(System.Object,OnTrack.SessionEventArgs)">
	<summary>
 Event Handler for Workspace Change
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Scheduling.WorkspaceSchedule">
	<summary>
 the workspace schedule class links schedule uid to a schedule edition in a given workspace
 </summary>
	<remarks>
 design principles:
 
 1. the workspace schedule links per workspace the schedule uid with a updc edition
 
 2. the workspace schedule also publish a schedule edition (freeze) and increases the edition number
 
 3. the workspace schedule differentiates between active Schedule edition(frozen) and working schedule editions
 
 </remarks>
</member><member name="F:OnTrack.Commons.ValueList.ConstTableID">
	<summary>
 Table Definition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Commons.ValueList._id">
	<summary>
 Mappings
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Commons.ValueList.ConstRValues">
	<summary>
 Relations
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.ValueList.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Commons.ValueList.ID">
	<summary>
 returns the ID of the configuration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.ValueList.ValueEntries">
	<summary>
 returns the collection of Properties in this set
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.ValueList.Values">
	<summary>
 returns a List of Values (objects)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.ValueList.Retrieve(System.String,System.String)">
	<summary>
 retrieve  the property section from store
 </summary>
	<param name="id"></param>
	<param name="domainid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.ValueList.Create(System.String,System.String)">
	<summary>
 creates a persistable property section
 </summary>
	<param name="id"></param>
	<param name="domainid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.ValueList.ValuesCollection_OnAdded(System.Object,OnTrack.Database.ormRelationCollection{OnTrack.Commons.ValueEntry}.EventArgs)">
	<summary>
 Handler for the OnAdded event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Commons.ValueList">
	<summary>
 class to define a list of lookup values
 </summary>
	<remarks>
 
 Design Principles:
 
 1. Value lists are stand-alone and must exist before a value entry can be created.
 
 2. value entry are added by creating themselves e.g. ValueEntry.Create(setid:= ...). It will be added automatically to the List
 
 3. On loading the set all the value entries will be retrieved as well due to relation.
 
 </remarks>
</member><member name="F:OnTrack.Commons.ValueEntry.ConstFNSelector">
	<summary>
 Columns
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.ValueEntry.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Commons.ValueEntry.List">
	<summary>
 Gets the value list
 </summary>
	<value>The list.</value>
</member><member name="P:OnTrack.Commons.ValueEntry.Ordinal">
	<summary>
 Gets or sets the ordinal.
 </summary>
	<value>The ordinal.</value>
</member><member name="P:OnTrack.Commons.ValueEntry.DomainID">
	<summary>
 gets the ID of the Domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.ValueEntry.ListID">
	<summary>
 gets the ID of the Setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.ValueEntry.Selector">
	<summary>
 Description of the setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.ValueEntry.Datatype">
	<summary>
 returns the datatype 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.ValueEntry.ValueString">
	<summary>
 gets or sets the String Presentaton
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.ValueEntry.Value">
	<summary>
 gets or sets the value of the domain setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.ValueEntry.ValueEntry_OnCreating(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handles OnCreating 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.ValueEntry.ValueEntry_OnCreated(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handles OnCreated and Relation to ConfigSet
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Commons.ValueEntry">
	<summary>
 Value Entry Class for List of Values
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.DomainSetting.DomainID">
	<summary>
 gets the ID of the Domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.DomainSetting.ID">
	<summary>
 gets the ID of the Setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.DomainSetting.Description">
	<summary>
 Description of the setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.DomainSetting.Datatype">
	<summary>
 returns the datatype 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.DomainSetting.value">
	<summary>
 gets or sets the value of the domain setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.DomainSetting.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Retrieve the workspaceID Cache Object
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Commons.DomainSetting">
	<summary>
 Domain Setting Definition Class
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Group.HasNoRights">
	<summary>
 has no rights at all ?! -&gt; Blocked ?!
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Group.HasReadRights">
	<summary>
 has right to read
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Group.HasUpdateRights">
	<summary>
 has right to update and read data
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Group.HasAlterSchemaRights">
	<summary>
 Has Right to update, read and alter schema data
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Group.AccessRight">
	<summary>
 gets the accessright out of the setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Group.All">
	<summary>
 Returns a collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Group.Create(System.String,System.String)">
	<summary>
 Create persistency for this object
 </summary>
	<param name="groupname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Commons.Group">
	<summary>
 User Definition Class of an OnTrack User
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.GroupMember.All">
	<summary>
 Returns a collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.GroupMember.GetGroup">
	<summary>
 Returns the Groupdefinition
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.GroupMember.GetUser">
	<summary>
 Returns the Userdefinition
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.GroupMember.Create(System.String,System.String,System.String,System.Boolean)">
	<summary>
 Create persistency for this object
 </summary>
	<param name="groupname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Commons.GroupMember">
	<summary>
 Group Member Definition Class of an OnTrack User
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.User.GroupNames">
	<summary>
 returns a list of groups
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.User.DefaultWorkspaceID">
	<summary>
 set or return the default workspace
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.User.DefaultDomainID">
	<summary>
 set or return the default workspace
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.User.Password">
	<summary>
 Password
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.User.PersonName">
	<summary>
 gets or set the person id
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.User.Username">
	<summary>
 gets the ontrack username
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.User.HasNoRights">
	<summary>
 has no rights at all ?! -&gt; Blocked ?!
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.User.HasReadRights">
	<summary>
 has right to read
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.User.HasUpdateRights">
	<summary>
 has right to update and read data
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.User.HasAlterSchemaRights">
	<summary>
 Has Right to update, read and alter schema data
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.User.IsAnonymous">
	<summary>
 is anonymous user
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.User.AccessRight">
	<summary>
 gets the accessright out of the setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.User.All">
	<summary>
 Returns a collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.User.GetAnonymous">
	<summary>
 returns the anonyous user ( first descending username)
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.User.GetGroups">
	<summary>
 Returns a list of groupdefinition this belongs to
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.User.HasSetting(System.String)">
	<summary>
 returns true if the setting exists
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.User.GetSetting(System.String)">
	<summary>
 returns the setting valid in the domain
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.User.SetSetting(System.String,OnTrack.Database.otDataType,System.Object)">
	<summary>
 sets the setting valid in the domain
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.User.LoadSettings(System.Boolean)">
	<summary>
 Load the settings to the settings dictionary
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.User.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema with use of database driver
 ATTENTION ! This can only be called if database is set up
 user createSql function otherwise
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.User.Create(System.String)">
	<summary>
 Create persistency for this object
 </summary>
	<param name="username"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Commons.User">
	<summary>
 User Definition Class of an OnTrack User
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.UserSetting.Username">
	<summary>
 gets the ID of the Domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.UserSetting.ID">
	<summary>
 gets the ID of the Setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.UserSetting.Description">
	<summary>
 Description of the setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.UserSetting.Datatype">
	<summary>
 returns the datatype 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.UserSetting.Value">
	<summary>
 gets or sets the value of the domain setting
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.UserSetting.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Retrieve the workspaceID Cache Object
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.UserSetting.CreateSchema(System.Boolean)">
	<summary>
 create the objects persistence schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Commons.UserSetting">
	<summary>
 User Setting Definition Class
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Person.ID">
	<summary>
 returns the ID of the Person
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Person.Firstname">
	<summary>
 Gets or sets the firstname.
 </summary>
	<value>The firstname.</value>
</member><member name="P:OnTrack.Commons.Person.Midnames">
	<summary>
 sets or gets the midnames
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Person.Sirname">
	<summary>
 Gets or sets the Sirname.
 </summary>
	<value>The sirname.</value>
</member><member name="P:OnTrack.Commons.Person.Description">
	<summary>
 returns the description of the person
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Person.IsRole">
	<summary>
 Gets or sets the role flag
 </summary>
	<value></value>
</member><member name="P:OnTrack.Commons.Person.Company">
	<summary>
 Gets or sets the company ID.
 </summary>
	<value>The company name.</value>
</member><member name="P:OnTrack.Commons.Person.ManagerID">
	<summary>
 gets or sets the ManagerID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Person.OrgUnitID">
	<summary>
 sets or gets the Organization Unit ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Person.OrgUnit">
	<summary>
 sets or gets the Organization Unit 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Person.eMail">
	<summary>
 Gets or sets the email address 
 </summary>
	<value>The company name.</value>
</member><member name="P:OnTrack.Commons.Person.Phone">
	<summary>
 Gets or sets the Phone number 
 </summary>
	<value>The company name.</value>
</member><member name="P:OnTrack.Commons.Person.Fax">
	<summary>
 Gets or sets the email address 
 </summary>
	<value>The company name.</value>
</member><member name="M:OnTrack.Commons.Person.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Retrieve
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Person.CreateSchema(System.Boolean)">
	<summary>
 create the persistency schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Person.All(System.String)">
	<summary>
 returns a collection of all Person Definition Objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Person.BuildID(System.String,System.String,System.String[])">
	<summary>
 build the ID string out of the names
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Commons.Person">
	<summary>
 the person definition class
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Commons.ObjectMessageType.ConstTableID">
	<summary>
 Table
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Commons.ObjectMessageType.ConstFNUID">
	<summary>
 Primary Keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Commons.ObjectMessageType.constFNArea">
	<summary>
 Columns
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Commons.ObjectMessageType._uid">
	<summary>
 column field mapping
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Commons.ObjectMessageType._StatusCodeDictionary">
 dynamic
 

</member><member name="P:OnTrack.Commons.ObjectMessageType.IsPersisted">
	<summary>
 Gets or sets the is persisted flag for the messages of this type.
 </summary>
	<value>The is persisted.</value>
</member><member name="P:OnTrack.Commons.ObjectMessageType.ID">
	<summary>
 get the UID of the message
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.ObjectMessageType.Message">
	<summary>
 sets or gets the message text 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.ObjectMessageType.Weight">
	<summary>
 get or sets the weight of the message from 0 ... 100
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.ObjectMessageType.Type">
	<summary>
 set or gets the type of the message
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.ObjectMessageType.Area">
	<summary>
 sets or gets the message area category
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.ObjectMessageType.StatusItems(System.String,System.String)">
	<summary>
 returns a IList of StatusItems of this MessageType
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.ObjectMessageType.StatusCodeOf(System.String)">
	<summary>
 sets or gets the Status code of a status type item
 </summary>
	<param name="typeid"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.ObjectMessageType.StatusTypes">
	<summary>
 returns a List of statustypes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.ObjectMessageType.All(System.String)">
	<summary>
 return all Log Message Definitions
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.ObjectMessageType.ObjectMessageType_OnFed(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handler for the record feed event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.ObjectMessageType.ObjectMessageType_OnInfused(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 On Infused Handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.ObjectMessageType.ObjectMessageType_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
	<summary>
 on property change
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Commons.ObjectMessageType">
	<summary>
 Object Message Definition Class - bound messages to a buisiness object
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.StatusItem.Aborting">
	<summary>
 Gets or sets the aborting.
 </summary>
	<value>The aborting.</value>
</member><member name="P:OnTrack.Commons.StatusItem.TypeID">
	<summary>
 gets the typeid of the status item
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.StatusItem.Code">
	<summary>
 gets the code of the status type
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.StatusItem.Description">
	<summary>
 gets or sets the description of the status item 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.StatusItem.Title">
	<summary>
 sets or gets the Title of the Status Item
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.StatusItem.KPICode">
	<summary>
 sets or gets the KPI Code (statistic code)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.StatusItem.Weight">
	<summary>
 sets or gets the weight of the status item
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.StatusItem.IsStartStatus">
	<summary>
 sets the start business process flag of this status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.StatusItem.IsIntermediateStatus">
	<summary>
 sets or gets the intermediate business process status flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.StatusItem.IsEndStatus">
	<summary>
 sets or gets the buisness process flag for end status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.StatusItem.FormatBGColorHex">
	<summary>
 sets or gets the Background Colour for rendering the status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.StatusItem.FormatBGColor">
	<summary>
 sets or gets the Background Color for rendering the status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.StatusItem.FormatkpiBGColorHex">
	<summary>
 sets or gets the KPI Background Colour for rendering the status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.StatusItem.FormatKPIBGColor">
	<summary>
 sets or gets the KPI Background Color for rendering the status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.StatusItem.FormatFGColorHex">
	<summary>
 sets or gets the foreground color for rendering the status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.StatusItem.FormatFGColor">
	<summary>
 sets or gets the Foreground Color for rendering the status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.StatusItem.FormatKPIGFColorHex">
	<summary>
 sets or gets the kpi foreground color for rendering the status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.StatusItem.FormatKPIFGColor">
	<summary>
 sets or gets the Foreground Color for rendering the status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.StatusItem.Create(System.String,System.String,System.String)">
	<summary>
 create a persistable object 
 </summary>
	<param name="typeid"></param>
	<param name="code"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Commons.StatusItem">
	<summary>
 Status ITEM Class for Stati in Object Messages
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Commons.Workspace.ConstFNDomainID">
	<summary>
  deactivate foreign keys to domain since this would end up in a mess - all the schedule and deliverable object would be
 in domains then also
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Workspace.DomainID">
	<summary>
 Gets or sets the domain ID.
 </summary>
	<value>The domain ID.</value>
</member><member name="P:OnTrack.Commons.Workspace.ID">
	<summary>
 get the ID of the Workspace
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Workspace.Description">
	<summary>
 gets or sets the description of the workspace
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Workspace.IsBasespace">
	<summary>
 returns true if the workspace is a basespace - basic workspace where a schedule must reside !
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Workspace.HasActuals">
	<summary>
 returns true if the workspace has actuals of milestones
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Workspace.FCRelyingOn">
	<summary>
 gets or sets the forecast milestone workspaces in order 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Workspace.ACTRelyingOn">
	<summary>
 gets or sets the actuals milestone workspace order
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Workspace.AccesslistIDs">
	<summary>
 gets or set the access list
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Workspace.MinScheduleUPDC">
	<summary>
 get or set the minimum schedule updc
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Workspace.MaxScheduleUPDC">
	<summary>
 gets or sets the maximum schedule updc
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Workspace.MinTargetUPDC">
	<summary>
 gets or sets the minimum target updc
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Workspace.MaxTargetUPDC">
	<summary>
 gets or sets the maximum target updc
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Workspace.GetFirstBase(System.String)">
	<summary>
 returns the first workspace in workspace stack which has actual milestones
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Workspace.GetFirstActual(System.String)">
	<summary>
 returns the first workspace in workspace stack which has actual milestones
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Workspace.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Retrieve the workspaceID Cache Object
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Workspace.Create(System.String,System.String)">
	<summary>
 creates with this object a new persistable Def workspaceID
 </summary>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Workspace.All">
	<summary>
 returns a List(of clsotdbDefWorkspace) of all workspaceID Definitions
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Commons.Workspace">
	<summary>
 Workspace Definition Class
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Domain.ID">
	<summary>
 returns the ID of this domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Domain.Description">
	<summary>
 gets and sets the description text of the domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Domain.IsGlobal">
	<summary>
 gets and set the Global Flag of the domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Domain.MinDeliverableUID">
	<summary>
 gets or set the minimum deliverable UID for this domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Domain.MaxDeliverableUID">
	<summary>
 gets or set the maximum Deliverable UID for this domain
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Domain.Settings">
	<summary>
 gets a list of domain settings
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Domain.OnSessionEnd(System.Object,OnTrack.SessionEventArgs)">
	<summary>
 handles the session start event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Domain.OnSessionStart(System.Object,OnTrack.SessionEventArgs)">
	<summary>
 handles the session end event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Domain.RegisterSession(OnTrack.Session)">
	<summary>
 Register a Session a the Domain
 </summary>
	<param name="session"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Domain.Retrieve(System.String,OnTrack.Database.iormDatabaseDriver,System.Boolean,System.Boolean)">
	<summary>
 Retrieve the workspaceID Cache Object
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Domain.HasSetting(System.String)">
	<summary>
 returns true if the setting exists
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Domain.GetSetting(System.String)">
	<summary>
 returns the setting valid in the domain
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Domain.SetSetting(System.String,OnTrack.Database.otDataType,System.Object,System.String)">
	<summary>
 sets (add or overwrites) the setting valid in the domain
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Domain.LoadSettings">
	<summary>
 Load the settings to the settings dictionary
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Domain.CreateSchema(System.Boolean)">
	<summary>
 create the objects persistence schema
 </summary>
	<param name="silent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Domain.All">
	<summary>
 returns a List(of Domain) of all workspaceID Definitions
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Commons.Domain">
	<summary>
 Domain Definition Class
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.OrgUnit.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Retrieve 
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.OrgUnit.All">
	<summary>
 returns a collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Commons.OrgUnit">
	<summary>
 Organization Unit Definition Class
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Site.ID">
	<summary>
 ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.Site.Description">
	<summary>
 Description
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Site.Retrieve(System.String,System.String,System.Boolean)">
	<summary>
 Retrieve
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Site.All(System.String)">
	<summary>
 returns a collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.Site.Create(System.String,System.String)">
	<summary>
 creates a persistable site object
 </summary>
	<param name="id"></param>
	<param name="domainID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Commons.Site">
	<summary>
 Site Definition Class
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Commons.OnTrackChangeLogEntry.ConstFNReleaseDate">
	<summary>
 Column Members
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.OnTrackChangeLogEntry.#ctor">
	<summary>
  constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.OnTrackChangeLogEntry.ChangeImplementationNo">
	<summary>
 Gets or sets the change implementation no.
 </summary>
	<value>The change implementation no.</value>
</member><member name="P:OnTrack.Commons.OnTrackChangeLogEntry.Releasedate">
	<summary>
 Gets or sets the releasedate.
 </summary>
	<value>The releasedate.</value>
</member><member name="P:OnTrack.Commons.OnTrackChangeLogEntry.ChangerequestID">
	<summary>
 Gets or sets the changerequest ID.
 </summary>
	<value>The changerequest ID.</value>
</member><member name="P:OnTrack.Commons.OnTrackChangeLogEntry.Patch">
	<summary>
 Gets or sets the patch.
 </summary>
	<value>The patch.</value>
</member><member name="P:OnTrack.Commons.OnTrackChangeLogEntry.Version">
	<summary>
 Gets or sets the version.
 </summary>
	<value>The version.</value>
</member><member name="P:OnTrack.Commons.OnTrackChangeLogEntry.Release">
	<summary>
 Gets or sets the release.
 </summary>
	<value>The release.</value>
</member><member name="P:OnTrack.Commons.OnTrackChangeLogEntry.Module">
	<summary>
 Gets or sets the module.
 </summary>
	<value>The module.</value>
</member><member name="P:OnTrack.Commons.OnTrackChangeLogEntry.Application">
	<summary>
 gets the name of the application
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.OnTrackChangeLogEntry.Description">
	<summary>
 Description
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Commons.OnTrackChangeLogEntry.Versioning">
	<summary>
 returns the Versioning String
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Commons.OnTrackChangeLogEntry.All">
	<summary>
 returns a collection of all objects
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Commons.OnTrackChangeLogEntry">
	<summary>
 Change Log Entry for OnTrack Changes
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.WorkspaceTarget.ConstRAliveTarget">
	<summary>
 Relation to alive Schedule edition - will be resolved by events
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.WorkspaceTarget.ConstRWorkTarget">
	<summary>
 Relation to alive Schedule edition - will be resolved by events
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.WorkspaceTarget.ConstRDeliverable">
	<summary>
 Relation to alive Schedule edition - will be resolved by events
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.WorkspaceTarget.ConstOPGetTarget">
	<summary>
 Define the constants for accessing the compounds
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.WorkspaceTarget.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.WorkspaceTarget.Deliverable">
	<summary>
 Gets or sets the deliverable.
 </summary>
	<value>The deliverable.</value>
</member><member name="P:OnTrack.Deliverables.WorkspaceTarget.Target">
	<summary>
 Gets the target object
 </summary>
	<value>The target.</value>
</member><member name="P:OnTrack.Deliverables.WorkspaceTarget.WorkingTarget">
	<summary>
 Gets the working target object
 </summary>
	<value>The target.</value>
</member><member name="P:OnTrack.Deliverables.WorkspaceTarget.AliveTarget">
	<summary>
 Gets the alive target object
 </summary>
	<value>The target.</value>
</member><member name="P:OnTrack.Deliverables.WorkspaceTarget.UID">
	<summary>
 returns the deliverable UID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.WorkspaceTarget.WorkspaceID">
	<summary>
 returns the workspace
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.WorkspaceTarget.Revision">
	<summary>
 gets or sets the revision of the target
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.WorkspaceTarget.UPDC">
	<summary>
 gets the updc of the target
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.WorkspaceTarget.WorkingTargetUPDC">
	<summary>
 gets the updc of the working target version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.WorkspaceTarget.AliveTargetUPDC">
	<summary>
 gets the updc of the working target version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.WorkspaceTarget.IsActive">
	<summary>
 gets or sets the active flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.WorkspaceTarget.GetTarget(System.String,System.Object@)">
	<summary>
 operation to Access the Milestone's Value
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.WorkspaceTarget.SetTarget(System.String,System.Object)">
	<summary>
 operation to Access the Milestone's Value
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.WorkspaceTarget.Publish(OnTrack.ObjectMessageLog@,System.Nullable{System.DateTime})">
	<summary>
 publish is a persist with history and baseline integrated functions. It sets the working edition as the alive edition
 </summary>
	<param name="msglog"></param>
	<param name="timestamp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.WorkspaceTarget.Persist(System.Nullable{System.DateTime},System.Boolean)">
	<summary>
 Persist with checking on publish
 </summary>
	<param name="timestamp"></param>
	<param name="doFeedRecord"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.WorkspaceTarget.Clone(System.Object[],System.Nullable{System.Boolean})">
	<summary>
 clone the object with the new primary key
 </summary>
	<param name="pkarray">primary key array</param>
	<remarks></remarks>
	<returns>the new cloned object or nothing</returns>
</member><member name="M:OnTrack.Deliverables.WorkspaceTarget.Clone(System.Int64,System.String)">
	<summary>
 Clone this data object by primary key
 </summary>
	<param name="uid"></param>
	<param name="workspaceID">optional workspaceID id</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.WorkspaceTarget.AllByUID(System.Int64)">
	<summary>
 returns a collection of objects filtered by uid
 </summary>
	<param name="uid">deliverable uid</param>
	<returns>a collection</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.WorkspaceTarget.AllByWorkspace(System.String)">
	<summary>
 return a collection of current Targets filtered by workspaceID
 </summary>
	<param name="workspaceID">the workspaceID id</param>
	<returns>a Collection</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.WorkspaceTarget.Retrieve(System.Int64,System.String)">
	<summary>
 Loads and infuses a Current Target dependent on the workspaceID
 </summary>
	<param name="uid">deliverable uid</param>
	<param name="workspaceID">the workspaceID to look into - default workspaceID used</param>
	<returns>true if successful</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.WorkspaceTarget.RetrieveUniqueBy(System.Int64,System.String)">
	<summary>
 load a unique current Target by its primary keys
 </summary>
	<param name="uid"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.WorkspaceTarget.Create(System.Int64,System.String,System.String)">
	<summary>
 create a current Target by primary key
 </summary>
	<param name="UID"></param>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.WorkspaceTarget.WorkspaceTarget_OnDefaultValuesNeeded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 the default values needed event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.WorkspaceTarget.WorkspaceTarget_OnRelationCreateNeeded(System.Object,OnTrack.Database.ormDataObjectRelationEventArgs)">
	<summary>
 handles the relationCreateNeeded Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.WorkspaceTarget.WorkspaceTarget_OnWorkspaceChanged(System.Object,OnTrack.SessionEventArgs)">
	<summary>
 Event Handler for Workspace Change
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.WorkspaceTarget">
	<summary>
 Current target object points to the current clsOTDBDeliverableTarget 
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.TargetChangedDate">
	<summary>
 Gets or sets the target changed date.
 </summary>
	<value>The target changed date.</value>
</member><member name="P:OnTrack.Deliverables.Target.NotargetByItention">
	<summary>
 Gets or sets the notarget by itention.
 </summary>
	<value>The notarget by itention.</value>
</member><member name="P:OnTrack.Deliverables.Target.UID">
	<summary>
 gets the UID of the Deliverable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.UPDC">
	<summary>
 gets  the update counter of the target
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.Target">
	<summary>
 gets or sets the Target Date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.PrevTarget">
	<summary>
 gets or set the previous target
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.Responsible">
	<summary>
 Gets or sets the resp.
 </summary>
	<value>The resp.</value>
</member><member name="P:OnTrack.Deliverables.Target.ResponsibleOU">
	<summary>
 Gets or sets the resp OU.
 </summary>
	<value>The resp OU.</value>
</member><member name="P:OnTrack.Deliverables.Target.Comment">
	<summary>
 Gets or sets the resp OU.
 </summary>
	<value>The resp OU.</value>
</member><member name="P:OnTrack.Deliverables.Target.ChangedDate">
	<summary>
 gets or sets the timestamp of the  target date (changed on)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.Revision">
	<summary>
 gets or sets the revision string for the target
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Target.WorkspaceID">
	<summary>
 gets or sets the Workspace ID of the Target
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.AllByUid(System.Int64)">
	<summary>
 returns all Targets by Deliverable UID
 </summary>
	<param name="uid"></param>
	<returns>a Collection</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.Target_OnCreating(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 handles the OnCreating Event to generate an new UID if necessary
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.Create(System.Int64,System.Int64,System.String)">
	<summary>
 create the persistent target by primary key
 </summary>
	<param name="uid"></param>
	<param name="updc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.Retrieve(System.Int64,System.Int64)">
	<summary>
 load and infuse the object by primary key
 </summary>
	<param name="uid"></param>
	<param name="updc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.PublishNewTarget(System.DateTime,System.String,System.Int64,System.String,OnTrack.Deliverables.Target@)">
	<summary>
 publish a new Target to the database from a Date
 </summary>
	<param name="NewTargetDate"></param>
	<param name="workspaceID"></param>
	<param name="UID"></param>
	<param name="revision"></param>
	<param name="NewDeliverableTarget"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.IncreaseRevison(System.Boolean,System.Boolean)">
	<summary>
 Increase the Revision in Form VXX.YY
 </summary>
	<param name="majorFlag">is a major version - increase xx </param>
	<param name="minorFlag">is a minor version - increase yy</param>
	<returns>new revision</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.Clone(System.Object[],System.Nullable{System.Boolean})">
	<summary>
 clone the object with the new primary key
 </summary>
	<param name="pkarray">primary key array</param>
	<remarks></remarks>
	<returns>the new cloned object or nothing</returns>
</member><member name="M:OnTrack.Deliverables.Target.Clone(System.Nullable{System.Int64},System.Nullable{System.Int64})">
	<summary>
 clone the loaded or created dataobject object
 </summary>
	<param name="UID"></param>
	<param name="updc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.Target_OnDefaultValuesNeeded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Default Values Handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Target.Target_PropertyChanging(System.Object,OnTrack.Database.ormDataObjectEntryEventArgs)">
	<summary>
 Property change Handler -- saving the old target in the previous target
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.Target">
	<summary>
 target object for the deliverable class
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.Track.constFKTarget">
	<summary>
 foreign key
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.Track.ConstRScheduledefinition">
	<summary>
 Relation to ScheduleDefinition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.Track.ConstRScheduleEdition">
	<summary>
 Relation to ScheduleEdition
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.Track.ConstRTarget">
	<summary>
 Relation to Target
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.Track.ConstRDeliverable">
	<summary>
 Relation to Deliverable
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.TrackingStatus">
	<summary>
 Gets or sets the Tracking Status
 </summary>
	<value>The T status.</value>
</member><member name="P:OnTrack.Deliverables.Track.NoTargetByIntention">
	<summary>
 Gets or sets the no target by intention.
 </summary>
	<value>The no target by intention.</value>
</member><member name="P:OnTrack.Deliverables.Track.Scheduledefinition">
	<summary>
 Gets  scheduledefinition.
 </summary>
	<value>The scheduledefinition.</value>
</member><member name="P:OnTrack.Deliverables.Track.ScheduleEdition">
	<summary>
 Gets  the schedule.
 </summary>
	<value>The schedule.</value>
</member><member name="P:OnTrack.Deliverables.Track.Target">
	<summary>
 Gets  the target.
 </summary>
	<value>The target.</value>
</member><member name="P:OnTrack.Deliverables.Track.Deliverable">
	<summary>
 Gets  the deliverable.
 </summary>
	<value>The deliverable.</value>
</member><member name="P:OnTrack.Deliverables.Track.DeliverableUID">
	<summary>
 gets the uid of the deliverable to be tracked
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.TargetUPDC">
	<summary>
 gets the target updc of the target to be tracked
 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.ScheduleUID">
	<summary>
 gets the schedule uid to be tracked
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.ScheduleUPDC">
	<summary>
 gets the updc of the schedule to be tracked
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.workspaceID">
	<summary>
 gets or sets the workspace id
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.MSIDFinish">
	<summary>
 gets or sets the Milestone ID which finishes the Tracking
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.Scheduletype">
	<summary>
 sets or gets the schedule type
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.CurrentForecast">
	<summary>
 gets or sets the current forecast
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.FinishedOn">
	<summary>
 sets or gets the finished dated
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.CurrentTargetDate">
	<summary>
 get or sets the CurrentTarget Date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.GAPToTarget">
	<summary>
 gets or sets the current Gap to Target in units
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.BaselineGAPToTarget">
	<summary>
 sets or gets the Gap from Baseline To Target in units
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.ForecastChangedOn">
	<summary>
 gets or sets the Forecast changed date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.FCLCStatus">
	<summary>
 get or sets the forecast lifecycle status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.ProcessStatus">
	<summary>
 gets or sets the process status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.ScheduleRevision">
	<summary>
 gets or sets the schedule revision
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.TargetRevision">
	<summary>
 gets or sets the target revision
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.BlockingItemID">
	<summary>
 gets or sets the blocking item
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.IsFrozen">
	<summary>
 gets or sets the frozen schedule flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.IsFinished">
	<summary>
 gets or sets the isfinished flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.BaseLineUPDC">
	<summary>
 gets or sets the baseline updc
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.BaseLineFinishDate">
	<summary>
 gets or sets the baseline finish date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.BaseLineFinishDateFrom">
	<summary>
 gets or sets the baseline From Date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.GoingAliveDate">
	<summary>
 gets or sets the going alive date of the schedule
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.SynchronizationStatus">
	<summary>
 gets or sets the synchronization status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Track.SychonizationDate">
	<summary>
 gets or set the synchronization date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.UpdateAllTracks(System.String,System.ComponentModel.BackgroundWorker)">
	<summary>
 Batch processing for updating all Tracks
 </summary>
	<param name="workspaceID"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.AllByDeliverable(System.Int64,System.Int64,System.Int64,System.Int64)">
	<summary>
 retrieves a List of all Tracks by deliverable UID and as option by schedule uid / updc and targetupdc
 </summary>
	<param name="deliverableUID"></param>
	<param name="scheduleUPDC"></param>
	<param name="targetUPDC"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.Create(System.Int64,System.Int64,System.Int64,System.Int64,System.String)">
	<summary>
 create the data object by primary key
 </summary>
	<param name="deliverableUID"></param>
	<param name="scheduleUID"></param>
	<param name="scheduleUPDC"></param>
	<param name="targetUPDC"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.Clone(System.Object[],System.Nullable{System.Boolean})">
	<summary>
 clone the track
 </summary>
	<param name="pkarray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.Retrieve(System.Int64,System.Int64,System.Int64,System.Int64)">
	<summary>
 load and infuse data object by primary key
 </summary>
	<param name="deliverableUID"></param>
	<param name="scheduleUID"></param>
	<param name="scheduleUPDC"></param>
	<param name="targetUPDC"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.Track_OnPersisted(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnPersisted Event Handler: Checks which objects are persisted and if these are Deliverable, Target, ScheduleEdition
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.CheckOnGap">
	<summary>
 checkOnGAP -&gt; Calculate the GAP
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Track.CheckOnBaselineGap">
	<summary>
 checkOnBaselineGAP -&gt; Calculate the baseline GAP
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.Track">
	<summary>
 deliverable track class
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.DeliverableType.constFNTypeID">
	<summary>
 keys
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.DeliverableType.ConstFNScheduled">
	<summary>
 Fields
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.DeliverableType.IsScheduled">
	<summary>
 Gets or sets the is scheduled.
 </summary>
	<value>The is scheduled.</value>
</member><member name="P:OnTrack.Deliverables.DeliverableType.MustHaveTarget">
	<summary>
 Gets or sets the has alwasy target.
 </summary>
	<value>The has alwasy target.</value>
</member><member name="P:OnTrack.Deliverables.DeliverableType.AutoPublishTarget">
	<summary>
 returns true if the Target is autopublished
 </summary>
	<value>The has alwasy target.</value>
</member><member name="P:OnTrack.Deliverables.DeliverableType.DefaultPropertySets">
	<summary>
 Gets or sets the default property sets
 </summary>
	<value>The def target OU.</value>
</member><member name="P:OnTrack.Deliverables.DeliverableType.DefaultRevision">
	<summary>
 Gets or sets the default revision value
 </summary>
	<value>The def target OU.</value>
</member><member name="P:OnTrack.Deliverables.DeliverableType.DefaultTargetOU">
	<summary>
 Gets or sets the def target OU.
 </summary>
	<value>The def target OU.</value>
</member><member name="P:OnTrack.Deliverables.DeliverableType.DefaultRespOU">
	<summary>
 Gets or sets the def resp OU.
 </summary>
	<value>The def resp OU.</value>
</member><member name="P:OnTrack.Deliverables.DeliverableType.DefaultFunction">
	<summary>
 Gets or sets the deffunction.
 </summary>
	<value>The deffunction.</value>
</member><member name="P:OnTrack.Deliverables.DeliverableType.DefaultScheduleType">
	<summary>
 Gets or sets the type of the def schedule.
 </summary>
	<value>The type of the def schedule.</value>
</member><member name="P:OnTrack.Deliverables.DeliverableType.Comment">
	<summary>
 Gets or sets the comment.
 </summary>
	<value>The comment.</value>
</member><member name="P:OnTrack.Deliverables.DeliverableType.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="P:OnTrack.Deliverables.DeliverableType.Typeid">
	<summary>
 Gets or sets the typeid.
 </summary>
	<value>The typeid.</value>
</member><member name="M:OnTrack.Deliverables.DeliverableType.All(System.String)">
	<summary>
 returns a List(of Delivertype) for the DomainID
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.DeliverableType">
	<summary>
 Definition class for Deliverables
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.Deliverable.ConstRRespPerson">
	<summary>
 Relation to Responsible Person
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.Deliverable.ConstRRespou">
	<summary>
 Relation to Responsible OU
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.Deliverable.ConstRPart">
	<summary>
 Relation to Parts
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.Deliverable.ConstRDeliverableType">
	<summary>
 Relation to DeliverableType
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.Deliverable.ConstRWorkspaceTarget">
	<summary>
 Relation to Deliverable Target - will be resolved by event handling
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.Deliverable.ConstRPropertyLink">
	<summary>
 Relation to PropertyLink - will be resolved via event handling from the relation manager
 createObjectIfNotRetrieved is set -&gt; always a Link + Lot
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.Deliverable.ConstRScheduleLink">
	<summary>
 Relation to ScheduleLink - will be resolved via event handling
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.Deliverable.ConstRTrack">
	<summary>
 Relation to Tracks - will be resolved via event handling
 </summary>
	<remarks>
 track object is not finished add createobjectifnotretrieved:=True again if Track can build itself from otherobjects
 </remarks>
</member><member name="F:OnTrack.Deliverables.Deliverable.constOPGetPropertyValueLot">
	<summary>
 Operations
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.Deliverables.Deliverable._UniqueEntriesAreTouched">
	<summary>
 dynamic runtime members
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.DomainID">
	<summary>
 Gets or sets the domain ID.
 </summary>
	<value>The domain ID.</value>
</member><member name="P:OnTrack.Deliverables.Deliverable.Uid">
	<summary>
 gets the UID of the deliverable (unique)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.PropertyLink">
	<summary>
 retrieves a PropertyLink object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.ScheduleLink">
	<summary>
 retrieves a ScheduleLink object for this Deliverable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.DeliverableType">
	<summary>
 retrieves a DeliverableType object of this Deliverable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.FirstRevisionUID">
	<summary>
 set or gets the first revision uid - might be null
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Revision">
	<summary>
 gets or set the revision id 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Format">
	<summary>
 gets or sets the format of the deliverable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.DeliverableID">
	<summary>
 gets or sets the ID of the deliverable (non-unique)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.WorkspaceID">
	<summary>
 gets or sets the ID of the deliverable (non-unique)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Description">
	<summary>
 gets or sets the description of the deliverable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Category">
	<summary>
 sets or gets the category of the deliverable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.IsRevision">
	<summary>
 true if this is a revision 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.IsFirstRevision">
	<summary>
 True if this deliverable is first revision
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.ResponsibleID">
	<summary>
  gets or sets the responsible Person ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.ResponsibleOUID">
	<summary>
 gets or sets the Responsible Organization Unit ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Matchcode">
	<summary>
 gets or sets the matchcode 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.PartID">
	<summary>
 gets or sets the Part Id related to the deliverable
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.ChangeReferenceID">
	<summary>
 gets or sets the Change Reference ID 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.DeliverableTypeID">
	<summary>
 gets or sets the type ID 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.WBSID">
	<summary>
 gets or sets the wbs ID 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Workpackage">
	<summary>
 gets or sets the workpackage code
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.WBSCode">
	<summary>
 gets or sets the wbs code
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Function">
	<summary>
 gets or sets the function
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.BlockingItemID">
	<summary>
 gets or sets the blocking item reference ID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Comment">
	<summary>
 gets or sets the comment
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Deliverables.Deliverable.Part">
	<summary>
 retrieve the related part object
 </summary>
	<returns>the part object</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetWorkScheduleLFCLStatusCode(System.String@)">
	<summary>
 returns the Status LFCL Item of the current alive schedule (nothing if no schedule is attached)
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetWorkScheduleProcessStatus(System.String@)">
	<summary>
 returns the Status LFCL Item of the current alive schedule (nothing if no schedule is attached)
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetWorkCurrentGap(System.Nullable{System.Int64}@,System.String)">
	<summary>
 returns the Status LFCL Item of the current alive schedule (nothing if no schedule is attached)
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetProperties(OnTrack.ObjectProperties.ObjectPropertyValueLot@)">
	<summary>
 returns the PropertyLink object in relation
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Deliverable_OnInitialized(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 OnInitialized Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Deliverable_OnRelationRetrieveNeeded(System.Object,OnTrack.Database.ormDataObjectRelationEventArgs)">
	<summary>
 Event Handler for the RelationRetrieveNeeded event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Deliverable_OnRelationCreateNeeded(System.Object,OnTrack.Database.ormDataObjectRelationEventArgs)">
	<summary>
 Event Handler for the RelationRetrieveNeeded event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Purge">
	<summary>
 Purge revisions of a deliverable
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Retrieve(System.Int64)">
	<summary>
 Retrieve the Deliverable
 </summary>
	<param name="uid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.All(System.Boolean,System.String)">
	<summary>
 returns a collection of all deliverables (not deleted)
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.AllUIDs">
	<summary>
 returns a collection of all uids of deliverables
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.AllByPnid(System.String,System.String)">
	<summary>
 return a collection of deliverables filtered by partid
 </summary>
	<param name="partid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.AllRevisionUIDsBy(System.Int64)">
	<summary>
 returns all revisions of a firstrevision including it
 </summary>
	<param name="firstrevisionUID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetTrack(System.String@,System.Int64@,System.Int64@,System.Int64@)">
	<summary>
 return the current Track
 </summary>
	<param name="workspaceID"></param>
	<param name="scheduleUID"></param>
	<param name="scheduleUPDC"></param>
	<param name="targetUPDC"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetWorkspaceTarget(System.String)">
	<summary>
 return the  current workspace target object
 </summary>
	<param name="workspaceID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetWorkspaceSchedule(System.String)">
	<summary>
 retrieve the current workspace schedule object
 </summary>
	<param name="workspaceID">optional workspaceID id</param>
	<returns>the data object or nothing</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.AttachSchedule(OnTrack.Scheduling.WorkspaceSchedule)">
	<summary>
 adds / attaches a workspace schedule to this deliverable and setup the links
 </summary>
	<param name="workspaceSchedule"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetWorkScheduleEdition(System.String)">
	<summary>
 retrieves the active and work schedule object for the deliverable 
 </summary>
	<param name="workspaceID">workspaceID id</param>
	<returns>a scheduling object or nothing</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetAliveScheduleEdition(System.String)">
	<summary>
 retrieves the active and alive schedule object for the deliverable 
 </summary>
	<param name="workspaceID">workspaceID id</param>
	<returns>a scheduling object or nothing</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.GetWorkingTarget(System.String)">
	<summary>
 retrieves the target object (most current)
 </summary>
	<param name="workspaceID">optional workspaceID id</param>
	<returns>the data object or nothing</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Deliverable_OnEntryChanged(System.Object,OnTrack.Database.ormDataObjectEntryEventArgs)">
	<summary>
 On Entry Changed Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Deliverable_OnDefaultValueNeeded(System.Object,OnTrack.Database.ormDataObjectEntryEventArgs)">
	<summary>
 handler for default Value for an entry needed
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Deliverable_OnCreateDefaultValuesNeeded(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Handles the On DefaultValues Needed
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Deliverable_OnCreating(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 On Creating Handler to set the UID
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Create(System.Int64,System.String,System.String,System.String)">
	<summary>
 create unique persistable object by primary key
 </summary>
	<param name="uid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Deliverable_OnCloned(System.Object,OnTrack.Database.ormDataObjectCloneEventArgs)">
	<summary>
 Handler for the On Cloned Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Clone(System.Int64)">
	<summary>
 Clone the deliverable
 </summary>
	<param name="UID">new uid If 0 then generate a new uid</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.AddRevisionClone(System.Int64)">
	<summary>
 Clone the deliverable to a revision
 </summary>
	<param name="UID">new uid If 0 then generate a new uid</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.CheckUniqueEntries(OnTrack.ObjectMessageLog)">
	<summary>
 Check if the additional UniqueIDs are unique 
 </summary>
	<param name="msglog"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Deliverable_OnValidated(System.Object,OnTrack.Database.ormDataObjectValidationEventArgs)">
	<summary>
 Validated Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Deliverables.Deliverable.Deliverable_OnPersisted(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for OnPersisted Event to reset the UniqueEntries are Touched Flag
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.Deliverables.Deliverable">
	<summary>
 Deliverable class for arbitrary tracking
 </summary>
	<remarks>
 
 Design principles :
 
 1. always supply a deliverable type id for default values of schedule and property sets etc.
 
 2. Add Properties
 
    aDeliverable = Deliverable.retrieve(uid:=xxx)
    aDeliverable.GetProperties.AddSet("FBL_SBB") ' add the predefined set by name
    aDeliverable.SetValue("BLTEST", "test4") ' sets the property value of BLTESt to test4
    aDeliverable.Persist()
 
 3. Add Schedules
 
   aDeliverable = Deliverable.create(uid:=xxx) ' will attachh a schedule of the default schedule type if deliverable is scheduled
   aDeliverable.setvalue("bp1", #1/1/2014#)    ' set the milestone
   aDeliverable.GetWorkspaceSchedule.persist
 
   OR
 
   dim aSchedule = new WorkspaceSchedule(scheduletype:=yyyy)
   aSchedule, setMilestoneValue("bp1", #1/1/2014#)
   aDeliverable.attachSchedule(aSchedule)
   aSchedule.persists
 </remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.#ctor(System.String,OnTrack.Session@)">
	<summary>
 Constructor
 </summary>
	<param name="ID">an ID for this driver</param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.adonetDBDriver.OnTrackDataSet">
	<summary>
 Gets the on track data set.
 </summary>
	<value>The on track data set.</value>
</member><member name="P:OnTrack.Database.adonetDBDriver.IsInitialized">
	<summary>
 returns True if driver is initialized.
 </summary>
	<value></value>
</member><member name="P:OnTrack.Database.adonetDBDriver.NativeConnection">
	<summary>
 gets the native connection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.Initialize(System.Boolean)">
	<summary>
 initialize driver
 </summary>
	<param name="Force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.OnStartofBootstrap(System.Object,OnTrack.SessionEventArgs)">
	<summary>
 Start of Bootstrap of the session
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.OnEndOfBootstrap(System.Object,OnTrack.SessionEventArgs)">
	<summary>
 handle the end of bootstrap
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.Reset">
	<summary>
 reset the Driver
 </summary>
	<returns>true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.HasTable(System.String,OnTrack.Database.iormConnection@,System.Object)">
	<summary>
 returns True if data store has the table name
 </summary>
	<param name="tablename"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.GetIndex(System.Object@,OnTrack.Database.IndexDefinition@,System.Boolean,System.Boolean,OnTrack.Database.iormConnection@)">
	<summary>
 gets or creates a native index object out of a indexdefinition
 </summary>
	<param name="nativeTable"></param>
	<param name="indexdefinition"></param>
	<param name="forceCreation"></param>
	<param name="createOrAlter"></param>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.GetTargetTypeFor(OnTrack.Database.otDataType)">
	<summary>
 returns the target type for a OTDB FieldType - MAPPING
 </summary>
	<param name="type"></param>
	<remarks></remarks>
	<returns></returns>
</member><member name="M:OnTrack.Database.adonetDBDriver.InstallOnTrackDatabase(System.Boolean,System.String[])">
	<summary>
 Install the schema of Ontrack Database
 </summary>
	<param name="askBefore"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.VerifyOnTrackDatabase(System.String[],System.Boolean,System.Boolean)">
	<summary>
 Checks if the most important objects are here
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.RaiseRequestBootstrapInstall(System.Object,System.EventArgs@)">
	<summary>
  raise the RequestBootStrapInstall Event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.CreateGlobalDomain(System.Object@)">
	<summary>
 creates the entry for the global domain in bootstrapping
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.HasAdminUserValidation(System.Object@)">
	<summary>
 returns true if there is a Admin User in the user definition of this database
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetDBDriver.GetUserValidation(System.String,System.Boolean,System.Object@)">
	<summary>
 Gets the def user validation structure from the database.
 </summary>
	<param name="Username">The username.</param>
	<param name="SelectAnonymous"></param>
	<param name="nativeConnection">The native connection.</param>
	<returns></returns>
</member><member name="P:OnTrack.Database.InternalConnectionEventArgs.NativeConnection">
	<summary>
 Gets the native connection.
 </summary>
	<value>The native connection.</value>
</member><member name="P:OnTrack.Database.InternalConnectionEventArgs.Connection">
	<summary>
 Gets the error.
 </summary>
	<value>The error.</value>
</member><member name="P:OnTrack.Database.adonetConnection.IsNativeInternalLocked">
	<summary>
 Gets or sets the is native internal locked.
 </summary>
	<value>The is native internal locked.</value>
</member><member name="P:OnTrack.Database.adonetConnection.NativeConnection">
	<summary>
 Gets the native connection.
 </summary>
	<value>The native connection.</value>
</member><member name="P:OnTrack.Database.adonetConnection.IsConnected">
	<summary>
 Gets the is connected.
 </summary>
	<value>The is connected.</value>
</member><member name="M:OnTrack.Database.adonetConnection.Disconnect">
	<summary>
 Disconnects this instance of the connection with raising events
 </summary>
	<returns></returns>
</member><member name="P:OnTrack.Database.adonetConnection.NativeInternalConnection">
	<summary>
 gets the native internal connection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetConnection.CreateNewNativeConnection">
	<summary>
 create a new native Connection (not connected)
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetConnection.Connect(System.Boolean,OnTrack.Database.otAccessRight,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Connects the specified FORCE.
 </summary>
	<param name="FORCE">The FORCE.</param>
	<param name="AccessRequest">The access request.</param>
	<param name="OTDBUsername">The OTDB username.</param>
	<param name="OTDBPassword">The OTDB password.</param>
	<param name="exclusive">The exclusive.</param>
	<param name="notInitialize">The not initialize.</param>
	<returns></returns>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.CharachterOctetLength">
	<summary>
 Gets or sets the length of the charachter octet.
 </summary>
	<value>The length of the charachter octet.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.DateTimePrecision">
	<summary>
 Gets or sets the date time precision.
 </summary>
	<value>The date time precision.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.NumericScale">
	<summary>
 Gets or sets the numeric scale.
 </summary>
	<value>The numeric scale.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.NumericPrecision">
	<summary>
 Gets or sets the numeric precision.
 </summary>
	<value>The numeric precision.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.Catalog">
	<summary>
 Gets or sets the catalog.
 </summary>
	<value>The catalog.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.DataType">
	<summary>
 Gets or sets the type of the data.
 </summary>
	<value>The type of the data.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.Default">
	<summary>
 Gets or sets the default.
 </summary>
	<value>The default.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.HasDefault">
	<summary>
 Gets or sets the has default.
 </summary>
	<value>The has default.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.CharacterMaxLength">
	<summary>
 Gets or sets the length of the character max.
 </summary>
	<value>The length of the character max.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.Ordinal">
	<summary>
 Gets or sets the ordinal.
 </summary>
	<value>The ordinal.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.IsNullable">
	<summary>
 Gets or sets the is nullable.
 </summary>
	<value>The is nullable.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.ColumnName">
	<summary>
 Gets or sets the name of the column.
 </summary>
	<value>The name of the column.</value>
</member><member name="P:OnTrack.Database.adonetTableSchema.adoNetColumnDescription.Description">
	<summary>
 Gets or sets the description.
 </summary>
	<value>The description.</value>
</member><member name="M:OnTrack.Database.adonetTableSchema.reset">
	<summary>
 resets the TableSchema
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.adonetTableSchema.TableID">
	<summary>
 Gets or sets the table ID.
 </summary>
	<value>The table ID.</value>
</member><member name="M:OnTrack.Database.adonetTableSchema.GetColumnDescription(System.UInt16)">
	<summary>
 get the ColumnDescription of Field 
 </summary>
	<param name="Index">Index no</param>
	<returns>ColumnDescription</returns>
	<remarks>Returns Nothing on range bound exception</remarks>
</member><member name="M:OnTrack.Database.adonetTableSchema.GetCommand(System.String,OnTrack.Database.adonetTableSchema.CommandType)">
	<summary>
 return a Command
 </summary>
	<param name="indexname"></param>
	<param name="commandtype"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableSchema.CreateNativeDBParameter">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableSchema.CreateNativeDBCommand">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableSchema.IsNativeDBTypeOfVar(System.Object)">
	<summary>
	</summary>
	<param name="type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableSchema.BuildCommand(System.String,OnTrack.Database.adonetTableSchema.CommandType,System.Data.IDbConnection@)">
	<summary>
 buildcommand builds per Indexname and commandtype the Command and prepare it
 </summary>
	<param name="commandtype">type of clsADONETTableSchema.commandtype</param>
	<param name="indexname">name of the index</param>
	<returns>the IDBCommand </returns>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.adonetTableSchema">
	<summary>
 CLASS describes the schema per table of the database itself
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.#ctor(OnTrack.Database.iormConnection,System.String,System.Boolean)">
	<summary>
 constructor
 </summary>
	<param name="connection"></param>
	<param name="TableID"></param>
	<param name="forceSchemaReload"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.adonetTableStore.CacheTable">
	<summary>
 gets the current cache Table
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.adonetTableStore.CacheViews">
	<summary>
 gets an enumerable of the cached views (indices)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.Convert2ObjectData(System.Object,System.Object,System.Object@,System.Nullable{System.Boolean},System.Object,System.Boolean@)">
	<summary>
 converts data to object data
 </summary>
	<param name="index"></param>
	<param name="invalue"></param>
	<param name="outvalue"></param>
	<param name="abostrophNecessary"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.IsCacheInitialized">
	<summary>
 if Cache is Initialized and running 
 </summary>
	<returns>return true</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.InitializeCache(System.Boolean)">
	<summary>
 Initialize Cache 
 </summary>
	<returns>true if successfull </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.CreateNativeDBCommand(System.String,System.Data.IDbConnection@)">
	<summary>
 specific Command
 </summary>
	<param name="commandstr"></param>
	<param name="nativeConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.DelRecordByPrimaryKey(System.Object[]@,System.Boolean)">
	<summary>
 deletes a Record in the database by Primary key
 </summary>
	<param name="primaryKeyArray">Array of Objects as Primary Key</param>
	<param name="silent"></param>
	<returns>true if successfull </returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.GetRecordByPrimaryKey(System.Object[]@,System.Boolean)">
	<summary>
 GetRecordbyPrimaryKey returns a clsOTDBRecord object by the Primarykey from the Database
 </summary>
	<param name="primaryKeyArray">PrimaryKey Array</param>
	<param name="silent"></param>
	<returns>returns Nothing if not found otherwise a clsOTDBRecord</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.UpdateDBDataTable(System.Data.IDbDataAdapter@,System.Data.DataTable@)">
	<summary>
 Update a Datatable with the adapter
 </summary>
	<param name="datatable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.GetRecordsBySqlCommand(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.List{OnTrack.Database.ormSqlCommandParameter}@)">
	<summary>
 returns a collection of records selected by this helper command which creates an SqlCommand with an ID or reuse one
 </summary>
	<param name="ID"></param>
	<param name="wherestr"></param>
	<param name="fullsqlstr"></param>
	<param name="innerjoin"></param>
	<param name="orderby"></param>
	<param name="silent"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.adonetTableStore.PersistCache(OnTrack.Database.ormRecord@,System.DateTime,System.Boolean)">
	<summary>
 persists aRecord to the database if aRecord is created or loaded
 </summary>
	<param name="record">clsOTDBRecord</param>
	<param name="timestamp">the Timestamp to be used for the ChangedOn or CreatedOn</param>
	<param name="silent">no messages</param>
	<returns>true if successfull and written, false if error or no changes</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.ormDataObject.GetRelationStatus(System.String)">
	<summary>
 Returns the Status of the Relation
 </summary>
	<param name="relationname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.DataObjectRelationMgr.EventArgs.InfuseMode">
	<summary>
 Gets or sets the mode.
 </summary>
	<value>The mode.</value>
</member><member name="P:OnTrack.Database.DataObjectRelationMgr.EventArgs.Dataobject">
	<summary>
 Gets or sets the dataobject.
 </summary>
	<value>The dataobject.</value>
</member><member name="P:OnTrack.Database.DataObjectRelationMgr.EventArgs.RelationAttribute">
	<summary>
 Gets or sets the relationattribute.
 </summary>
	<value>The relationattribute.</value>
</member><member name="P:OnTrack.Database.DataObjectRelationMgr.EventArgs.FieldInfo">
	<summary>
 Gets or sets the fieldinfo.
 </summary>
	<value>The fieldinfo.</value>
</member><member name="P:OnTrack.Database.DataObjectRelationMgr.EventArgs.Finished">
	<summary>
 Gets or sets the finished - do not proceed.
 </summary>
	<value>The proceed.</value>
</member><member name="P:OnTrack.Database.DataObjectRelationMgr.EventArgs.Objects">
	<summary>
 Gets the objects.
 </summary>
	<value>The objects.</value>
</member><member name="T:OnTrack.Database.DataObjectRelationMgr.EventArgs">
	<summary>
 Event Handling Arguments
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.Database.DataObjectRelationMgr.RelationStatus">
	<summary>
 status enumeration of the relation
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.DataObjectRelationMgr.DataObjectRelationMGr_OnRuntimeSwitchOff(System.Object,OnTrack.Database.ormDataObjectEventArgs)">
	<summary>
 Event Handler for the Runtime Switch off Event - check which relations we regards as loaded
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.DataObjectRelationMgr.Initialize">
	<summary>
 initialize 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.DataObjectRelationMgr.ObjectMessageLog">
	<summary>
 returns a ObjectMessageLog
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.DataObjectRelationMgr.Relationnames">
	<summary>
 gets the Relation Names of this data object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.Database.DataObjectRelationMgr.Status(System.String)">
	<summary>
 returns true if the relation is loaded otherwise false
 </summary>
	<param name="relationname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.DataObjectRelationMgr.Contains(System.String)">
	<summary>
 returns true if the relationname is in the relation manager
 </summary>
	<param name="relationname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.DataObjectRelationMgr.GetObjectsFromContainer(System.String,System.String,System.Boolean,System.Object)">
	<summary>
 selects dataobject from a relation mapped entry : optional if an entryname exist: select the data objects having the entryname containing the value
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.DataObjectRelationMgr.InfuseRelatedObjectIntoContainer(System.String,OnTrack.Database.otInfuseMode,System.Collections.Generic.List{OnTrack.Database.iormPersistable})">
	<summary>
	</summary>
	<param name="relationname"></param>
	<param name="mode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.DataObjectRelationMgr.LoadNInfuseRelations(OnTrack.Database.otInfuseMode,System.Collections.Generic.List{System.String}@,System.Boolean)">
	<summary>
 returns dataobjects from a Container-Data Structure
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.DataObjectRelationMgr.CreateNInfuseRelations(OnTrack.Database.otInfuseMode,System.Collections.Generic.List{System.String}@,System.Boolean)">
	<summary>
 returns dataobjects from a Container-Data Structure
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.DataObjectRelationMgr.CascadeRelations(System.Boolean,System.Boolean,System.String,System.DateTime,System.Boolean,System.Collections.Generic.List{System.String}@)">
	<summary>
 returns dataobjects from a Container-Data Structure
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.DataObjectRelationMgr.DataObject_OnObjectMessageAdded(System.Object,OnTrack.ObjectMessageLog.EventArgs)">
	<summary>
 Event Handler for ObjectMessageLogs propagate
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.DataObjectRelationMgr.GetRelatedObjectsByOperation(System.String,System.String)">
	<summary>
 get the related objects from a call to an operation
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.Database.DataObjectRelationMgr.GetEnumerator">
	<summary>
 Returns an enumerator of ormRelationAttributes that iterates through a collection.
 </summary>
	<returns>
 An <see cref="T:System.Collections.IEnumerator"/> object that can be
 used to iterate through the collection.
 </returns>
</member><member name="T:OnTrack.Database.DataObjectRelationMgr">
	<summary>
 Class to administrate the lifecycle status of a relation in the data object
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassRepository.EventArgs.Description">
	<summary>
 Gets the object class description.
 </summary>
	<value>The objectdefinition.</value>
</member><member name="P:OnTrack.ObjectClassRepository.EventArgs.Objectname">
	<summary>
 Gets the objectname.
 </summary>
	<value>The objectname.</value>
</member><member name="M:OnTrack.ObjectClassRepository.#ctor">
	<summary>
 constructor of the object class repository
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassRepository.Count">
	<summary>
 returns the count for the class description store (all classes in store)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassRepository.ObjectClassDescriptions">
	<summary>
 returns an IEnumerable of all ObjectClassDescriptions
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassRepository.BootstrapSchemaChecksum">
	<summary>
 gets the Checksum of the ObjectClassRepository for Bootstrapping classes 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.AlterTableAttribute(OnTrack.Database.ormSchemaTableAttribute@,System.Reflection.FieldInfo)">
	<summary>
 Add oder modify a table attribute 
 </summary>
	<param name="tableattribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetBootStrapObjectClassDescriptions">
	<summary>
 returns the names of the bootstrapping tables
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetBootStrapTableNames">
	<summary>
 returns the names of the bootstrapping tables
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.CreateInstance(System.Type)">
	<summary>
 returns the ObjectClass Type for an object class name
 </summary>
	<param name="type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetObjectClassDescription(System.Type)">
	<summary>
 returns the ObjectClass Description
 </summary>
	<param name="type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetTableAttribute(System.String)">
	<summary>
 returns the SchemaTableAttribute for a table name
 </summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.SubstituteReferencedTableColumn(OnTrack.Database.ormSchemaTableColumnAttribute@)">
	<summary>
 substitute referenced properties in the reference
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.SubstituteReferencedObjectEntry(OnTrack.Database.ormObjectEntryAttribute@)">
	<summary>
 substitute referenced properties in the reference
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetSchemaColumnAttribute(System.String,System.String)">
	<summary>
 returns the schemaColumnAttribute for a given columnname and tablename
 </summary>
	<param name="columnname"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetObjectClassDescriptionsByTable(System.String,System.Boolean)">
	<summary>
 gets a list of ObjectClassDescriptions per tablename or empty if none
 </summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetObjectClassDescriptions(System.String)">
	<summary>
 returns a list of ObjectClassDescriptions per module name
 </summary>
	<param name="modulename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetModulenames">
	<summary>
 returns a list of all Modulenames
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.GetObjectClassesForTable(System.String,System.Boolean)">
	<summary>
 gets a list of object classes which are using a tablename for persistence
 </summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.RegisterCacheManager(OnTrack.Database.iormObjectCacheManager)">
	<summary>
 register a CacheManager at the ObjectClassRepository
 </summary>
	<param name="cache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassRepository.Initialize(System.Boolean)">
	<summary>
 Initialize the Repository
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectClassRepository">
	<summary>
 store for attribute information in the dataobject classes - relies in the CORE
 </summary>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectClassDescription.CreateInstanceDelegate">
	<summary>
 Delegates
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:OnTrack.ObjectClassDescription._Type">
	<summary>
 internal Store
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.#ctor(System.Type,OnTrack.ObjectClassRepository)">
	<summary>
 constructor
 </summary>
	<param name="class"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.ObjectAttribute">
	<summary>
 Gets or sets the object attribute.
 </summary>
	<value>The object attribute.</value>
</member><member name="P:OnTrack.ObjectClassDescription.PrimaryKeyEntryNames">
	<summary>
 Gets or sets the object attribute.
 </summary>
	<value>The object attribute.</value>
</member><member name="P:OnTrack.ObjectClassDescription.ID">
	<summary>
 returns the ID of the ObjectClassDescription (the constObjectID)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.Type">
	<summary>
 Gets or sets the type.
 </summary>
	<value>The type.</value>
</member><member name="P:OnTrack.ObjectClassDescription.Name">
	<summary>
 Name of the Class
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.PrimaryTable">
	<summary>
 gets the primary table
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.Tables">
	<summary>
 gets a List of all table names
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.Querynames">
	<summary>
 gets a List of all queries
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.Entrynames">
	<summary>
 gets a List of all entry names
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.ColumnNames">
	<summary>
 gets a List of all enabled column names
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.TransactionAttributes">
	<summary>
 gets a List of all active object transactions
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.OperationAttributes">
	<summary>
 gets a List of all object operations
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.ObjectEntryAttributes">
	<summary>
 gets a List of all column attributes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.MappedColumnNames">
	<summary>
 gets a List of all column attributes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.RelationNames">
	<summary>
 gets a List of all active relation names
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.IndexAttributes">
	<summary>
 gets a List of all index attributes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.RelationAttributes">
	<summary>
 gets a List of all relation Attributes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.ObjectClassDescription.TableAttributes">
	<summary>
 gets a List of all table Attributes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.GetSchemaTableAttribute(System.String,System.Boolean)">
	<summary>
 returns the SchemaTableAttribute for a table name
 </summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.GetMethodInfoHook(System.String)">
	<summary>
 returns a MethodInfo for Dataoperation Hooks
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.ToString">
	<summary>
 ToString Function
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.SubstituteDefaultValues(OnTrack.Database.ormObjectEntryAttribute)">
	<summary>
 substitute the default values for object entry attributes
 </summary>
	<param name="attribute"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.GetQueryAttribute(System.String,System.Boolean)">
	<summary>
 returns a relation attribute by name (tablename is obsolete)
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.GetMappedColumnFieldInfos(System.String,System.String,System.Boolean)">
	<summary>
 returns the mapped FieldInfos for a given columnname and tablename
 </summary>
	<param name="columnname"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeTableAttribute(System.Attribute,System.String,System.Boolean)">
	<summary>
 initialize a table attribute to the Description
 </summary>
	<param name="attribute"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeObjectEntryAttribute(System.Attribute,System.String,System.String,System.String,System.Boolean)">
	<summary>
 Initialize a ObjectEntry Attribute
 </summary>
	<param name="attribute"></param>
	<param name="name"></param>
	<param name="tablename"></param>
	<param name="fieldvalue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeEntryMapping(System.Attribute,System.String,System.String,System.Reflection.FieldInfo,System.Boolean)">
	<summary>
 Initialize an ObjectEntry Mapping
 </summary>
	<param name="attribute"></param>
	<param name="tablename"></param>
	<param name="value"></param>
	<param name="fieldinfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeRelationAttribute(System.Attribute,System.String,System.String,System.String,System.Boolean)">
	<summary>
 Initialize a Relation Attribute to the Description
 </summary>
	<param name="attribute"></param>
	<param name="name"></param>
	<param name="tablename"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeForeignKeyAttribute(System.Attribute,System.String,System.String,System.String,System.Boolean)">
	<summary>
 Initialize a Relation Attribute to the Description
 </summary>
	<param name="attribute"></param>
	<param name="name"></param>
	<param name="tablename"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeIndexAttribute(System.Attribute,System.String,System.String,System.String,System.Boolean)">
	<summary>
 Initialize the index Attribute
 </summary>
	<param name="attribute"></param>
	<param name="name"></param>
	<param name="tablename"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeObjectAttributeByField(System.Attribute,System.Reflection.FieldInfo)">
	<summary>
 Initialize the ObjectAttribute by a const field member of the class
 </summary>
	<param name="attribute"></param>
	<param name="fieldinfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeMethodRetrieveHook(System.Reflection.MethodInfo)">
	<summary>
 set the hook for the generic Retrieve
 </summary>
	<param name="methodinfo"></param>
	<returns>True if the hook was set</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.InitializeMethodCreateHook(System.Reflection.MethodInfo)">
	<summary>
 Initialize the right CreateDataObject Function
 </summary>
	<param name="methodinfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.Initialize(System.Boolean)">
	<summary>
 refresh all the loaded information
 </summary>
	<param name="force"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.CreateILGMethodInvoker(System.Reflection.MethodInfo)">
	<summary>
 generates an ILG Method Invoker from a method info
 </summary>
	<param name="methodInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.CreateLambdaInstance(System.Type,System.Type)">
	<summary>
 Searches an instanceType constructor with delegateType-matching signature and constructs delegate of delegateType creating new instance of instanceType.
 Instance is casted to delegateTypes's return type. 
 Delegate's return type must be assignable from instanceType.
 </summary>
	<param name="delegateType">Type of delegate, with constructor-corresponding signature to be constructed.</param>
	<param name="instanceType">Type of instance to be constructed.</param>
	<returns>Delegate of delegateType wich constructs instance of instanceType by calling corresponding instanceType constructor.</returns>
</member><member name="M:OnTrack.ObjectClassDescription.CreateLambdaInstance``1(System.Type)">
	<summary>
 create Instance
 </summary>
	<typeparam name="TDelegate"></typeparam>
	<param name="instanceType"></param>
	<returns></returns>
	<remarks>
 Dim newList = Constructor.Compile(Of Func(Of Integer, IList(Of [String])))(GetType(List(Of [String])))
 Dim list = newList(100)
 </remarks>
</member><member name="M:OnTrack.ObjectClassDescription.CreateILGGetterDelegate``2(System.Type,System.Reflection.FieldInfo)">
	<summary>
 Creates a IL GET VALUE
 </summary>
	<typeparam name="T">Type of the class of the setter variable</typeparam>
	<typeparam name="TValue">Type of the value</typeparam>
	<param name="field">fieldinfo </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.ObjectClassDescription.CreateILGSetterDelegate``2(System.Type,System.Reflection.FieldInfo)">
	<summary>
 Creates a IL SET VALUE
 </summary>
	<typeparam name="T">Type of the class of the setter variable</typeparam>
	<typeparam name="TValue">Type of the value</typeparam>
	<param name="field">fieldinfo </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.ObjectClassDescription">
	<summary>
  class to hold per Class the orM Attributes and FieldInfo for Mapping and Relation
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.IsNull">
	<summary>
 Gets or sets the is null.
 </summary>
	<value>The is null.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.IsEmpty">
	<summary>
 Gets or sets the is empty.
 </summary>
	<value>The is empty.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.Datatype">
	<summary>
 Gets or sets the datatype.
 </summary>
	<value>The datatype.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.Msglog">
	<summary>
 Gets or sets the msglog.
 </summary>
	<value>The msglog.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.result">
	<summary>
 Gets or sets the convert succeeded.
 </summary>
	<value>The convert succeeded.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.Value">
	<summary>
 returns the value to be converted
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.ConvertedValue">
	<summary>
 returns the converted value 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.Dbvalue">
	<summary>
 Gets or sets the dbvalue.
 </summary>
	<value>The dbvalue.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.Hostvalue">
	<summary>
 Gets or sets the hostvalue.
 </summary>
	<value>The hostvalue.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.HostValueisNull">
	<summary>
 Gets or sets the host valueis null.
 </summary>
	<value>The host valueis null.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.HostValueisEmpty">
	<summary>
 Gets or sets the host valueis empty.
 </summary>
	<value>The host valueis empty.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.DbValueisNull">
	<summary>
 Gets or sets the db valueis null.
 </summary>
	<value>The db valueis null.</value>
</member><member name="P:OnTrack.XChange.ConvertRequestEventArgs.DbValueIsEmpty">
	<summary>
 Gets or sets the db value is empty.
 </summary>
	<value>The db value is empty.</value>
</member><member name="T:OnTrack.XChange.ConvertRequestEventArgs">
	<summary>
 Arguments for the ConvertRequest and Result Arguments
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.#ctor(OnTrack.XChange.XChangeConfiguration)">
	<summary>
 Constructor
 </summary>
	<param name="xchangeDefaultConfig"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XBag.MessageLog">
	<summary>
 returns the messagelog associated with this XBag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XBag.ContextIdentifier">
	<summary>
 Gets or sets the contextid.
 </summary>
	<value>The contextid.</value>
</member><member name="P:OnTrack.XChange.XBag.TupleIdentifier">
	<summary>
 Gets or sets the TupleIdentifier.
 </summary>
	<value>The contextid.</value>
</member><member name="P:OnTrack.XChange.XBag.EntityIdentifier">
	<summary>
 Gets or sets the TupleIdentifier.
 </summary>
	<value>The contextid.</value>
</member><member name="P:OnTrack.XChange.XBag.DefaultEnvelope">
	<summary>
 Gets the default envelope.
 </summary>
	<value>The default envelope.</value>
</member><member name="P:OnTrack.XChange.XBag.XChangeCommand">
	<summary>
 Gets or sets the top CMD.
 </summary>
	<value>The top CMD.</value>
</member><member name="P:OnTrack.XChange.XBag.PreparedOn">
	<summary>
 Gets or sets the prepared on.
 </summary>
	<value>The prepared on.</value>
</member><member name="P:OnTrack.XChange.XBag.ProcessedOn">
	<summary>
 Gets or sets the processed on.
 </summary>
	<value>The processed on.</value>
</member><member name="P:OnTrack.XChange.XBag.IsPrepared">
	<summary>
 Gets or sets the is prepared.
 </summary>
	<value>The is prepared.</value>
</member><member name="P:OnTrack.XChange.XBag.IsProcessed">
	<summary>
 Gets or sets the is processed.
 </summary>
	<value>The is processed.</value>
</member><member name="P:OnTrack.XChange.XBag.ProcessedOK">
	<summary>
 returns true if the successfully processed
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XBag.XChangeDefaultConfig">
	<summary>
 Gets the xchangeconfig.
 </summary>
	<value>The xchangeconfig.</value>
</member><member name="M:OnTrack.XChange.XBag.Clear">
	<summary>
 clear all entries remove all envelopes
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.AddEnvelope(System.Int64,OnTrack.XChange.XEnvelope,System.Boolean)">
	<summary>
 adds an envelope to the bag by key
 </summary>
	<param name="key"></param>
	<param name="envelope"></param>
	<param name="removeIfExists"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.AddEnvelope(System.String,OnTrack.XChange.XEnvelope,System.Boolean)">
	<summary>
 adds an envelope to the bag by key
 </summary>
	<param name="key"></param>
	<param name="envelope"></param>
	<param name="removeIfExists"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.AddEnvelope(OnTrack.Database.Ordinal,OnTrack.XChange.XEnvelope,System.Boolean)">
	<summary>
 adds an envelope to the bag by ordinal
 </summary>
	<param name="ordinal"></param>
	<param name="envelope"></param>
	<param name="removeIfExists"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.ReplaceEnvelope(System.Int64,OnTrack.XChange.XEnvelope)">
	<summary>
 replaces or adds an envelope against another with same key
 </summary>
	<param name="key"></param>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.ReplaceEnvelope(System.String,OnTrack.XChange.XEnvelope)">
	<summary>
 replaces or adds an envelope against another with same key
 </summary>
	<param name="key"></param>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.ReplaceEnvelope(OnTrack.Database.Ordinal,OnTrack.XChange.XEnvelope)">
	<summary>
 replaces or adds an envelope against another with same ordinal
 </summary>
	<param name="ordinal"></param>
	<param name="envelope"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.Item(System.Object)">
	<summary>
 returns an Envelope by key
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.GetEnvelope(System.Int64)">
	<summary>
 returns an Envelope by key
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.GetEnvelope(System.String)">
	<summary>
  returns an Envelope by key
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.GetEnvelope(OnTrack.Database.Ordinal)">
	<summary>
  returns an Envelope by ordinal
 </summary>
	<param name="ordinal"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.GetEnumerator">
	<summary>
 gets an enumarator over the envelopes
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.OnRequestConvert2HostValue(System.Object,OnTrack.XChange.ConvertRequestEventArgs)">
	<summary>
 Event handler for the Slots OnRequestConvert2Hostvalue
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.OnRequestConvert2DBValue(System.Object,OnTrack.XChange.ConvertRequestEventArgs)">
	<summary>
 EventHandler for the Slots OnRequestConvert2DBValue
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.Prepare(System.Boolean)">
	<summary>
 Prepares the XBag for the Operations to run on it
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.RunPreXCheck(OnTrack.ObjectMessageLog,System.ComponentModel.BackgroundWorker@)">
	<summary>
 Runs the XChange PreCheck
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XBag.RunXChange(OnTrack.ObjectMessageLog,System.ComponentModel.BackgroundWorker@)">
	<summary>
 Runs the XChange
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XBag">
	<summary>
 XBag is an arbitary runtime and non persistable XChange Data Object which constists of different XEnvelopes ordered by
 ordinals.
 An XBag an Default persistable XChangeConfig
 </summary>
	<remarks>
 design principles:
 
 the XBag consists of XEnvelopes which are the record or line by line based elements
 Processing the XBag means processing all the envelopes in the bag
 
 prechecking is necessary to process the elements
 
 ''' for transformation of data values of the slots especially in the case of special values of the exchanging sub system
 the events 
 
 ConvertRequest2HostValue
 ConvertRequest2DBValue 
 
 can be used. These are propagated to the XBAG level
 
 </remarks>
</member><member name="P:OnTrack.XChange.XSlot.EventArgs.XSlot">
	<summary>
 Gets the xchang config slot.
 </summary>
	<value>The slot.</value>
</member><member name="T:OnTrack.XChange.XSlot.EventArgs">
	<summary>
  Event Argument Class
 </summary>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XSlot.ContextIdentifier">
	<summary>
 Gets or sets the contextid.
 </summary>
	<value>The contextid.</value>
</member><member name="P:OnTrack.XChange.XSlot.TupleIdentifier">
	<summary>
 Gets or sets the TupleIdentifier.
 </summary>
	<value>The contextid.</value>
</member><member name="P:OnTrack.XChange.XSlot.EntityIdentifier">
	<summary>
 Gets or sets the TupleIdentifier.
 </summary>
	<value>The contextid.</value>
</member><member name="P:OnTrack.XChange.XSlot.IsPrecheckedOk">
	<summary>
 gets the pre checked result - only valid if ISPrechecked is true
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XSlot.IsXChanged">
	<summary>
 returns True if Slot is supposed to be XChanged
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XSlot.IsPrechecked">
	<summary>
 gets the IsPrechecked flag if pre check has Run
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XSlot.Ordinal">
	<summary>
 Gets or sets the ordinal.
 </summary>
	<value>The ordinal.</value>
</member><member name="P:OnTrack.XChange.XSlot.IsNull">
	<summary>
 Gets or sets the is null.
 </summary>
	<value>The is null.</value>
</member><member name="P:OnTrack.XChange.XSlot.IsEmpty">
	<summary>
 Gets or sets the is empty.
 </summary>
	<value>The is empty.</value>
</member><member name="P:OnTrack.XChange.XSlot.HostValue">
	<summary>
 Gets or sets the host value.
 </summary>
	<value>The value.</value>
</member><member name="P:OnTrack.XChange.XSlot.Datatype">
	<summary>
 gets or sets the datatype of the slot -cannot be set if this is bound to a column entry
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XSlot.DBValue">
	<summary>
 Gets or sets the Database value.
 </summary>
	<value>The value.</value>
</member><member name="P:OnTrack.XChange.XSlot.XChangeEntry">
	<summary>
 Gets or sets the XChange Entry.
 </summary>
	<value>The XchangeObjectEntry.</value>
</member><member name="P:OnTrack.XChange.XSlot.MessageLog">
	<summary>
 returns the messagelog associated with this xEnvelope
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XSlot">
	<summary>
 a XSlot represents a Slot in an XEnvelope
 </summary>
	<remarks>
 Design principles:
 
 the xslot is a non-persistable data container of an envelope to which it belongs. Basically the xslot is also assigned to one or many otdb
 object entries but is ordered by the ordering ordinal (which is a column or something the like).
 
 an xslot holds the data in the host value presentation which is the value presentation of the exchanging sub system.
 the data will be transformed to the otdb datatype by the property dbvalue which is used to store the data value in OnTrack
 
 setting a hostvalue or a dbvalue should also be combined with setting the special values
 isEmpty which means that the slot has not value at all and is by intention an empty slot which cannot be used to store data
 IsNull which means the slot has the NOTHING  or NULL value by intention and can be used to set also the database value to null
 
 for transformation of data values especially in the case of special values of the exchanging sub system
 the events 
 
 ConvertRequest2HostValue
 ConvertRequest2DBValue 
 
 can be used. These are propagated to the XBAG level
 
 the Event OnSlotValueChanged can be used to be informed if the slot value changes
 
 </remarks>
</member><member name="F:OnTrack.XChange.XEnvelope._trackmessagelog">
	<summary>
 track messagelog as objectmessagelog to track the events of this additional messagelog and propagate
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XEnvelope._contextid">
	<summary>
  for the object message log envirorment
 </summary>
	<remarks></remarks>
</member><member name="F:OnTrack.XChange.XEnvelope._validator">
	<summary>
 Validator for Validating Prechecks
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.#ctor(OnTrack.XChange.XBag)">
	<summary>
 constructor
 </summary>
	<param name="xbag"></param>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.ContextIdentifier">
	<summary>
 Gets or sets the contextid.
 </summary>
	<value>The contextid.</value>
</member><member name="P:OnTrack.XChange.XEnvelope.TupleIdentifier">
	<summary>
 Gets or sets the TupleIdentifier.
 </summary>
	<value>The contextid.</value>
</member><member name="P:OnTrack.XChange.XEnvelope.EntityIdentifier">
	<summary>
 Gets or sets the TupleIdentifier.
 </summary>
	<value>The contextid.</value>
</member><member name="P:OnTrack.XChange.XEnvelope.IsPrechecked">
	<summary>
 get the prechecked flag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.PrecheckTimestamp">
	<summary>
 gets the timestamp for the precheck
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.IsProcessed">
	<summary>
 returns true if the envelope was xchanged / processed
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.ProcessedTimestamp">
	<summary>
 Gets or sets the processed date.
 </summary>
	<value>The processed date.</value>
</member><member name="P:OnTrack.XChange.XEnvelope.MessageLog">
	<summary>
 returns the messagelog associated with this xEnvelope
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:OnTrack.XChange.XEnvelope.Xchangeconfig">
	<summary>
 Gets the xchangeconfig.
 </summary>
	<value>The xchangeconfig.</value>
</member><member name="P:OnTrack.XChange.XEnvelope.trackMessageLog">
	<summary>
 sets an interim Messagelog to track 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.RemoveSlot(System.Int64)">
	<summary>
 remove the slot by ordinal
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.RemoveSlot(System.String)">
	<summary>
 remove the slot by ordinal
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.RemoveSlot(OnTrack.Database.Ordinal)">
	<summary>
 remove the slot by ordinal
 </summary>
	<param name="ordinal"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.Clear">
	<summary>
 clear the Envelope from all slots
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.SetSlotValue(System.Int64,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 sets the value of an existing slot given by ordinal
 </summary>
	<param name="key"></param>
	<param name="value"></param>
	<param name="isHostValue"></param>
	<param name="overwrite"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.SetSlotValue(System.String,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 sets the value of an existing slot given by ordinal
 </summary>
	<param name="key"></param>
	<param name="value"></param>
	<param name="isHostValue"></param>
	<param name="overwrite"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.SetSlotValue(OnTrack.Database.Ordinal,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 set the value of an existing slot given by ordinal
 </summary>
	<param name="ordinal"></param>
	<param name="value"></param>
	<param name="isHostValue"></param>
	<param name="overwrite"></param>
	<returns>returns true if successfull</returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlot(OnTrack.Database.Ordinal@)">
	<summary>
 returns a Slot by mapping ordinal
 </summary>
	<param name="ordinal"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.AddSlot(OnTrack.XChange.XSlot@,System.Boolean)">
	<summary>
 Add a Slot by ordinal
 </summary>
	<param name="slot"></param>
	<param name="replaceSlotIfExists"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.AddSlotByObjectEntryName(System.String,System.Object,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,OnTrack.XChange.otXChangeCommandType)">
	<summary>
 Add a Slot by entryname
 </summary>
	<param name="entryname"></param>
	<param name="value"></param>
	<param name="isHostValue"></param>
	<param name="objectname"></param>
	<param name="overwriteValue"></param>
	<param name="extendXConfig"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlotValueByObjectEntryName(System.String,System.String,System.Boolean)">
	<summary>
 returns the slot's value by entryname
 </summary>
	<param name="entryname"></param>
	<param name="objectname"></param>
	<param name="asHostValue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.HasSlotByObjectEntryName(System.String,System.String)">
	<summary>
 returns true if there is a slot by entryname
 </summary>
	<param name="entryname"></param>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetEntryByObjectEntryname(System.String,System.String)">
	<summary>
 returns the Attribute of a slot by entryname and objectname
 </summary>
	<param name="entryname"></param>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlotValue(System.Int64,System.Boolean)">
	<summary>
 returns the Slotsvalue as hostvalue or dbvalue by ordinal key
 </summary>
	<param name="key"></param>
	<param name="asHostvalue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlotValue(System.String,System.Boolean)">
	<summary>
 returns the Slotsvalue as hostvalue or dbvalue by ordinal key
 </summary>
	<param name="key"></param>
	<param name="asHostvalue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetSlotValue(OnTrack.Database.Ordinal,System.Boolean)">
	<summary>
 returns the Slotsvalue as hostvalue or dbvalue by ordinal
 </summary>
	<param name="ordinal"></param>
	<param name="asHostvalue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.XEnvelope_OnSlotValueChanged(System.Object,OnTrack.XChange.XSlot.EventArgs)">
	<summary>
 Eventhandler for the Slots OnSlotValueChanged
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.OnRequestConvert2HostValue(System.Object,OnTrack.XChange.ConvertRequestEventArgs)">
	<summary>
 Eventhandler for the Slots OnRequestConvert2Hostvalue
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.OnRequestConvert2DBValue(System.Object,OnTrack.XChange.ConvertRequestEventArgs)">
	<summary>
 EventHandler for the Slots OnRequestConvert2DBValue
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.GetObjectXCmd(System.String)">
	<summary>
 returns the Object XCommand
 </summary>
	<param name="objectname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.RunXChange(OnTrack.ObjectMessageLog,System.Boolean)">
	<summary>
 run XChange for this Envelope
 </summary>
	<param name="msglog"></param>
	<param name="suspendoverload"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.XEnvelope_OnObjectMessageAdded(System.Object,OnTrack.ObjectMessageLog.EventArgs)">
	<summary>
 Event Handler for ObjectMessageLogs propagate
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XEnvelope.XEnvelope_OnXSlotMessage(System.Object,OnTrack.ObjectMessageLog.EventArgs)">
	<summary>
 Handler for OnObjectMessage Added Event on one of the slots
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.XEnvelope">
	<summary>
 XChange Envelope is a Member of a Bag and Contains Pairs of ordinal, XSlot
 </summary>
	<remarks>
 Design principles:
 an envelope is an arbitary and non persistable xchange class which is used to put together all related entries of otdb dataobjects in xslots
 the data exchange is done in 2 steps: 
 
 1. Prechecking and validating the slots
 2. Exchanging and persisting the changes
 
 the envelope constist of xslots which can be adressed by ordinals (of the exchange structure e.g columns), 
 otdb objectnames and entrynames or otdb entry exchange ids or otdb exchange aliases.
 
 prechecking is necessary to process the elements !
 
 An envelope has a xcmd whch is a operation to be carried out. the xcmd is assigned to the different otdb dataobjects (xobjects)
 and xslots.
 
 Events:
 for transformation of data values of the slots especially in the case of special values of the exchanging sub system
 the events 
 
 ConvertRequest2HostValue
 ConvertRequest2DBValue 
 
 can be used. These are propagated to the XBAG level
 </remarks>
</member><member name="M:OnTrack.XChange.CSVXChangeManager.FeedInCSV(System.String,System.Char,System.Char)">
	<summary>
 Feeds in a csv file from the file system - the first headerids must be the key of the first objectnames
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.CSVXChangeManager.DumpOutToCSV(System.String,OnTrack.XChange.XChangeConfiguration)">
	<summary>
 dumps a xchange configuration result run out to a path or path with filename
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.CSVXChangeManager.CSVParseErrorHandler(LumenWorks.Framework.IO.Csv.CsvReader,LumenWorks.Framework.IO.Csv.ParseErrorEventArgs)">
	<summary>
 parse error handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:OnTrack.XChange.CSVXChangeManager">
	<summary>
 CSV XChangeManager is a XChange Manager based on .csv files (with headers as XIDs)
 Main Function is FeedInCSV(path)
 </summary>
	<remarks></remarks>
</member><member name="M:OnTrack.XChange.XChangeManager.CreateXChangeConfigFromObjectDefinition(System.String,System.String,OnTrack.XChange.otXChangeCommandType)">
	<summary>
 routine creates a xchange config from the object definition and adds all 
 </summary>
	<param name="configname"></param>
	<param name="objectname"></param>
	<param name="xcmd"></param>
	<returns></returns>
	<remarks></remarks>
</member>
</members>
</doc>